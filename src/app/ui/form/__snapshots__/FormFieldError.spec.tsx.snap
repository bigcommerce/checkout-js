// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormFieldError renders error message 1`] = `
<Memo(FormProvider)
  initialIsSubmitted={true}
>
  <Formik
    enableReinitialize={false}
    initialValues={
      Object {
        "foobar": "",
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    render={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
  >
    <Memo(BasicFormField)
      name="foobar"
      validate={[Function]}
    >
      <FormikConnect(FieldInner)
        name="foobar"
        render={[Function]}
        validate={[Function]}
      >
        <FieldInner
          formik={
            Object {
              "dirty": true,
              "errors": Object {
                "foobar": "Invalid",
              },
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "foobar": "",
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "status": undefined,
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {
                "foobar": true,
              },
              "unregisterField": [Function],
              "validate": undefined,
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": undefined,
              "values": Object {
                "foobar": "123",
              },
            }
          }
          name="foobar"
          render={[Function]}
          validate={[Function]}
        >
          <Component
            field={
              Object {
                "name": "foobar",
                "onBlur": [Function],
                "onChange": [Function],
                "value": "123",
              }
            }
            form={
              Object {
                "dirty": true,
                "errors": Object {
                  "foobar": "Invalid",
                },
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "foobar": "",
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {
                  "foobar": true,
                },
                "unregisterField": [Function],
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "values": Object {
                  "foobar": "123",
                },
              }
            }
          >
            <Memo(FormFieldContainer)
              hasError="Invalid"
            >
              <div
                className="form-field form-field--error"
              >
                <InnerFieldInput
                  field={
                    Object {
                      "name": "foobar",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "value": "123",
                    }
                  }
                  form={
                    Object {
                      "dirty": true,
                      "errors": Object {
                        "foobar": "Invalid",
                      },
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialValues": Object {
                        "foobar": "",
                      },
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setError": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {
                        "foobar": true,
                      },
                      "unregisterField": [Function],
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "values": Object {
                        "foobar": "123",
                      },
                    }
                  }
                >
                  <input
                    name="foobar"
                    onBlur={[Function]}
                    onChange={[Function]}
                    value="123"
                  />
                </InnerFieldInput>
              </div>
            </Memo(FormFieldContainer)>
          </Component>
        </FieldInner>
      </FormikConnect(FieldInner)>
    </Memo(BasicFormField)>
    <Memo(FormFieldError)
      name="foobar"
      testId="test"
    >
      <FormikConnect(ErrorMessageImpl)
        name="foobar"
        render={[Function]}
      >
        <ErrorMessageImpl
          formik={
            Object {
              "dirty": true,
              "errors": Object {
                "foobar": "Invalid",
              },
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "foobar": "",
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "status": undefined,
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {
                "foobar": true,
              },
              "unregisterField": [Function],
              "validate": undefined,
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": undefined,
              "values": Object {
                "foobar": "123",
              },
            }
          }
          name="foobar"
          render={[Function]}
        >
          <ul
            className="form-field-errors"
            data-test="test"
          >
            <li
              className="form-field-error"
            >
              <label
                aria-live="polite"
                className="form-inlineMessage"
                htmlFor="foobar"
                role="alert"
              >
                Invalid
              </label>
            </li>
          </ul>
        </ErrorMessageImpl>
      </FormikConnect(ErrorMessageImpl)>
    </Memo(FormFieldError)>
  </Formik>
</Memo(FormProvider)>
`;
