{"version":3,"sources":["webpack://checkout/./src/app/billing/getBillingMethodId.ts","webpack://checkout/./src/app/billing/BillingForm.tsx","webpack://checkout/./src/app/billing/Billing.tsx"],"names":["getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","state","isResettingAddress","addressFormRef","handleSelectAddress","address","this","props","updateAddress","onUnhandledError","setState","handleUseNewAddress","render","googleMapsApiKey","billingAddress","countriesWithAutocomplete","customer","addresses","isGuest","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","values","shouldRenderStaticAddress","allFormFields","countryCode","customFormFields","filter","hasCustomFormFields","length","editableFormFields","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","onSelectAddress","onUseNewAddress","selectedAddress","AddressForm","formFields","shouldShowSaveAddress","OrderComments","Button","disabled","type","variant","Primary","TranslatedString","withLanguage","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","language","getAddressValidationSchema","isValidSync","validationSchema","getAddressCustomFieldsValidationSchema","enableReinitialize","addressValues","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","isInitializing","Legend","testId","unmountContentWhenLoading","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","checkoutSettings","enableOrderComments","loadBillingAddressFields","methodId","getShippableItemsCount","updateBillingAddress"],"mappings":"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","file":"billing-5ec7bd58.js","sourcesContent":["import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { getAddressCustomFieldsValidationSchema, getAddressValidationSchema, isValidCustomerAddress, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    methodId?: string;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends PureComponent<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses, isGuest },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            values,\n            methodId,\n        } = this.props;\n\n        const shouldRenderStaticAddress = methodId === 'amazonpay';\n        const allFormFields = getFields(values.countryCode);\n        const customFormFields = allFormFields.filter(({ custom }) => custom);\n        const hasCustomFormFields = customFormFields.length > 0;\n        const editableFormFields = shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = billingAddress &&\n            isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\n\n        return (\n            <Form autoComplete=\"on\">\n                { shouldRenderStaticAddress && billingAddress &&\n                    <div className={ 'form-fieldset' }>\n                        <StaticBillingAddress address={ billingAddress } />\n                    </div> }\n\n                <Fieldset id=\"checkoutBillingAddress\" ref={ this.addressFormRef }>\n                    { hasAddresses && !shouldRenderStaticAddress &&\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={ isResettingAddress }>\n                                <AddressSelect\n                                    addresses={ addresses }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                    selectedAddress={ hasValidCustomerAddress ? billingAddress : undefined }\n                                />\n                            </LoadingOverlay>\n                        </Fieldset> }\n\n                    { !hasValidCustomerAddress &&\n                        <LoadingOverlay isLoading={ isResettingAddress }>\n                            <AddressForm\n                                countries={ countries }\n                                countriesWithAutocomplete={ countriesWithAutocomplete }\n                                countryCode={ values.countryCode }\n                                formFields={ editableFormFields }\n                                googleMapsApiKey={ googleMapsApiKey }\n                                setFieldValue={ setFieldValue }\n                                shouldShowSaveAddress={ !isGuest }\n                            />\n                        </LoadingOverlay> }\n                </Fieldset>\n\n                { shouldShowOrderComments &&\n                    <OrderComments /> }\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ isUpdating || isResettingAddress }\n                        id=\"checkout-billing-continue\"\n                        isLoading={ isUpdating || isResettingAddress }\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Partial<Address>) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        this.handleSelectAddress({});\n    };\n}\n\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\n        {\n        ...mapAddressToFormValues(\n            getFields(billingAddress && billingAddress.countryCode),\n            billingAddress\n        ),\n        orderComment: customerMessage,\n    }),\n    isInitialValid: ({\n        billingAddress,\n        getFields,\n        language,\n    }) => (\n        !!billingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(billingAddress.countryCode),\n        }).isValidSync(billingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: BillingFormProps & WithLanguageProps) => methodId === 'amazonpay' ?\n        (lazy<Partial<AddressFormValues>>(values => getAddressCustomFieldsValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))) :\n        (lazy<Partial<AddressFormValues>>(values => getAddressValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))),\n    enableReinitialize: true,\n})(BillingForm));\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport getBillingMethodId from './getBillingMethodId';\nimport BillingForm, { BillingFormValues } from './BillingForm';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    billingAddress?: Address;\n    methodId?: string;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            onReady = noop,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            updateAddress,\n            isInitializing,\n            ...props\n        } = this.props;\n\n        return (\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\">\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <BillingForm\n                        { ...props }\n                        onSubmit={ this.handleSubmit }\n                        updateAddress={ updateAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: {\n            isLoadingBillingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const {\n        enableOrderComments,\n        googleMapsApiKey,\n        features,\n    } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        methodId: getBillingMethodId(checkout),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"sourceRoot":""}