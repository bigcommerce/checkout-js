{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./src/app/locale/withDate.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/ui/form/DynamicInput.tsx","webpack://checkout/./src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/payment/getPreselectedPayment.ts","webpack://checkout/./src/app/billing/getBillingMethodId.ts","webpack://checkout/./src/app/billing/BillingForm.tsx","webpack://checkout/./src/app/billing/Billing.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","TextArea","testId","isEqualAddress","address1","address2","normalizeAddress","stateOrProvince","stateOrProvinceCode","isSameState","address","customFields","filter","disabled","labelContent","onChange","name","renderField","field","checked","value","render","getShippableItemsCount","cart","lineItems","physicalItems","item","addedByPromotion","mapCustomFormFieldsFromFormValues","customFieldsObject","key","fieldValue","padMonth","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","document","addEventListener","removeEventListener","componentWillUnmount","this","props","children","placement","dropdown","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","ADDRESS_FIELD_IDS","postalCode","getAddressFormFieldLegacyName","getAddressFormFieldInputId","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","find","types","indexOf","create","autocompleteData","addressSelector","getItemClassName","highlightedIndex","index","classes","join","instance","getItemProps","menuProps","items","length","map","content","stateReducer","changes","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","undefined","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","substr","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","countryCode","supportedCountries","parentFieldName","fieldName","TranslatedString","getAddressFormFieldLabelId","renderInput","country","FormField","Label","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","formFields","dateFormFieldNames","custom","fieldType","DynamicFormFieldType","date","componentDidMount","current","querySelector","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","placeholder","translate","CheckboxFormField","withLanguage","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","Input","options","inputFormat","handleDateChange","dateValue","target","optionValue","radio","checkbox","Array","isArray","includes","calendarClassName","dateFormat","maxDate","max","Date","minDate","min","placeholderText","toUpperCase","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","href","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","FormFieldContainer","hasError","FormFieldError","renderProps","secret","fieldLabel","required","maxLength","fieldInputId","labelComponent","dynamicFormFieldType","number","text","helperLabel","rows","mapAddressFromFormValues","formValues","shouldSaveAddress","isValidCustomerAddress","addresses","customerAddress","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","handleUseNewAddress","onUseNewAddress","role","AddressSelectMenu","AddressSelectButton","AddressSelect","renderLabel","hidden","legend","getPreselectedPayment","checkout","payments","payment","providerId","getBillingMethodId","preselectedPayment","isResettingAddress","addressFormRef","updateAddress","onUnhandledError","billingAddress","customer","isGuest","getFields","isUpdating","shouldShowOrderComments","shouldRenderStaticAddress","allFormFields","customFormFields","hasCustomFormFields","editableFormFields","hasAddresses","hasValidCustomerAddress","Form","StaticBillingAddress","LoadingOverlay","isLoading","AddressForm","OrderComments","Button","variant","Primary","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","getAddressFormFieldsValidationSchema","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","enableReinitialize","addressValues","updateCheckout","navigateNextStep","promises","all","initialize","onReady","isInitializing","Legend","unmountContentWhenLoading","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","checkoutSettings","enableOrderComments","loadBillingAddressFields","methodId","updateBillingAddress"],"mappings":"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","file":"billing-e50d6d11.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    ) && isSameState(address1, address2);\n}\n\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\n        return true;\n    }\n\n    if (address1.stateOrProvinceCode && address1.stateOrProvinceCode === address2.stateOrProvinceCode) {\n        return true;\n    }\n\n    return address1.stateOrProvince === address2.stateOrProvince &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode;\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = [\n        'id',\n        'shouldSaveAddress',\n        'stateOrProvince',\n        'stateOrProvinceCode',\n        'type',\n        'email',\n        'country',\n    ];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                disabled={ disabled }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        disabled,\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(\n    customFieldsObject: { [id: string]: any }\n): Array<{fieldId: string; fieldValue: string}> {\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"popoverList\"\n            data-test={ testId } { ...menuProps }\n        >\n            { items\n                .map((item, index) => (\n                    <li\n                        className={ getItemClassName(highlightedIndex, index) }\n                        data-test={ testId && `${testId}-item` }\n                        { ...getItemProps({\n                            key: item.id,\n                            index,\n                            item,\n                        }) }\n                        key={ index }\n                    >\n                        { item.content }\n                    </li>\n                )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                initialInputValue={ initialValue }\n                itemToString={ this.itemToString }\n                labelId={ inputProps && inputProps['aria-labelledby'] ? inputProps['aria-labelledby'] : null }\n                onChange={ onSelect }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    getItemProps={ getItemProps }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    menuProps={ getMenuProps() }\n                                    testId={ listTestId }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n\n        const {\n            autoComplete,\n            items,\n        } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={ 0 }\n                initialValue={ initialValue }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete,\n                } }\n                items={ items }\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={ this.onChange }\n                onSelect={ this.onSelect }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            fields,\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const {\n            componentRestrictions,\n            types,\n        } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: types || ['geocode'],\n                componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport { getAddressFormFieldInputId, getAddressFormFieldLabelId } from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getAddressFormFieldInputId(name),\n        'aria-labelledby': labelId,\n    }), [name, labelId]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n            initialValue={ field.value }\n            inputProps={ inputProps }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            nextElement={ nextElement }\n            onChange={ onChange }\n            onSelect={ onSelect }\n            onToggleOpen={ onToggleOpen }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                input={ renderInput }\n                label={ <Label htmlFor={ inputProps.id } id={ labelId }>{ labelContent }</Label> }\n                name={ fieldName }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport { getAddressFormFieldInputId, getAddressFormFieldLegacyName } from './getAddressFormFieldInputId';\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n        } = this.props;\n\n        return (<>\n            <Fieldset>\n                <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                    { formFields.map(field => {\n                        const addressFieldName = field.name;\n                        const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                        if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                            return (\n                                <GoogleAutocompleteFormField\n                                    apiKey={ googleMapsApiKey }\n                                    countryCode={ countryCode }\n                                    field={ field }\n                                    key={ field.id }\n                                    nextElement={ this.nextElement || undefined }\n                                    onChange={ this.handleAutocompleteChange }\n                                    onSelect={ this.handleAutocompleteSelect }\n                                    onToggleOpen={ onAutocompleteToggle }\n                                    parentFieldName={ fieldName }\n                                    supportedCountries={ countriesWithAutocomplete }\n                                />\n                            );\n                        }\n\n                        return (\n                            <DynamicFormField\n                                autocomplete={ AUTOCOMPLETE[field.name] }\n                                extraClass={ `dynamic-form-field--${getAddressFormFieldLegacyName(addressFieldName)}` }\n                                field={ field }\n                                inputId={ getAddressFormFieldInputId(addressFieldName) }\n                                // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                key={ `${field.id}-${field.name}` }\n                                label={ field.custom ? field.label : <TranslatedString id={ LABEL[field.name] } /> }\n                                onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                                parentFieldName={ field.custom ?\n                                    (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                    fieldName }\n                                placeholder={ translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                            />\n                        );\n                    }) }\n                </div>\n            </Fieldset>\n            { shouldShowSaveAddress &&\n                <CheckboxFormField\n                    labelContent={ <TranslatedString id=\"address.save_in_addressbook\" /> }\n                    name={ fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress' }\n                /> }\n        </>);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback((dateValue, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: dateValue,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={ inputFormat }\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText={ inputFormat.toUpperCase() }\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        remove,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        { options.length > 1 && <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        /> }\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { label || fieldLabel }\n            { !required &&\n                <>\n                    { ' ' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        fieldInputId,\n        fieldLabel,\n        required,\n        label,\n    ]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ autocomplete }\n            fieldType={ dynamicFormFieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        fieldInputId,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n        dynamicFormFieldType,\n        autocomplete,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field ${extraClass}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport './AddressSelect.scss';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={ addresses }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ this.handleUseNewAddress }\n                                selectedAddress={ selectedAddress }\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a\n                data-test=\"add-new-address\"\n                href=\"#\"\n                onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }\n            >\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" /> }\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            autoComplete={ 'off' }\n            maxLength={ 2000 }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset legend={ legend } testId=\"checkout-shipping-comments\">\n        <FormField\n            input={ renderInput }\n            label={ renderLabel }\n            name=\"orderComment\"\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(payment =>\n        !isGiftCertificatePayment(payment)\n        && !isStoreCreditPayment(payment)\n        && !!payment.providerId\n    );\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isValidCustomerAddress, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    methodId?: string;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends PureComponent<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses, isGuest },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            values,\n            methodId,\n        } = this.props;\n\n        const shouldRenderStaticAddress = methodId === 'amazonpay';\n        const allFormFields = getFields(values.countryCode);\n        const customFormFields = allFormFields.filter(({ custom }) => custom);\n        const hasCustomFormFields = customFormFields.length > 0;\n        const editableFormFields = shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = billingAddress &&\n            isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\n\n        return (\n            <Form autoComplete=\"on\">\n                { shouldRenderStaticAddress && billingAddress &&\n                    <div className={ 'form-fieldset' }>\n                        <StaticBillingAddress address={ billingAddress } />\n                    </div> }\n\n                <Fieldset id=\"checkoutBillingAddress\" ref={ this.addressFormRef }>\n                    { hasAddresses && !shouldRenderStaticAddress &&\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={ isResettingAddress }>\n                                <AddressSelect\n                                    addresses={ addresses }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                    selectedAddress={ hasValidCustomerAddress ? billingAddress : undefined }\n                                />\n                            </LoadingOverlay>\n                        </Fieldset> }\n\n                    { !hasValidCustomerAddress &&\n                        <LoadingOverlay isLoading={ isResettingAddress }>\n                            <AddressForm\n                                countries={ countries }\n                                countriesWithAutocomplete={ countriesWithAutocomplete }\n                                countryCode={ values.countryCode }\n                                formFields={ editableFormFields }\n                                googleMapsApiKey={ googleMapsApiKey }\n                                setFieldValue={ setFieldValue }\n                                shouldShowSaveAddress={ !isGuest }\n                            />\n                        </LoadingOverlay> }\n                </Fieldset>\n\n                { shouldShowOrderComments &&\n                    <OrderComments /> }\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ isUpdating || isResettingAddress }\n                        id=\"checkout-billing-continue\"\n                        isLoading={ isUpdating || isResettingAddress }\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Partial<Address>) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        this.handleSelectAddress({});\n    };\n}\n\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\n        {\n        ...mapAddressToFormValues(\n            getFields(billingAddress && billingAddress.countryCode),\n            billingAddress\n        ),\n        orderComment: customerMessage,\n    }),\n    isInitialValid: ({\n        billingAddress,\n        getFields,\n        language,\n    }) => (\n        !!billingAddress && getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(billingAddress.countryCode),\n        }).isValidSync(billingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: BillingFormProps & WithLanguageProps) => methodId === 'amazonpay' ?\n        (lazy<Partial<AddressFormValues>>(values => getCustomFormFieldsValidationSchema({\n            translate: getTranslateAddressError(language),\n            formFields: getFields(values && values.countryCode),\n        }))) :\n        (lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))),\n    enableReinitialize: true,\n})(BillingForm));\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport getBillingMethodId from './getBillingMethodId';\nimport BillingForm, { BillingFormValues } from './BillingForm';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    billingAddress?: Address;\n    methodId?: string;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            onReady = noop,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            updateAddress,\n            isInitializing,\n            ...props\n        } = this.props;\n\n        return (\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\">\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <BillingForm\n                        { ...props }\n                        onSubmit={ this.handleSubmit }\n                        updateAddress={ updateAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: {\n            isLoadingBillingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const {\n        enableOrderComments,\n        googleMapsApiKey,\n        features,\n    } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        methodId: getBillingMethodId(checkout),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"sourceRoot":""}