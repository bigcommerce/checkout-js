{"version":3,"file":"347-b44c3391.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/SingleLineStaticAddress.tsx","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorAU.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorCA.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts"],"sourcesContent":["import { Address } from '@bigcommerce/checkout-sdk';\nimport { isEmpty } from 'lodash';\nimport React from \"react\";\n\nimport AddressType from \"./AddressType\";\n\nexport interface SingleLineStaticAddressProps {\n    address: Address;\n    type?: AddressType;\n}\n\nexport const getAddressContent: (value: Address) => string = ({\n    firstName,\n    lastName,\n    address1,\n    address2,\n    city,\n    countryCode,\n    stateOrProvince,\n    postalCode,\n}: Address): string => {\n    const addressParts = [address1, address2, city, stateOrProvince, countryCode, postalCode];\n    const nonEmptyAddressParts = addressParts.filter(Boolean);\n    const address = nonEmptyAddressParts.join(', ');\n\n    if (!firstName || !lastName || !address) {\n        return '';\n    }\n\n    return `${firstName} ${lastName}, ${address}`;\n};\n\nconst SingleLineStaticAddress = ({ address }: SingleLineStaticAddressProps) => {\n    const isValid = !isEmpty(address);\n\n    return !isValid ? null : (\n        <div className=\"vcard checkout-address--static\" data-test=\"static-address\">\n            <p className=\"address-entry\">\n                {getAddressContent(address)}\n            </p>\n        </div>\n    );\n}\n\nexport default SingleLineStaticAddress;\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={{\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    }}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(\n        (name) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" maxLength={2000} />,\n        [],\n    );\n\n    const legend = useMemo(\n        () => (\n            <Legend>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Legend>\n        ),\n        [],\n    );\n\n    return (\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\n            <FormField id=\"orderComment\" input={renderInput} label={renderLabel} name=\"orderComment\" />\n        </Fieldset>\n    );\n};\n\nexport default OrderComments;\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(\n        (payment) =>\n            !isGiftCertificatePayment(payment) &&\n            !isStoreCreditPayment(payment) &&\n            !!payment.providerId,\n    );\n}\n","import {\n    Address,\n    AddressRequestBody,\n    BillingAddress,\n    CustomerAddress,\n} from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(\n    address1?: ComparableAddress,\n    address2?: ComparableAddress,\n): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return (\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\n        isSameState(address1, address2)\n    );\n}\n\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\n        return true;\n    }\n\n    if (\n        address1.stateOrProvinceCode &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    ) {\n        return true;\n    }\n\n    return (\n        address1.stateOrProvince === address2.stateOrProvince &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = [\n        'id',\n        'shouldSaveAddress',\n        'stateOrProvince',\n        'stateOrProvinceCode',\n        'type',\n        'email',\n        'country',\n    ];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields,\n    );\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(\n    cart: Cart,\n): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion && !item.parentId));\n}\n","import React, { FunctionComponent, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\n\nimport { AddressSelectProps } from './AddressSelect';\nimport SingleLineStaticAddress from './SingleLineStaticAddress';\nimport StaticAddress from './StaticAddress';\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses' | 'type' | 'showSingleLineAddress' | 'placeholderText'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\n    selectedAddress,\n    language,\n    type,\n    showSingleLineAddress,\n    placeholderText,\n}) => {\n    const [ariaExpanded, setAriaExpanded] = useState(false);\n\n    const SelectedAddress = () => {\n        if (!selectedAddress) {\n            return placeholderText ?? <TranslatedString id=\"address.enter_address_action\" />;\n        }\n\n        return showSingleLineAddress\n            ? <SingleLineStaticAddress address={selectedAddress} type={type} />\n            : <StaticAddress address={selectedAddress} type={type} />;\n    }\n\n    return (\n        <a\n            aria-controls=\"addressDropdown\"\n            aria-describedby={language.translate('address.enter_or_select_address_action')}\n            aria-expanded={ariaExpanded}\n            className=\"button dropdown-button dropdown-toggle--select\"\n            data-test=\"address-select-button\"\n            href=\"#\"\n            id=\"addressToggle\"\n            onBlur={() => setAriaExpanded(false)}\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\n        >\n            <SelectedAddress />\n        </a>\n    );\n};\n\nexport default withLanguage(AddressSelectButton);\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport AddressSelectButton from './AddressSelectButton';\nimport AddressType from './AddressType';\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nimport './AddressSelect.scss';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    type: AddressType;\n    showSingleLineAddress?: boolean;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n    placeholderText?: React.JSX.Element;\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n    type,\n}) => (\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a\n                data-test=\"add-new-address\"\n                href=\"#\"\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\n            >\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        {addresses.map((address) => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                data-test=\"address-select-option\"\n                key={address.id}\n            >\n                <a\n                    data-test=\"address-select-option-action\"\n                    href=\"#\"\n                    onClick={preventDefault(() => onSelectAddress(address))}\n                >\n                    <StaticAddress address={address} type={type} />\n                </a>\n            </li>\n        ))}\n    </ul>\n);\n\nconst AddressSelect = ({\n    addresses,\n    selectedAddress,\n    type,\n    showSingleLineAddress,\n    onSelectAddress,\n    onUseNewAddress,\n    placeholderText,\n}: AddressSelectProps) => {\n    const { shouldShowPayPalFastlaneLabel } = usePayPalFastlaneAddress();\n\n    const handleSelectAddress = (newAddress: Address) => {\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        onUseNewAddress(selectedAddress);\n    };\n\n    return (\n        <div className=\"form-field\">\n            <div className=\"dropdown--select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AddressSelectMenu\n                            addresses={addresses}\n                            onSelectAddress={handleSelectAddress}\n                            onUseNewAddress={handleUseNewAddress}\n                            selectedAddress={selectedAddress}\n                            type={type}\n                        />\n                    }\n                >\n                    <AddressSelectButton\n                        addresses={addresses}\n                        placeholderText={placeholderText}\n                        selectedAddress={selectedAddress}\n                        showSingleLineAddress={showSingleLineAddress}\n                        type={type}\n                    />\n                </DropdownTrigger>\n            </div>\n\n            {shouldShowPayPalFastlaneLabel && <PoweredByPayPalFastlaneLabel />}\n        </div>\n    );\n}\n\nexport default memo(AddressSelect);\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[],\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\n}\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\n\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(googlePlace: google.maps.places.PlaceResult) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        if (this.getCountry() === 'NZ') {\n            return this._get('sublocality', 'short_name');\n        }\n\n        return this._get('subpremise', 'short_name');\n    }\n\n    getCity(): string {\n        return (\n            this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name')\n        );\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\n    ): string {\n        const element =\n            this._address && this._address.find((field) => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorAU extends AddressSelector {\n    getStreet(): string {\n        return `${this._get('street_number', 'long_name')} ${this._get('route', 'long_name')}`;\n    }\n\n    getStreet2(): string {\n        return this._get('subpremise', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorCA extends AddressSelector {\n    getCity(): string {\n        return this._get('sublocality_level_1', 'long_name') || this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return '';\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n\n    getPostCode(): string {\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorAU from './AddressSelectorAU';\nimport AddressSelectorCA from './AddressSelectorCA';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const countryComponent = autocompleteData.address_components?.find(\n            component => component.types.indexOf('country') >= 0);\n        const countryShortName = countryComponent?.short_name || '';\n\n        switch (countryShortName) {\n            case 'GB':\n                return new AddressSelectorUK(autocompleteData);\n\n            case 'CA':\n                return new AddressSelectorCA(autocompleteData);\n            \n            case 'AU':\n                return new AddressSelectorAU(autocompleteData);\n\n            default:\n                return new AddressSelector(autocompleteData);\n        }\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return <div className=\"popover\">{children}</div>;\n};\n\nexport default Popover;\n","import React, { FunctionComponent, memo } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n     \n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\n            {items.map((item, index) => (\n                <li\n                    className={getItemClassName(highlightedIndex, index)}\n                    data-test={testId && `${testId}-item`}\n                     \n                    {...getItemProps({\n                        key: item.id,\n                        index,\n                        item,\n                    })}\n                    key={index}\n                >\n                    {item.content}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { includes, isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Label } from '../form';\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    defaultHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem | null): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            defaultHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={defaultHighlightedIndex}\n                initialHighlightedIndex={initialHighlightedIndex}\n                initialInputValue={initialValue}\n                itemToString={this.itemToString}\n                labelId={\n                    inputProps && inputProps['aria-labelledby']\n                        ? inputProps['aria-labelledby']\n                        : null\n                }\n                onChange={onSelect}\n                onStateChange={this.handleStateChange}\n                stateReducer={this.stateReducer}\n            >\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\n                    const validInputProps = { ...getInputProps({ value: initialValue }), ...inputProps };\n\n                    delete validInputProps.labelText;\n\n                    return (\n                        <div>\n                            <input {...validInputProps} />\n                            {inputProps && includes(inputProps.className, 'floating') && (\n                                <Label\n                                    htmlFor={inputProps.id}\n                                    id={inputProps['aria-labelledby']}\n                                    isFloatingLabelEnabled={true}\n                                >\n                                    {inputProps.labelText}\n                                </Label>\n                            )}\n                            {isOpen && !!items.length && (\n                                <Popover>\n                                    <PopoverList\n                                        getItemProps={getItemProps}\n                                        highlightedIndex={\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\n                                        }\n                                        items={items.map((item) => this.toPopoverItem(item))}\n                                        menuProps={getMenuProps()}\n                                        testId={listTestId}\n                                    />\n                                    {children}\n                                </Popover>\n                            )}\n                        </div>\n                    );\n                }}\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\n                );\n                key += 1;\n            }\n\n            lastIndex = offset + length;\n\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem | null): string {\n        return (item && item.value) || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>,\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n            case Downshift.stateChangeTypes.blurInput:\n            case Downshift.stateChangeTypes.blurButton:\n            case Downshift.stateChangeTypes.mouseUp:\n            case Downshift.stateChangeTypes.touchEnd:\n                return {\n                    ...changes,\n                    inputValue: state.inputValue,\n                };\n\n            case Downshift.stateChangeTypes.changeInput:\n                if (changes.inputValue !== state.inputValue && onChange) {\n                    onChange(changes.inputValue || '', state.isOpen);\n                }\n\n                return changes;\n\n            case Downshift.stateChangeTypes.keyDownEnter:\n                return changes;\n\n            default:\n                return changes;\n        }\n    };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                // TODO:CHECKOUT-9228 Fix lint error after nx upgrade to 19.8.9\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                reject();\n            };\n\n            this._scriptLoader\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch((e) => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(\n        autocompleteWindow.google &&\n            autocompleteWindow.google.maps &&\n            autocompleteWindow.google.maps.places,\n    );\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\nexport interface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\n\n        const { autoComplete, items } = this.state;\n\n        return (\n            <Autocomplete\n                defaultHighlightedIndex={-1}\n                initialHighlightedIndex={-1}\n                initialValue={initialValue}\n                inputProps={{\n                    ...inputProps,\n                    autoComplete,\n                }}\n                items={items}\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={this.onChange}\n                onSelect={this.onSelect}\n                onToggleOpen={onToggleOpen}\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\n        const { fields, onSelect = noop, nextElement } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\n            service.getDetails(\n                {\n                    placeId: item.id,\n                    fields: fields || ['address_components', 'name'],\n                },\n                (result) => {\n                    if (nextElement) {\n                        nextElement.focus();\n                    }\n\n                    onSelect(result, item);\n                },\n            );\n        });\n    };\n\n    private onChange: (input: string) => void = (input) => {\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const { componentRestrictions, types } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\n            service.getPlacePredictions(\n                {\n                    input,\n                    types: types || ['geocode'],\n                    componentRestrictions,\n                },\n                (results) => this.setState({ items: this.toAutocompleteItems(results) }),\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(\n        results?: google.maps.places.AutocompletePrediction[],\n    ): AutocompleteItem[] {\n        return (results || []).map((result) => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\n\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLabelId,\n} from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    isFloatingLabelEnabled?: boolean;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\n    field: { default: placeholder, name, maxLength },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n    isFloatingLabelEnabled,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(\n        () => ({\n            className: classNames(\n                'form-input optimizedCheckout-form-input',\n                { 'floating-input': isFloatingLabelEnabled },\n            ),\n            id: getAddressFormFieldInputId(name),\n            'aria-labelledby': labelId,\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\n            labelText: isFloatingLabelEnabled ? labelContent : null,\n            maxLength: maxLength || undefined,\n        }),\n        [name, labelId, placeholder, labelContent, maxLength],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <GoogleAutocomplete\n                apiKey={apiKey}\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\n                initialValue={field.value}\n                inputProps={inputProps}\n                isAutocompleteEnabled={\n                    countryCode ? supportedCountries.indexOf(countryCode) > -1 : false\n                }\n                nextElement={nextElement}\n                onChange={onChange}\n                onSelect={onSelect}\n                onToggleOpen={onToggleOpen}\n            />\n        ),\n        [\n            apiKey,\n            countryCode,\n            inputProps,\n            nextElement,\n            onChange,\n            onSelect,\n            onToggleOpen,\n            supportedCountries,\n        ],\n    );\n\n    const renderLabel = isFloatingLabelEnabled ? null : (\n        <Label htmlFor={inputProps.id} id={labelId} isFloatingLabelEnabled={isFloatingLabelEnabled}>\n            {labelContent}\n        </Label>\n    );\n\n    return (\n        <div\n            className={classNames(\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\n                { 'floating-form-field': isFloatingLabelEnabled },\n            )}\n            data-test=\"google-autocomplete-form-field\"\n        >\n            <FormField\n                input={renderInput}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                label={renderLabel}\n                name={fieldName}\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\n\n\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLegacyName,\n} from './getAddressFormFieldInputId';\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\n        memoize((name) => (value) => {\n            this.syncNonFormikValue(name, value);\n        });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        return (\n            <>\n                <Fieldset>\n                    <div\n                        className=\"checkout-address\"\n                        ref={this.containerRef as RefObject<HTMLDivElement>}\n                    >\n                        {formFields.map((field) => {\n                            const addressFieldName = field.name;\n                            const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                            if (\n                                addressFieldName === 'address1' &&\n                                googleMapsApiKey &&\n                                countriesWithAutocomplete\n                            ) {\n                                return (\n                                    <GoogleAutocompleteFormField\n                                        apiKey={googleMapsApiKey}\n                                        countryCode={countryCode}\n                                        field={field}\n                                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                        key={field.id}\n                                        nextElement={this.nextElement || undefined}\n                                        onChange={this.handleAutocompleteChange}\n                                        onSelect={this.handleAutocompleteSelect}\n                                        onToggleOpen={onAutocompleteToggle}\n                                        parentFieldName={fieldName}\n                                        supportedCountries={countriesWithAutocomplete}\n                                    />\n                                );\n                            }\n\n                            return (\n                                <DynamicFormField\n                                    autocomplete={AUTOCOMPLETE[field.name]}\n                                    extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\n                                        addressFieldName,\n                                    )}`}\n                                    field={field}\n                                    inputId={getAddressFormFieldInputId(addressFieldName)}\n                                    // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                    key={`${field.id}-${field.name}`}\n                                    label={\n                                        field.custom ? (\n                                            field.label\n                                        ) : (\n                                            <TranslatedString id={LABEL[field.name]} />\n                                        )\n                                    }\n                                    onChange={this.handleDynamicFormFieldChange(addressFieldName)}\n                                    parentFieldName={\n                                        field.custom\n                                            ? fieldName\n                                                ? `${fieldName}.customFields`\n                                                : 'customFields'\n                                            : fieldName\n                                    }\n                                    placeholder={this.getPlaceholderValue(\n                                        field,\n                                        translatedPlaceholderId,\n                                    )}\n                                />\n                            );\n                        })}\n                    </div>\n                </Fieldset>\n                {shouldShowSaveAddress && (\n                    <CheckboxFormField\n                        labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\n                        name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\n                    />\n                )}\n            </>\n        );\n    }\n\n    private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\n        const { language } = this.props;\n\n        if (field.default && field.fieldType !== 'dropdown') {\n            return field.default;\n        }\n\n        return translatedPlaceholderId && language.translate(translatedPlaceholderId);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (\n        value,\n        isOpen,\n    ) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem,\n    ) => void = (place, { value: autocompleteValue }) => {\n        const { countries, setFieldValue = noop, onChange = noop } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            if (fieldName === AUTOCOMPLETE_FIELD_NAME && value === undefined) {\n                return;\n            }\n\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        const address1 = address.address1 ? address.address1 : autocompleteValue;\n\n        if (address1) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, address1);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\n        fieldName,\n        value,\n    ) => {\n        const { formFields, setFieldValue = noop, onChange = noop } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map((field) => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = [],\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find((c) => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    // TODO: Apply this fix for US, UK and CA addresses too.\n    const steet1 = countryCode === 'AU' ? accessor.getStreet() : undefined;\n\n    return {\n        address1: steet1,\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...(state ? getState(state, country && country.subdivisions) : {}),\n    };\n}\n\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n"],"names":["getAddressContent","firstName","lastName","address1","address2","city","countryCode","address","filter","Boolean","join","isEmpty","className","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","getRootElement","addEventListener","removeEventListener","componentWillUnmount","document","this","render","props","children","placement","dropdown","ref","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","getElementById","defaultProps","Component","renderLabel","useCallback","name","hidden","htmlFor","id","renderInput","field","autoComplete","maxLength","legend","useMemo","testId","input","label","getPreselectedPayment","checkout","payments","find","payment","providerId","isEqualAddress","isEqual","normalizeAddress","stateOrProvince","stateOrProvinceCode","isSameState","omit","customFields","getShippableItemsCount","cart","lineItems","physicalItems","item","addedByPromotion","parentId","withLanguage","selectedAddress","language","type","showSingleLineAddress","placeholderText","useState","ariaExpanded","setAriaExpanded","translate","href","onBlur","preventDefault","SingleLineStaticAddress","StaticAddress","TranslatedString","AddressSelectMenu","addresses","onSelectAddress","onUseNewAddress","map","key","memo","shouldShowPayPalFastlaneLabel","usePayPalFastlaneAddress","DropdownTrigger","newAddress","PoweredByPayPalFastlaneLabel","isValidCustomerAddress","formFields","some","customerAddress","mapAddressFromFormValues","formValues","shouldSaveAddress","ADDRESS_FIELD_IDS","postalCode","getAddressFormFieldLegacyName","getAddressFormFieldInputId","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","access","element","types","indexOf","create","autocompleteData","countryComponent","component","short_name","getItemClassName","highlightedIndex","index","classes","push","getItemProps","menuProps","items","length","content","stateReducer","changes","onChange","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","noop","undefined","inputProps","initialValue","initialHighlightedIndex","defaultHighlightedIndex","onSelect","listTestId","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","value","labelText","includes","Label","isFloatingLabelEnabled","isNumber","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","Fragment","substr","PureComponent","_scriptLoader","getScriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","supportedCountries","parentFieldName","fieldName","labelContent","getAddressFormFieldLabelId","country","FormField","LABEL","company","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","createRef","handleDynamicFormFieldChange","memoize","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","accessor","c","code","street2","steet1","stateName","states","subdivisions","mapToAddress","forIn","dateFormFieldNames","custom","fieldType","DynamicFormFieldType","date","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","CheckboxFormField","default","AddressForm","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID"],"sourceRoot":""}