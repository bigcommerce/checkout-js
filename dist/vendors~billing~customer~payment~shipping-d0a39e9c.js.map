{"version":3,"sources":["webpack://checkout/./node_modules/@babel/runtime/helpers/interopRequireWildcard.js","webpack://checkout/./node_modules/@babel/runtime/helpers/extends.js","webpack://checkout/./node_modules/@babel/runtime/helpers/inheritsLoose.js","webpack://checkout/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://checkout/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://checkout/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack://checkout/../../src/utils/debounce.js","webpack://checkout/../../src/utils/isBrowser.js","webpack://checkout/../../src/utils/isFunction.js","webpack://checkout/../../src/utils/getStyleComputedProperty.js","webpack://checkout/../../src/utils/getParentNode.js","webpack://checkout/../../src/utils/getScrollParent.js","webpack://checkout/../../src/utils/isIE.js","webpack://checkout/../../src/utils/getOffsetParent.js","webpack://checkout/../../src/utils/getRoot.js","webpack://checkout/../../src/utils/findCommonOffsetParent.js","webpack://checkout/../../src/utils/isOffsetContainer.js","webpack://checkout/../../src/utils/getScroll.js","webpack://checkout/../../src/utils/getBordersSize.js","webpack://checkout/../../src/utils/getWindowSizes.js","webpack://checkout/../../src/utils/getClientRect.js","webpack://checkout/../../src/utils/getBoundingClientRect.js","webpack://checkout/../../src/utils/getOffsetRectRelativeToArbitraryNode.js","webpack://checkout/../../src/utils/includeScroll.js","webpack://checkout/../../src/utils/getFixedPositionOffsetParent.js","webpack://checkout/../../src/utils/getBoundaries.js","webpack://checkout/../../src/utils/getViewportOffsetRectRelativeToArtbitraryNode.js","webpack://checkout/../../src/utils/isFixed.js","webpack://checkout/../../src/utils/computeAutoPlacement.js","webpack://checkout/../../src/utils/getReferenceOffsets.js","webpack://checkout/../../src/utils/getOuterSizes.js","webpack://checkout/../../src/utils/getOppositePlacement.js","webpack://checkout/../../src/utils/getPopperOffsets.js","webpack://checkout/../../src/utils/find.js","webpack://checkout/../../src/utils/runModifiers.js","webpack://checkout/../../src/utils/findIndex.js","webpack://checkout/../../src/methods/update.js","webpack://checkout/../../src/utils/isModifierEnabled.js","webpack://checkout/../../src/utils/getSupportedPropertyName.js","webpack://checkout/../../src/methods/destroy.js","webpack://checkout/../../src/utils/getWindow.js","webpack://checkout/../../src/utils/setupEventListeners.js","webpack://checkout/../../src/methods/enableEventListeners.js","webpack://checkout/../../src/methods/disableEventListeners.js","webpack://checkout/../../src/utils/removeEventListeners.js","webpack://checkout/../../src/utils/isNumeric.js","webpack://checkout/../../src/utils/setStyles.js","webpack://checkout/../../src/modifiers/computeStyle.js","webpack://checkout/../../src/utils/isModifierRequired.js","webpack://checkout/../../src/methods/placements.js","webpack://checkout/../../src/utils/clockwise.js","webpack://checkout/../../src/modifiers/flip.js","webpack://checkout/../../src/modifiers/offset.js","webpack://checkout/../../src/modifiers/index.js","webpack://checkout/../../src/methods/defaults.js","webpack://checkout/../../src/modifiers/shift.js","webpack://checkout/../../src/modifiers/preventOverflow.js","webpack://checkout/../../src/modifiers/keepTogether.js","webpack://checkout/../../src/modifiers/arrow.js","webpack://checkout/../../src/utils/getOppositeVariation.js","webpack://checkout/../../src/modifiers/inner.js","webpack://checkout/../../src/modifiers/hide.js","webpack://checkout/../../src/utils/getRoundedOffsets.js","webpack://checkout/../../src/modifiers/applyStyle.js","webpack://checkout/../../src/utils/setAttributes.js","webpack://checkout/../../src/index.js"],"names":["module","exports","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","desc","defineProperty","getOwnPropertyDescriptor","get","set","_extends","assign","target","i","arguments","length","source","apply","this","subClass","superClass","create","constructor","__proto__","self","ReferenceError","value","enumerable","configurable","writable","excluded","sourceKeys","keys","indexOf","window","document","longerTimeoutBrowsers","timeoutDuration","isBrowser","navigator","called","scheduled","functionToCheck","getType","element","css","property","getStyleComputedProperty","overflow","overflowX","overflowY","test","getScrollParent","getParentNode","isIE11","isIE10","version","noOffsetParent","isIE","offsetParent","nodeName","getOffsetParent","node","getRoot","element1","element2","order","Node","start","end","range","commonAncestorContainer","element1root","findCommonOffsetParent","upperSide","side","html","sideA","axis","sideB","parseFloat","styles","Math","body","parseInt","computedStyle","getComputedStyle","getSize","offsets","height","rect","scrollTop","getScroll","scrollLeft","result","top","sizes","getWindowSizes","width","horizScrollbar","vertScrollbar","getBordersSize","getClientRect","fixedPosition","runIsIE","isHTML","parent","childrenRect","getBoundingClientRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","subtract","modifier","includeScroll","el","boundaries","left","getFixedPositionOffsetParent","boundariesElement","excludeScroll","relativeOffset","getOffsetRectRelativeToArbitraryNode","getViewportOffsetRectRelativeToArtbitraryNode","boundariesNode","popper","parentNode","isFixed","isPaddingNumber","padding","placement","getBoundaries","rects","refRect","bottom","sortedAreas","getArea","b","a","filteredAreas","filter","computedPlacement","variation","x","y","hash","right","replace","matched","popperRect","getOuterSizes","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","referenceOffsets","getOppositePlacement","Array","arr","ends","modifiers","findIndex","cur","match","find","fn","isFunction","data","state","getReferenceOffsets","options","computeAutoPlacement","flip","getPopperOffsets","positionFixed","runModifiers","some","name","prefixes","upperProp","prefix","toCheck","isModifierEnabled","getSupportedPropertyName","ownerDocument","passive","scrollElement","isBody","setupEventListeners","removeEventListeners","n","isNaN","isFinite","prop","unit","isNumeric","isFirefox","requesting","isRequired","requested","validPlacements","placements","counter","index","BEHAVIORS","useHeight","basePlacement","fragments","offset","split","map","frag","divider","splitRegex","ops","mergeWithPrevious","op","str","size","toValue","index2","shiftvariation","reference","isVertical","shiftOffsets","parseOffset","transformProp","popperStyles","transform","check","floor","opSide","isModifierRequired","arrowElement","len","sideCapitalized","altSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","placementOpposite","flipOrder","clockwise","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariationByRef","flippedVariationByContent","flippedVariation","getOppositeVariation","subtractLength","bound","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","position","round","noRound","v","referenceWidth","popperWidth","isVariation","horizontalToInteger","shouldRound","verticalToInteger","bothOddWidth","getRoundedOffsets","prefixedProperty","invertTop","invertLeft","attributes","undefined","Popper","requestAnimationFrame","debounce","update","bind","modifierOptions","eventsEnabled","destroy","enableEventListeners","disableEventListeners","Utils","PopperUtils","Defaults"],"mappings":"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","file":"vendors~billing~customer~payment~shipping-d0a39e9c.js","sourcesContent":["function _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nmodule.exports = _interopRequireWildcard;","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","import isBrowser from './isBrowser';\n\nconst longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nlet timeoutDuration = 0;\nfor (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n","export default typeof window !== 'undefined' && typeof document !== 'undefined';\n","/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n","/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n","import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n","/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n","import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n","import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n","/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n","/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`], 10) +\n    parseFloat(styles[`border${sideB}Width`], 10)\n  );\n}\n","import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n","/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.right - result.left;\n  const height =\n    sizes.height || element.clientHeight || result.bottom - result.top;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop, 10);\n    const marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n","import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n","import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n","import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n","import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n","import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n","/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n","/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n","import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n","/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n","import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n","import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n","/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n","/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n","import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n","/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n","import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n","import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n","import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n","import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n","/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n","import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n","import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n","/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n","import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n","import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n","import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n","import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n","import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n","import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`], 10);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`], 10);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n","/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n","import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n","/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n","import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n","/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n","// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n"],"sourceRoot":""}