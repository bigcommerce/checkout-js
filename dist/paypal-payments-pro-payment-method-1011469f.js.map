{"version":3,"file":"paypal-payments-pro-payment-method-1011469f.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaypalPaymentsProPaymentMethod.tsx"],"sourcesContent":["import React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    withHostedCreditCardFieldset,\n    WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type HostedCreditCardPaymentMethodProps = Omit<\n    CreditCardPaymentMethodProps,\n    | 'cardFieldset'\n    | 'cardValidationSchema'\n    | 'storedCardValidationSchema'\n    | 'getStoredCardValidationFieldset'\n>;\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<\n    HostedCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    ...rest\n}) => {\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: getHostedFormOptions && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    return (\n        <CreditCardPaymentMethod\n            {...rest}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default withHostedCreditCardFieldset(HostedCreditCardPaymentMethod);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { AccountInstrument, AchInstrument, BankInstrument, PayPalInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument | AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable:\n                !isPaymentDataSubmitted(method.id, method.gateway) &&\n                isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n};\n\nexport default connectFormik(\n    withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))),\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { EMPTY_ARRAY } from '../../common/utility';\n\nimport HostedCreditCardPaymentMethod, {\n    HostedCreditCardPaymentMethodProps,\n} from './HostedCreditCardPaymentMethod';\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\n\nexport type PaypalPaymentsProPaymentMethodProps =\n    | HostedPaymentMethodProps\n    | HostedCreditCardPaymentMethodProps;\n\ninterface WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    isHostedPayment: boolean;\n}\n\n/**\n * Paypal Payments Pro is a snowflake payment method - it can be a hosted\n * payment method or a credit card payment method depending on where the\n * checkout process is initiated. If it is started from the cart page via the\n * PayPal button, it behaves as a hosted payment method. But if it is started\n * from the checkout page, it behaves as a credit card payment method.\n */\nconst PaypalPaymentsProPaymentMethod: FunctionComponent<\n    PaypalPaymentsProPaymentMethodProps & WithCheckoutPaypalPaymentsProPaymentMethodProps\n> = ({ isHostedPayment, ...props }) => {\n    if (isHostedPayment) {\n        return <HostedPaymentMethod {...props} />;\n    }\n\n    return <HostedCreditCardPaymentMethod {...props} />;\n};\n\nfunction mapToPaypalPaymentsProPaymentMethodProps(\n    { checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    const {\n        data: { getCheckout },\n    } = checkoutState;\n    const { payments = EMPTY_ARRAY } = getCheckout() || {};\n    const selectedHostedMethod = payments.find(\n        ({ providerType }) => providerType === PaymentMethodProviderType.Hosted,\n    );\n\n    return {\n        isHostedPayment: selectedHostedMethod\n            ? selectedHostedMethod.providerId === method.id &&\n              selectedHostedMethod.gatewayId === method.gateway\n            : false,\n    };\n}\n\nexport default withCheckout(mapToPaypalPaymentsProPaymentMethodProps)(\n    PaypalPaymentsProPaymentMethod,\n);\n"],"names":["getHostedFormOptions","getHostedStoredCardValidationFieldset","hostedFieldset","hostedStoredCardValidationSchema","hostedValidationSchema","initializePayment","rest","initializeHostedCreditCardPayment","useCallback","options","selectedInstrument","creditCard","form","cardFieldset","cardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","withIconContainer","height","viewBox","width","xmlns","clipRule","d","fill","fillRule","AccountInstrumentSelect","PureComponent","componentDidMount","selectedInstrumentId","this","props","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","componentWillUnmount","field","value","undefined","render","instruments","onSelectInstrument","onUseNewInstrument","find","bigpayToken","otherFieldProps","className","DropdownTrigger","dropdown","AccountInstrumentMenu","AccountInstrumentSelectButton","instrument","testId","type","instrumentId","setFieldValue","name","map","key","AccountInstrumentOption","onClick","AccountInstrumentUseNewButton","isBankAccountInstrument","BankInstrumentMenuItem","AccountInstrumentMenuItem","noop","handleClick","externalId","IconPaypal","additionalClassName","size","Medium","TranslatedString","data","accountNumber","id","issuer","memo","renderInput","renderModal","ManageInstrumentsModal","Fieldset","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","length","TranslatedHtml","HostedPaymentMethod","Component","state","isAddingNewInstrument","handleUseNewInstrument","setState","handleSelectInstrument","isInstrumentFeatureAvailable","isInstrumentFeatureAvailableProp","loadInstruments","method","onUnhandledError","gatewayId","gateway","methodId","error","deinitializePayment","description","isInitializing","isLoadingInstruments","isNewAddress","getDefaultInstrument","isLoading","shouldShowInstrumentFieldset","LoadingOverlay","hideContentWhenLoading","StoreInstrumentFieldset","isAccountInstrument","defaultInstrument","connectFormik","withLanguage","withPayment","withCheckout","filterAccountInstruments","filter","filterTrustedInstruments","trustedShippingAddress","context","checkoutService","checkoutState","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","cart","config","customer","currentMethodInstruments","trustedInstruments","paymentMethod","getCheckout","payments","selectedHostedMethod","providerType","Hosted","isHostedPayment","providerId"],"sourceRoot":""}