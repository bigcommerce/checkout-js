{"version":3,"file":"masterpass-payment-method-93723c00.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/payment/paymentMethod/SignOutLink.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/WalletButtonPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/MasterpassPaymentMethod.tsx","webpack://checkout/./packages/locale/src/masterpassFormatLocale.ts"],"sourcesContent":["import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport getPaymentMethodName from './getPaymentMethodName';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps & WithLanguageProps> = ({\n    language,\n    method,\n    onSignOut,\n}) => (\n    <div className=\"signout-link\">\n        <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n        <a href=\"#\" onClick={preventDefault(onSignOut)}>\n            <TranslatedString\n                data={{ providerName: getPaymentMethodName(language)(method) }}\n                id=\"remote.sign_out_action\"\n            />\n        </a>{' '}\n        <TranslatedString id=\"remote.sign_out_after_action\" />\n    </div>\n);\n\nexport default withLanguage(SignOutLink);\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport SignOutLink from './SignOutLink';\n\nexport interface WalletButtonPaymentMethodProps {\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutWalletButtonPaymentMethodProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nclass WalletButtonPaymentMethod extends Component<\n    WalletButtonPaymentMethodProps &\n        WithCheckoutWalletButtonPaymentMethodProps &\n        WithLanguageProps &\n        WithPaymentProps\n> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, disableSubmit, method, onUnhandledError = noop } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<\n            PaymentMethodProps &\n                WalletButtonPaymentMethodProps &\n                WithCheckoutWalletButtonPaymentMethodProps &\n                WithLanguageProps\n        >,\n    ): void {\n        const { method, isPaymentDataRequired } = this.props;\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false, isPaymentSelected } = this.props;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, language, signInButtonClassName, signInButtonLabel, method } = this.props;\n\n        return (\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const {\n            accountMask,\n            buttonId,\n            cardName,\n            cardType,\n            editButtonClassName,\n            editButtonLabel,\n            expiryMonth,\n            expiryYear,\n            shouldShowEditButton,\n            method,\n        } = this.props;\n\n        return (\n            <>\n                {cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {accountMask && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {expiryMonth && expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {shouldShowEditButton && (\n                    <p>\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const { disableSubmit, method, isPaymentDataRequired } = this.props;\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { method, signOut, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOut({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n}\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nfunction normalizeWalletPaymentData(data: any): WalletPaymentData | undefined {\n    if (!data) {\n        return;\n    }\n\n    if (data.card_information) {\n        return {\n            accountMask: formatAccountMask(data.card_information.number),\n            cardType: data.card_information.type,\n        };\n    }\n\n    if (data.cardData) {\n        return {\n            accountMask: formatAccountMask(data.cardData.accountMask),\n            cardType: data.cardData.cardType,\n            expiryMonth: data.cardData.expMonth,\n            expiryYear: data.cardData.expYear,\n        };\n    }\n\n    if (data.accountNum) {\n        const { card } = number(data.accountNum);\n\n        return {\n            accountMask: formatAccountMask(data.accountMask),\n            expiryMonth: data.expDate && `${data.expDate}`.substr(0, 2),\n            expiryYear: data.expDate && `${data.expDate}`.substr(2, 2),\n            cardType: card ? card.niceType : '',\n        };\n    }\n}\n\nfunction formatAccountMask(accountMask = '', padding = '****'): string {\n    return accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n}\n\nfunction mapFromCheckoutProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: WalletButtonPaymentMethodProps,\n): WithCheckoutWalletButtonPaymentMethodProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n    } = checkoutState;\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        return null;\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n    return {\n        ...walletPaymentData,\n        // FIXME: I'm not sure how this would work for non-English names.\n        cardName:\n            walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        signOut: checkoutService.signOutCustomer,\n    };\n}\n\nexport default withLanguage(\n    withPayment(withCheckout(mapFromCheckoutProps)(WalletButtonPaymentMethod)),\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { masterpassFormatLocale, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nimport WalletButtonPaymentMethod, {\n    WalletButtonPaymentMethodProps,\n} from './WalletButtonPaymentMethod';\n\nexport type MasterpassPaymentMethodProps = Omit<WalletButtonPaymentMethodProps, 'buttonId'>;\n\ninterface WithCheckoutMasterpassProps {\n    storeLanguage: string;\n}\n\nconst MasterpassPaymentMethod: FunctionComponent<\n    MasterpassPaymentMethodProps & WithLanguageProps & WithCheckoutMasterpassProps\n> = ({ initializePayment, language, storeLanguage, ...rest }) => {\n    const initializeMasterpassPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            initializePayment({\n                ...options,\n                masterpass: {\n                    walletButton: 'walletButton',\n                },\n            }),\n        [initializePayment],\n    );\n\n    const {\n        config: { testMode },\n        initializationData: { checkoutId, isMasterpassSrcEnabled },\n    } = rest.method;\n\n    const locale = masterpassFormatLocale(storeLanguage);\n\n    const signInButtonLabel = useMemo(\n        () => (\n            <img\n                alt={language.translate('payment.masterpass_name_text')}\n                id=\"mpbutton\"\n                src={\n                    isMasterpassSrcEnabled\n                        ? `https://${\n                              testMode ? 'sandbox.' : ''\n                          }src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg?locale=${locale}&paymentmethod=master,visa,amex,discover&checkoutid=${checkoutId}`\n                        : `https://masterpass.com/dyn/img/btn/global/mp_chk_btn_126x030px.svg`\n                }\n            />\n        ),\n        [checkoutId, language, locale, testMode, isMasterpassSrcEnabled],\n    );\n\n    return (\n        <WalletButtonPaymentMethod\n            {...rest}\n            buttonId=\"walletButton\"\n            initializePayment={initializeMasterpassPayment}\n            signInButtonLabel={signInButtonLabel}\n        />\n    );\n};\n\nfunction mapFromCheckoutProps({ checkoutState }: CheckoutContextProps) {\n    const {\n        data: { getConfig },\n    } = checkoutState;\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        storeLanguage: config.storeProfile.storeLanguage,\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(withLanguage(MasterpassPaymentMethod));\n","export default function masterpassFormatLocale(localeLanguage: string): string {\n    return localeLanguage.replace('-', '_').toLowerCase();\n}\n"],"names":["withLanguage","language","method","onSignOut","className","TranslatedString","id","href","onClick","preventDefault","data","providerName","getPaymentMethodName","WalletButtonPaymentMethod","Component","handleSignOut","signOut","noop","onSignOutError","this","props","methodId","window","location","reload","error","componentDidMount","initializePayment","onUnhandledError","toggleSubmit","gatewayId","gateway","componentWillUnmount","deinitializePayment","disableSubmit","componentDidUpdate","prevProps","isPaymentDataRequired","prevMethod","prevIsPaymentDataRequired","initializationData","render","isInitializing","isPaymentSelected","LoadingOverlay","hideContentWhenLoading","isLoading","renderPaymentView","renderSignInView","buttonId","signInButtonClassName","signInButtonLabel","accountMask","cardName","cardType","editButtonClassName","editButtonLabel","expiryMonth","expiryYear","shouldShowEditButton","normalizeWalletPaymentData","card_information","formatAccountMask","number","type","cardData","expMonth","expYear","accountNum","card","expDate","substr","niceType","padding","includes","withPayment","withCheckout","checkoutService","checkoutState","getBillingAddress","getCheckout","billingAddress","checkout","walletPaymentData","firstName","lastName","join","some","payments","providerId","signOutCustomer","getConfig","config","storeLanguage","storeProfile","rest","initializeMasterpassPayment","useCallback","options","masterpass","walletButton","testMode","checkoutId","isMasterpassSrcEnabled","locale","replace","toLowerCase","useMemo","alt","translate","src"],"sourceRoot":""}