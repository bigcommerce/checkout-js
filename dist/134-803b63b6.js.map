{"version":3,"file":"134-803b63b6.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorCA.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts"],"sourcesContent":["import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\n\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(googlePlace: google.maps.places.PlaceResult) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        if (this.getCountry() === 'NZ') {\n            return this._get('sublocality', 'short_name');\n        }\n\n        return this._get('subpremise', 'short_name');\n    }\n\n    getCity(): string {\n        return (\n            this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name')\n        );\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\n    ): string {\n        const element =\n            this._address && this._address.find((field) => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorCA extends AddressSelector {\n    getCity(): string {\n        return this._get('sublocality_level_1', 'long_name') || this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return '';\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n\n    getPostCode(): string {\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorCA from './AddressSelectorCA';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const countryComponent = autocompleteData.address_components?.find(\n            component => component.types.indexOf('country') >= 0);\n        const countryShortName = countryComponent?.short_name || '';\n\n        switch (countryShortName) {\n            case 'GB':\n                return new AddressSelectorUK(autocompleteData);\n\n            case 'CA':\n                return new AddressSelectorCA(autocompleteData);\n\n            default:\n                return new AddressSelector(autocompleteData);\n        }\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return <div className=\"popover\">{children}</div>;\n};\n\nexport default Popover;\n","import React, { FunctionComponent, memo } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n     \n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\n            {items.map((item, index) => (\n                <li\n                    className={getItemClassName(highlightedIndex, index)}\n                    data-test={testId && `${testId}-item`}\n                     \n                    {...getItemProps({\n                        key: item.id,\n                        index,\n                        item,\n                    })}\n                    key={index}\n                >\n                    {item.content}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { includes, isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Label } from '../form';\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem | null): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={0}\n                initialHighlightedIndex={initialHighlightedIndex}\n                initialInputValue={initialValue}\n                itemToString={this.itemToString}\n                labelId={\n                    inputProps && inputProps['aria-labelledby']\n                        ? inputProps['aria-labelledby']\n                        : null\n                }\n                onChange={onSelect}\n                onStateChange={this.handleStateChange}\n                stateReducer={this.stateReducer}\n            >\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\n                    const validInputProps = { ...getInputProps(), ...inputProps };\n\n                    delete validInputProps.labelText;\n\n                    return (\n                        <div>\n                            <input {...validInputProps} />\n                            {inputProps && includes(inputProps.className, 'floating') && (\n                                <Label\n                                    htmlFor={inputProps.id}\n                                    id={inputProps['aria-labelledby']}\n                                    isFloatingLabelEnabled={true}\n                                >\n                                    {inputProps.labelText}\n                                </Label>\n                            )}\n                            {isOpen && !!items.length && (\n                                <Popover>\n                                    <PopoverList\n                                        getItemProps={getItemProps}\n                                        highlightedIndex={\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\n                                        }\n                                        items={items.map((item) => this.toPopoverItem(item))}\n                                        menuProps={getMenuProps()}\n                                        testId={listTestId}\n                                    />\n                                    {children}\n                                </Popover>\n                            )}\n                        </div>\n                    );\n                }}\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\n                );\n                key += 1;\n            }\n\n            lastIndex = offset + length;\n\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem | null): string {\n        return (item && item.value) || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>,\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n            case Downshift.stateChangeTypes.blurInput:\n            case Downshift.stateChangeTypes.blurButton:\n            case Downshift.stateChangeTypes.mouseUp:\n            case Downshift.stateChangeTypes.touchEnd:\n                return {\n                    ...changes,\n                    inputValue: state.inputValue,\n                };\n\n            case Downshift.stateChangeTypes.changeInput:\n                if (changes.inputValue !== state.inputValue && onChange) {\n                    onChange(changes.inputValue || '', state.isOpen);\n                }\n\n                return changes;\n\n            case Downshift.stateChangeTypes.keyDownEnter:\n                return changes;\n\n            default:\n                return changes;\n        }\n    };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch((e) => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(\n        autocompleteWindow.google &&\n            autocompleteWindow.google.maps &&\n            autocompleteWindow.google.maps.places,\n    );\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\n\n        const { autoComplete, items } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={0}\n                initialValue={initialValue}\n                inputProps={{\n                    ...inputProps,\n                    autoComplete,\n                }}\n                items={items}\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={this.onChange}\n                onSelect={this.onSelect}\n                onToggleOpen={onToggleOpen}\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\n        const { fields, onSelect = noop, nextElement } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\n            service.getDetails(\n                {\n                    placeId: item.id,\n                    fields: fields || ['address_components', 'name'],\n                },\n                (result) => {\n                    if (nextElement) {\n                        nextElement.focus();\n                    }\n\n                    onSelect(result, item);\n                },\n            );\n        });\n    };\n\n    private onChange: (input: string) => void = (input) => {\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const { componentRestrictions, types } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\n            service.getPlacePredictions(\n                {\n                    input,\n                    types: types || ['geocode'],\n                    componentRestrictions,\n                },\n                (results) => this.setState({ items: this.toAutocompleteItems(results) }),\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(\n        results?: google.maps.places.AutocompletePrediction[],\n    ): AutocompleteItem[] {\n        return (results || []).map((result) => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLabelId,\n} from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    isFloatingLabelEnabled?: boolean;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\n    field: { default: placeholder, name },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n    isFloatingLabelEnabled,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(\n        () => ({\n            className: classNames(\n                'form-input optimizedCheckout-form-input',\n                { 'floating-input': isFloatingLabelEnabled },\n            ),\n            id: getAddressFormFieldInputId(name),\n            'aria-labelledby': labelId,\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\n            labelText: isFloatingLabelEnabled ? labelContent : null,\n        }),\n        [name, labelId, placeholder, labelContent],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <GoogleAutocomplete\n                apiKey={apiKey}\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\n                initialValue={field.value}\n                inputProps={inputProps}\n                isAutocompleteEnabled={\n                    countryCode ? supportedCountries.indexOf(countryCode) > -1 : false\n                }\n                nextElement={nextElement}\n                onChange={onChange}\n                onSelect={onSelect}\n                onToggleOpen={onToggleOpen}\n            />\n        ),\n        [\n            apiKey,\n            countryCode,\n            inputProps,\n            nextElement,\n            onChange,\n            onSelect,\n            onToggleOpen,\n            supportedCountries,\n        ],\n    );\n\n    const renderLabel = isFloatingLabelEnabled ? null : (\n        <Label htmlFor={inputProps.id} id={labelId} isFloatingLabelEnabled={isFloatingLabelEnabled}>\n            {labelContent}\n        </Label>\n    );\n\n    return (\n        <div className={classNames(\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\n                { 'floating-form-field': isFloatingLabelEnabled },\n            )}\n        >\n            <FormField\n                input={renderInput}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                label={renderLabel}\n                name={fieldName}\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLegacyName,\n} from './getAddressFormFieldInputId';\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\n        memoize((name) => (value) => {\n            this.syncNonFormikValue(name, value);\n        });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        return (\n            <>\n                <Fieldset>\n                    <div\n                        className=\"checkout-address\"\n                        ref={this.containerRef as RefObject<HTMLDivElement>}\n                    >\n                        {formFields.map((field) => {\n                            const addressFieldName = field.name;\n                            const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                            if (\n                                addressFieldName === 'address1' &&\n                                googleMapsApiKey &&\n                                countriesWithAutocomplete\n                            ) {\n                                return (\n                                    <GoogleAutocompleteFormField\n                                        apiKey={googleMapsApiKey}\n                                        countryCode={countryCode}\n                                        field={field}\n                                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                        key={field.id}\n                                        nextElement={this.nextElement || undefined}\n                                        onChange={this.handleAutocompleteChange}\n                                        onSelect={this.handleAutocompleteSelect}\n                                        onToggleOpen={onAutocompleteToggle}\n                                        parentFieldName={fieldName}\n                                        supportedCountries={countriesWithAutocomplete}\n                                    />\n                                );\n                            }\n\n                            return (\n                                <DynamicFormField\n                                    autocomplete={AUTOCOMPLETE[field.name]}\n                                    extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\n                                        addressFieldName,\n                                    )}`}\n                                    field={field}\n                                    inputId={getAddressFormFieldInputId(addressFieldName)}\n                                    // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                    key={`${field.id}-${field.name}`}\n                                    label={\n                                        field.custom ? (\n                                            field.label\n                                        ) : (\n                                            <TranslatedString id={LABEL[field.name]} />\n                                        )\n                                    }\n                                    onChange={this.handleDynamicFormFieldChange(addressFieldName)}\n                                    parentFieldName={\n                                        field.custom\n                                            ? fieldName\n                                                ? `${fieldName}.customFields`\n                                                : 'customFields'\n                                            : fieldName\n                                    }\n                                    placeholder={this.getPlaceholderValue(\n                                        field,\n                                        translatedPlaceholderId,\n                                    )}\n                                />\n                            );\n                        })}\n                    </div>\n                </Fieldset>\n                {shouldShowSaveAddress && (\n                    <CheckboxFormField\n                        labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\n                        name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\n                    />\n                )}\n            </>\n        );\n    }\n\n    private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\n        const { language } = this.props;\n\n        if (field.default && field.fieldType !== 'dropdown') {\n            return field.default;\n        }\n\n        return translatedPlaceholderId && language.translate(translatedPlaceholderId);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (\n        value,\n        isOpen,\n    ) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem,\n    ) => void = (place, { value: autocompleteValue }) => {\n        const { countries, setFieldValue = noop, onChange = noop } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\n        fieldName,\n        value,\n    ) => {\n        const { formFields, setFieldValue = noop, onChange = noop } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map((field) => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = [],\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find((c) => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...(state ? getState(state, country && country.subdivisions) : {}),\n    };\n}\n\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import React, { FunctionComponent, useState } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { preventDefault } from '../common/dom';\n\nimport { AddressSelectProps } from './AddressSelect';\nimport StaticAddress from './StaticAddress';\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\n    selectedAddress,\n    language,\n}) => {\n    const [ariaExpanded, setAriaExpanded] = useState(false);\n\n    return (\n        <a\n            aria-controls=\"addressDropdown\"\n            aria-description={language.translate('address.enter_or_select_address_action')}\n            aria-expanded={ariaExpanded}\n            className=\"button dropdown-button dropdown-toggle--select\"\n            href=\"#\"\n            id=\"addressToggle\"\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\n            onBlur={() => setAriaExpanded(false)}\n        >\n            {selectedAddress ? (\n                <StaticAddress address={selectedAddress} />\n            ) : (\n                <TranslatedString id=\"address.enter_address_action\" />\n            )}\n        </a>\n    );\n};\n\nexport default withLanguage(AddressSelectButton);\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { preventDefault } from '../common/dom';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport AddressSelectButton from './AddressSelectButton';\nimport isEqualAddress from './isEqualAddress';\nimport { PoweredByPaypalConnectLabel, usePayPalConnectAddress } from './PayPalAxo';\nimport StaticAddress from './StaticAddress';\n\nimport './AddressSelect.scss';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a\n                data-test=\"add-new-address\"\n                href=\"#\"\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\n            >\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        {addresses.map((address) => (\n            <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={address.id}>\n                <a href=\"#\" onClick={preventDefault(() => onSelectAddress(address))}>\n                    <StaticAddress address={address} />\n                </a>\n            </li>\n        ))}\n    </ul>\n);\n\nconst AddressSelect = ({\n    addresses,\n    selectedAddress,\n    onSelectAddress,\n    onUseNewAddress,\n}: AddressSelectProps) => {\n    const { shouldShowPayPalConnectLabel } = usePayPalConnectAddress();\n\n    const handleSelectAddress = (newAddress: Address) => {\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        onUseNewAddress(selectedAddress);\n    };\n\n    return (\n        <div className=\"form-field\">\n            <div className=\"dropdown--select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AddressSelectMenu\n                            addresses={addresses}\n                            onSelectAddress={handleSelectAddress}\n                            onUseNewAddress={handleUseNewAddress}\n                            selectedAddress={selectedAddress}\n                        />\n                    }\n                >\n                    <AddressSelectButton\n                        addresses={addresses}\n                        selectedAddress={selectedAddress}\n                    />\n                </DropdownTrigger>\n            </div>\n\n            {shouldShowPayPalConnectLabel && <PoweredByPaypalConnectLabel />}\n        </div>\n    );\n}\n\nexport default memo(AddressSelect);\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[],\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\n}\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(\n        (name) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" maxLength={2000} />,\n        [],\n    );\n\n    const legend = useMemo(\n        () => (\n            <Legend>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Legend>\n        ),\n        [],\n    );\n\n    return (\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\n            <FormField input={renderInput} label={renderLabel} name=\"orderComment\" />\n        </Fieldset>\n    );\n};\n\nexport default OrderComments;\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(\n        (payment) =>\n            !isGiftCertificatePayment(payment) &&\n            !isStoreCreditPayment(payment) &&\n            !!payment.providerId,\n    );\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={{\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    }}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n"],"names":["ADDRESS_FIELD_IDS","address1","address2","postalCode","stateOrProvince","stateOrProvinceCode","getAddressFormFieldLegacyName","name","getAddressFormFieldInputId","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","type","access","element","find","field","types","indexOf","create","autocompleteData","countryComponent","component","short_name","children","className","getItemClassName","highlightedIndex","index","classes","push","join","memo","testId","getItemProps","props","menuProps","items","length","map","item","key","id","content","stateReducer","state","changes","onChange","inputValue","isOpen","handleStateChange","onToggleOpen","noop","undefined","render","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","labelText","includes","Label","htmlFor","isFloatingLabelEnabled","isNumber","toPopoverItem","highlightItem","highlightedSlices","label","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","Fragment","substr","value","PureComponent","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","document","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","setState","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","useMemo","TranslatedString","getAddressFormFieldLabelId","renderInput","useCallback","country","renderLabel","FormField","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","createRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","address","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","forIn","formFields","dateFormFieldNames","filter","custom","fieldType","DynamicFormFieldType","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","ref","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","CheckboxFormField","language","default","translate","Component","withLanguage","AddressForm","selectedAddress","useState","ariaExpanded","setAriaExpanded","href","onClick","preventDefault","onBlur","StaticAddress","AddressSelectMenu","addresses","onSelectAddress","onUseNewAddress","shouldShowPayPalConnectLabel","usePayPalConnectAddress","DropdownTrigger","dropdown","newAddress","isEqualAddress","PoweredByPaypalConnectLabel","isValidCustomerAddress","some","customerAddress","mapAddressFromFormValues","formValues","customFields","shouldSaveAddress","hidden","maxLength","legend","getPreselectedPayment","checkout","payments","payment","providerId","getShippableItemsCount","cart","lineItems","physicalItems","addedByPromotion","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","getRootElement","addEventListener","removeEventListener","componentWillUnmount","placement","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","getElementById","defaultProps","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID"],"sourceRoot":""}