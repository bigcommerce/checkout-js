{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./src/app/locale/withDate.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/ui/form/DynamicInput.tsx","webpack://checkout/./src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/payment/getPreselectedPayment.ts","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./src/app/shipping/getShippingMethodId.ts","webpack://checkout/./src/app/address/AddressFormModal.tsx","webpack://checkout/./src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./src/app/shipping/findConsignment.ts","webpack://checkout/./src/app/shipping/getShippableLineItems.ts","webpack://checkout/./src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./src/app/shipping/updateShippableItems.ts","webpack://checkout/./src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./src/app/shipping/ShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingHeader.tsx","webpack://checkout/./src/app/shipping/Shipping.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","TextArea","testId","isEqualAddress","address1","address2","normalizeAddress","stateOrProvince","stateOrProvinceCode","isSameState","address","customFields","filter","AccordionContext","onToggle","disabled","labelContent","onChange","name","renderField","field","checked","value","render","getShippableItemsCount","cart","lineItems","physicalItems","item","addedByPromotion","state","getContextValue","selectedItemId","handleToggleItem","props","isDisabled","onSelect","setState","this","children","defaultSelectedItemId","Provider","ChecklistContext","undefined","connectFormik","setFieldValue","handleSelect","contextValue","mapCustomFormFieldsFromFormValues","customFieldsObject","key","fieldValue","padMonth","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","document","addEventListener","removeEventListener","componentWillUnmount","placement","dropdown","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","parseAnchor","text","div","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","ADDRESS_FIELD_IDS","postalCode","getAddressFormFieldLegacyName","getAddressFormFieldInputId","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","find","types","indexOf","create","autocompleteData","addressSelector","getItemClassName","highlightedIndex","index","classes","join","instance","getItemProps","menuProps","items","length","map","content","stateReducer","changes","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","inputProps","initialValue","initialHighlightedIndex","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","substr","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","countryCode","supportedCountries","parentFieldName","fieldName","TranslatedString","getAddressFormFieldLabelId","renderInput","country","FormField","Label","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","formFields","dateFormFieldNames","custom","fieldType","DynamicFormFieldType","date","componentDidMount","current","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","default","translate","CheckboxFormField","withLanguage","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","Input","options","inputFormat","handleDateChange","dateValue","target","optionValue","radio","checkbox","Array","isArray","includes","calendarClassName","dateFormat","maxDate","max","Date","minDate","min","placeholderText","toUpperCase","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","href","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","FormFieldContainer","hasError","FormFieldError","renderProps","secret","fieldLabel","required","maxLength","fieldInputId","labelComponent","dynamicFormFieldType","number","helperLabel","rows","mapAddressFromFormValues","formValues","shouldSaveAddress","isValidCustomerAddress","addresses","customerAddress","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","handleUseNewAddress","onUseNewAddress","role","AddressSelectMenu","AddressSelectButton","AddressSelect","renderLabel","hidden","legend","getPreselectedPayment","checkout","payments","payment","providerId","data","translatedString","parsedString","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","isSelected","transitionEndListener","done","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","htmlId","Checklist","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","preselectedPayment","SaveAddressForm","handleSubmit","onSaveAddress","mapPropsToValues","defaultCountryCode","validationSchema","getFields","getAddressFormFieldsValidationSchema","isLoading","onRequestClose","Form","LoadingOverlay","AddressForm","Button","variant","Primary","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","consignment","lineItemIds","getShippableLineItems","parentId","concat","lineItemIndex","splitItems","quantity","variantId","productId","splitItem","imageUrl","alt","src","optionName","nameId","shippingAddress","ShippingOptionListItem","consignmentId","shippingOption","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","selectDefaultShippingOptions","selectShippingOption","getConsignments","selectedShippingOption","availableShippingOptions","recommendedOption","getRecommendedShippingOption","singleShippingOption","defaultShippingOption","subscribeToConsignments","unsubscribe","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","StaticAddress","StaticConsignmentItemList","shippingOptionIds","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","sortConsignments","unsortedConsignments","shippableItems","consignmentsOrder","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Legend","Alert","ShippingOptions","OrderComments","handleCloseErrorModal","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","newId","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","tabIndex","formFieldName","handleAutocompleteToggle","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","unmountContentWhenLoading","buttonId","customFormFields","shouldShowCustomFormFields","padding","size","Tiny","Secondary","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","initializeShipping","defaultOptions","amazon","container","onError","amazonpay","editAddressButtonId","SHIPPING_ADDRESS_FIELDS","SHIPPING_AUTOSAVE_DELAY","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","includeShippingOptions","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","getCustomFormFieldsValidationSchema","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","onMultiShippingChange","shouldShowMultiShipping","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress"],"mappings":"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","file":"shipping-ed1277e5.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    ) && isSameState(address1, address2);\n}\n\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\n        return true;\n    }\n\n    if (address1.stateOrProvinceCode && address1.stateOrProvinceCode === address2.stateOrProvinceCode) {\n        return true;\n    }\n\n    return address1.stateOrProvince === address2.stateOrProvince &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode;\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = [\n        'id',\n        'shouldSaveAddress',\n        'stateOrProvince',\n        'stateOrProvinceCode',\n        'type',\n        'email',\n        'country',\n    ];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                disabled={ disabled }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        disabled,\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(\n    customFieldsObject: { [id: string]: any }\n): Array<{fieldId: string; fieldValue: string}> {\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"popoverList\"\n            data-test={ testId } { ...menuProps }\n        >\n            { items\n                .map((item, index) => (\n                    <li\n                        className={ getItemClassName(highlightedIndex, index) }\n                        data-test={ testId && `${testId}-item` }\n                        { ...getItemProps({\n                            key: item.id,\n                            index,\n                            item,\n                        }) }\n                        key={ index }\n                    >\n                        { item.content }\n                    </li>\n                )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                initialInputValue={ initialValue }\n                itemToString={ this.itemToString }\n                labelId={ inputProps && inputProps['aria-labelledby'] ? inputProps['aria-labelledby'] : null }\n                onChange={ onSelect }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    getItemProps={ getItemProps }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    menuProps={ getMenuProps() }\n                                    testId={ listTestId }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n\n        const {\n            autoComplete,\n            items,\n        } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={ 0 }\n                initialValue={ initialValue }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete,\n                } }\n                items={ items }\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={ this.onChange }\n                onSelect={ this.onSelect }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            fields,\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const {\n            componentRestrictions,\n            types,\n        } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: types || ['geocode'],\n                componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport { getAddressFormFieldInputId, getAddressFormFieldLabelId } from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        default: placeholder,\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getAddressFormFieldInputId(name),\n        'aria-labelledby': labelId,\n        placeholder,\n    }), [name, labelId, placeholder]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n            initialValue={ field.value }\n            inputProps={ inputProps }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            nextElement={ nextElement }\n            onChange={ onChange }\n            onSelect={ onSelect }\n            onToggleOpen={ onToggleOpen }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                input={ renderInput }\n                label={ <Label htmlFor={ inputProps.id } id={ labelId }>{ labelContent }</Label> }\n                name={ fieldName }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport { getAddressFormFieldInputId, getAddressFormFieldLegacyName } from './getAddressFormFieldInputId';\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n        } = this.props;\n\n        return (<>\n            <Fieldset>\n                <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                    { formFields.map(field => {\n                        const addressFieldName = field.name;\n                        const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                        if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                            return (\n                                <GoogleAutocompleteFormField\n                                    apiKey={ googleMapsApiKey }\n                                    countryCode={ countryCode }\n                                    field={ field }\n                                    key={ field.id }\n                                    nextElement={ this.nextElement || undefined }\n                                    onChange={ this.handleAutocompleteChange }\n                                    onSelect={ this.handleAutocompleteSelect }\n                                    onToggleOpen={ onAutocompleteToggle }\n                                    parentFieldName={ fieldName }\n                                    supportedCountries={ countriesWithAutocomplete }\n                                />\n                            );\n                        }\n\n                        return (\n                            <DynamicFormField\n                                autocomplete={ AUTOCOMPLETE[field.name] }\n                                extraClass={ `dynamic-form-field--${getAddressFormFieldLegacyName(addressFieldName)}` }\n                                field={ field }\n                                inputId={ getAddressFormFieldInputId(addressFieldName) }\n                                // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                key={ `${field.id}-${field.name}` }\n                                label={ field.custom ? field.label : <TranslatedString id={ LABEL[field.name] } /> }\n                                onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                                parentFieldName={ field.custom ?\n                                    (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                    fieldName }\n                                placeholder={ field.default ? field.default : translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                            />\n                        );\n                    }) }\n                </div>\n            </Fieldset>\n            { shouldShowSaveAddress &&\n                <CheckboxFormField\n                    labelContent={ <TranslatedString id=\"address.save_in_addressbook\" /> }\n                    name={ fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress' }\n                /> }\n        </>);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback((dateValue, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: dateValue,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={ inputFormat }\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText={ inputFormat.toUpperCase() }\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                placeholder={ placeholder }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        remove,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        { options.length > 1 && <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        /> }\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { label || fieldLabel }\n            { !required &&\n                <>\n                    { ' ' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        fieldInputId,\n        fieldLabel,\n        required,\n        label,\n    ]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ autocomplete }\n            fieldType={ dynamicFormFieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        fieldInputId,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n        dynamicFormFieldType,\n        autocomplete,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field ${extraClass}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport './AddressSelect.scss';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={ addresses }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ this.handleUseNewAddress }\n                                selectedAddress={ selectedAddress }\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a\n                data-test=\"add-new-address\"\n                href=\"#\"\n                onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }\n            >\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" /> }\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            autoComplete={ 'off' }\n            maxLength={ 2000 }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset legend={ legend } testId=\"checkout-shipping-comments\">\n        <FormField\n            input={ renderInput }\n            label={ renderLabel }\n            name=\"orderComment\"\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(payment =>\n        !isGiftCertificatePayment(payment)\n        && !isStoreCreditPayment(payment)\n        && !!payment.providerId\n    );\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            disabled={ isDisabled }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        isDisabled,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\nimport AddressForm from './AddressForm';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={ isLoading }>\n            <AddressForm\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                countryCode={ values.countryCode }\n                formFields={ getFields(values.countryCode) }\n                googleMapsApiKey={ googleMapsApiKey }\n                setFieldValue={ setFieldValue }\n                shouldShowSaveAddress={ false }\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={ preventDefault(onRequestClose) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={ isLoading }\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n    handleSubmit: (values, { props: { onSaveAddress } }) => {\n        onSaveAddress(values);\n    },\n    mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n        firstName: '',\n        lastName: '',\n        address1: '',\n        address2: '',\n        customFields: {},\n        country: '',\n        countryCode: defaultCountryCode,\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        postalCode: '',\n        phone: '',\n        city: '',\n        company: '',\n        shouldSaveAddress: false,\n    }),\n    validationSchema: ({\n        language,\n        getFields,\n    }: AddressFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n})(SaveAddress));\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={ isOpen }\n        onAfterOpen={ onAfterOpen }\n        onRequestClose={ onRequestClose }\n        shouldShowCloseButton={ true }\n    >\n        <SaveAddressForm\n            { ...addressFormProps }\n            onRequestClose={ onRequestClose }\n        />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion && isNil(item.parentId) ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string, key);\n    }, [\n        id,\n        onUseNewAddress,\n        key,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h5 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h5>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => (\n                    <ShippingOptionListItem\n                        consignmentId={ consignmentId }\n                        key={ shippingOption.id }\n                        shippingOption={ shippingOption }\n                    />\n                )) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={ isLoading() }>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={ methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text' }\n                        />\n                    ) }\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            { consignments\n                .map(consignment => (\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\n\n                        <ShippingOptionsList\n                            consignmentId={ consignment.id }\n                            inputName={ getRadioInputName(consignment.id) }\n                            isLoading={ isLoading(consignment.id) }\n                            onSelectedOption={ selectShippingOption }\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\n                            shippingOptions={ consignment.availableShippingOptions }\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\n                            </LoadingOverlay> }\n                    </div>\n                )) }\n        </>;\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(({\n            selectedShippingOption,\n            availableShippingOptions: shippingOptions,\n        }) => !selectedShippingOption && shippingOptions);\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    { message }\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={ consignment.shippingAddress } />\n\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, consignment => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() ||  []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n        } = this.props;\n\n        return <>\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                />\n            </Fieldset>\n\n            { shouldShowOrderComments &&\n                <OrderComments /> }\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ shouldDisableSubmit }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, AddressRequestBody, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { Fragment, PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress, mapAddressFromFormValues, AddressFormModal, AddressFormValues } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { withLanguage, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={ onCreateAccount }\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Fragment>\n                <ErrorModal\n                    error={ createCustomerAddressError }\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />\n                            { ' ' }\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={ this.handleCloseErrorModal }\n                    shouldShowErrorCode={ false }\n                />\n                { <AddressFormModal\n                    countries={ countries }\n                    countriesWithAutocomplete={ countriesWithAutocomplete }\n                    defaultCountryCode={ defaultCountryCode }\n                    getFields={ getFields }\n                    googleMapsApiKey={ googleMapsApiKey }\n                    isLoading={ isLoading }\n                    isOpen={ !!itemAddingAddress }\n                    onRequestClose={ this.handleCloseAddAddressForm }\n                    onSaveAddress={ this.handleSaveAddress }\n                /> }\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        { items.map(item => (\n                            <li key={ item.key }>\n                                <ItemAddressSelect\n                                    addresses={ addresses }\n                                    item={ item }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                />\n                            </li>\n                        )) }\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={ cartHasChanged }\n                        isLoading={ isLoading }\n                        isMultiShippingMode={ true }\n                        shouldDisableSubmit={ this.shouldDisableSubmit() }\n                        shouldShowOrderComments={ shouldShowOrderComments }\n                        shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                    />\n                </Form>\n            </Fragment>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async address => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(shippingAddress, itemAddingAddress.itemId, itemAddingAddress.key);\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (e) {\n            this.setState({ createCustomerAddressError: e });\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (address, itemId, itemKey) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if (newId && !cartItemIds.includes(item.id) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        } else {\n            return item;\n        }\n    });\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps>  = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"billing.use_shipping_address_label\" />\n    ), []);\n\n    return <CheckboxFormField\n        id=\"sameAsBilling\"\n        labelContent={ labelContent }\n        name=\"billingSameAsShipping\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(BillingSameAsShippingField);\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            formFields,\n            methodId,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n                <Fieldset>\n                {\n                    formFields.filter(({ custom }) => custom).map(field => (\n                        <DynamicFormField\n                            field={ field }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleFieldValueChange(field.name) }\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))\n                }\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={ isLoading }>\n                            <AddressSelect\n                                addresses={ addresses }\n                                onSelectAddress={ onAddressSelect }\n                                onUseNewAddress={ onUseNewAddress }\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset> }\n\n                { !hasValidCustomerAddress &&\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\n                        <AddressForm\n                            countries={ countries }\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\n                            countryCode={ formAddress && formAddress.countryCode }\n                            fieldName={ addressFieldName }\n                            formFields={ formFields }\n                            googleMapsApiKey={ googleMapsApiKey }\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\n                            onChange={ this.handleChange }\n                            setFieldValue={ this.setFieldValue }\n                            shouldShowSaveAddress={ shouldShowSaveAddress }\n                        />\n                    </LoadingOverlay> }\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            address,\n            buttonId,\n            formFields,\n            isLoading,\n        } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={ isLoading }>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress\n                            address={ address }\n                        />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={ buttonId }\n                            onClick={ preventDefault() }\n                            size={ ButtonSize.Tiny }\n                            testId=\"step-edit-button\"\n                            variant={ ButtonVariant.Secondary }\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\n                    {\n                        customFormFields.map(field => (\n                            <DynamicFormField\n                                field={ field }\n                                key={ `${field.id}-${field.name}` }\n                                onChange={ this.handleFieldValueChange(field.name) }\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))\n                    }\n                </Fieldset> }\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default StaticAddressEditable;\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={ containerId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={ shippingAddress }\n                    buttonId={ editAddressButtonId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    isLoading={ isShippingStepPending }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ handleFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n            shouldShowSaveAddress={ shouldShowSaveAddress }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n            hasRequestedShippingOptions,\n        } = this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(method => method === methodId);\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={ addresses }\n                        consignments={ consignments }\n                        countries={ countries }\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\n                        deinitialize={ deinitialize }\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\n                        googleMapsApiKey={ googleMapsApiKey }\n                        hasRequestedShippingOptions={ hasRequestedShippingOptions }\n                        initialize={ initialize }\n                        isLoading={ isResettingAddress }\n                        isShippingStepPending={ isShippingStepPending }\n                        methodId={ methodId }\n                        onAddressSelect={ this.handleAddressSelect }\n                        onFieldChange={ this.handleFieldChange }\n                        onUnhandledError={ onUnhandledError }\n                        onUseNewAddress={ this.onUseNewAddress }\n                        shippingAddress={ shippingAddress }\n                        shouldShowSaveAddress={ shouldShowSaveAddress }\n                    />\n                    {\n                        shouldShowBillingSameAsShipping && <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    }\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress, isBillingSameAsShipping, customerMessage }) => ({\n        billingSameAsShipping: isBillingSameAsShipping,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getCustomFormFieldsValidationSchema({\n                    translate: getTranslateAddressError(language),\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }) :\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, AddressRequestBody, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                createCustomerAddress={ createCustomerAddress }\n                customerMessage={ customerMessage }\n                defaultCountryCode={ shippingAddress?.countryCode }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onCreateAccount={ onCreateAccount }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowAddAddressInCheckout={ shouldShowAddAddressInCheckout }\n                shouldShowOrderComments={ shouldShowOrderComments }\n            /> :\n            <SingleShippingForm\n                addresses={ addresses }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isBillingSameAsShipping={ isBillingSameAsShipping }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, AddressRequestBody, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={ isGuest }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\n                />\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        { ...shippingFormProps }\n                        addresses={ customer.addresses }\n                        deinitialize={ deinitializeShippingMethod }\n                        initialize={ initializeShippingMethod }\n                        isBillingSameAsShipping = { isBillingSameAsShipping }\n                        isGuest={ isGuest }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\n                        onUseNewAddress={ this.handleUseNewAddress }\n                        shouldShowSaveAddress={ !isGuest }\n                        updateAddress={ updateShippingAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress = !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout: features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"sourceRoot":""}