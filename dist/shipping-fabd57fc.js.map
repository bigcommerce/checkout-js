{"version":3,"file":"shipping-fabd57fc.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/checkout-extension/src/ExtensionRegionContainer.ts","webpack://checkout/./packages/checkout-extension/src/useExtensions.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx"],"sourcesContent":["import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [PaymentMethodId.AmazonPay, PaymentMethodId.BraintreeAcceleratedCheckout];\n    const providerWithCustomCheckout = config.checkoutSettings?.providerWithCustomCheckout;\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        (address: Address) => {\n            onUseNewAddress(address, id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","export enum ExtensionRegionContainer {\n    ShippingShippingAddressFormBefore = 'extension-region-shipping-shippingaddressform-before',\n    ShippingShippingAddressFormAfter = 'extension-region-shipping-shippingaddressform-after',\n}\n","import { useContext } from 'react';\n\nimport { ExtensionContext } from './ExtensionContext';\n\nexport const useExtensions = () => {\n    const extensionContext = useContext(ExtensionContext);\n\n    if (!extensionContext) {\n        throw new Error('useExtensions must be used within an <ExtensionProvider>');\n    }\n\n    return extensionContext;\n};\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n            </div>\n        ),\n        [shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        key={shippingOption.id}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate(): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm));\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    consignments?: any;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isLoading,\n    consignments,\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.ShippingShippingAddressFormAfter),\n    );\n\n    useEffect(() => {\n        if (isExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.ShippingShippingAddressFormAfter,\n                ExtensionRegion.ShippingShippingAddressFormAfter,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.ShippingShippingAddressFormAfter);\n            };\n        }\n    }, [extensionService, isExtensionRegionEnabled]);\n\n    const hasFreeShipping = consignments?.find((v: any) => v.selectedShippingOption?.cost === 0);\n\n    return (\n        <>\n            {isExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.ShippingShippingAddressFormAfter} />\n            )}\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {hasFreeShipping &&\n                (<div className=\"free-shipping-wrapper\">\n                    <h6 className=\"free-shipping-label\">Congratulations, your shipping is free!</h6>\n                    <h5 className=\"free-shipping-heading\">You’re just a step away from better health.</h5>\n                    <div className=\"free-shipping-order\">\n                            <ul>\n                                <li>\n                                    <div className=\"shipping-icon\">\n                                    <svg width=\"59\" height=\"59\" viewBox=\"0 0 59 59\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M32.6344 51.3104H32.4224C31.2491 51.2028 30.1304 50.7649 29.1958 50.0474C27.2783 48.7567 25.324 47.3463 23.3883 45.8436C20.9177 46.1939 18.7236 45.3274 17.857 43.6311C17.5363 42.9637 17.4178 42.217 17.5159 41.4831C17.5411 41.2567 17.649 41.0474 17.8194 40.8958C17.9895 40.7443 18.2098 40.6613 18.4378 40.6627H21.2034C23.0821 40.6982 24.923 40.133 26.4584 39.0494C26.2463 39.0494 26.0159 39.1416 25.7577 39.1785C24.9004 39.3894 23.997 39.3058 23.1926 38.9413C22.3885 38.5768 21.7301 37.9526 21.3235 37.1688C21.0218 36.6894 20.9572 36.0979 21.1483 35.5647C21.2983 35.2645 21.535 35.0164 21.8274 34.852C22.1199 34.6876 22.4549 34.6148 22.7892 34.6429C23.3821 34.5969 23.9688 34.4919 24.5408 34.3294C25.2015 34.1278 25.8508 33.8908 26.4859 33.6195C27.0759 33.3799 27.6936 33.1217 28.3758 32.9189C28.8942 32.7739 29.425 32.6783 29.9614 32.6331C31.1618 32.5473 32.3683 32.6468 33.5383 32.9281C34.0545 33.0295 34.4602 33.131 34.7828 33.2139C35.1054 33.2969 35.2437 33.343 35.3912 33.3891H35.548L35.8614 33.4813C36.6404 33.716 37.404 33.9992 38.1476 34.3294C39.3595 34.9004 40.5193 35.5759 41.6139 36.3483C42.389 36.8351 43.1924 37.2753 44.02 37.6665C46.4336 38.7904 49.0335 39.4592 51.69 39.6393C51.9854 39.6599 52.2529 39.821 52.4091 40.0726C52.5644 40.3256 52.5885 40.6378 52.4736 40.9115C51.7511 42.6598 50.7723 44.2909 49.5697 45.7514C48.6087 46.9324 47.5064 47.9912 46.2878 48.9042C46.0535 49.0813 45.7487 49.136 45.4674 49.0517L40.3786 47.5306C39.2257 48.3509 38.0251 49.102 36.7833 49.7799C34.5984 51.0153 33.5014 51.3103 32.6349 51.3103L32.6344 51.3104ZM23.6369 43.9354C23.8438 43.934 24.0451 44.0022 24.2085 44.129C26.209 45.6961 28.2371 47.1711 30.2285 48.5078C30.8901 49.0275 31.6866 49.3473 32.524 49.4297C32.8466 49.4297 33.5011 49.485 35.898 48.1667C37.1975 47.4517 38.4478 46.651 39.6408 45.7698C39.8746 45.5989 40.1749 45.5476 40.4521 45.6316L45.5222 47.1527C46.4784 46.3914 47.3528 45.5325 48.131 44.5899C48.9467 43.5923 49.6485 42.507 50.2237 41.3541C46.7856 40.9431 43.4839 39.7649 40.5624 37.9063C39.5515 37.2055 38.4847 36.5888 37.3727 36.0626C36.7238 35.7787 36.0588 35.5325 35.3815 35.3251L34.9943 35.2144L34.8284 35.1591L34.266 35.0301C33.9802 34.9563 33.593 34.8549 33.1229 34.7627C32.1221 34.519 31.0897 34.432 30.0622 34.5046C29.656 34.5297 29.2539 34.6008 28.8638 34.7166C28.277 34.8941 27.7013 35.1065 27.1399 35.3527C26.4408 35.6477 25.727 35.9063 25.0012 36.1271C24.3533 36.3113 23.6898 36.4348 23.0192 36.4959C23.3687 36.9528 23.8625 37.2777 24.4204 37.4177C24.7602 37.4481 25.1026 37.4231 25.4345 37.344C26.0957 37.2474 26.7408 37.0613 27.352 36.7909C27.98 36.5139 28.6443 36.3278 29.3248 36.2377C29.9641 36.1625 30.6093 36.1469 31.2515 36.1916L31.7309 36.2377C32.0603 36.2756 32.3444 36.4863 32.4763 36.7905C32.6082 37.0947 32.5677 37.4462 32.3703 37.7123C32.1728 37.9787 31.8483 38.1193 31.5189 38.0815H31.1225C30.7297 38.0538 30.3352 38.0538 29.9425 38.0815C28.9841 39.4366 27.7209 40.5481 26.255 41.3265C24.6705 42.1688 22.8955 42.5879 21.1018 42.5433H19.3595C19.384 42.6501 19.4246 42.7527 19.4793 42.8476C20.0048 43.8801 21.6826 44.3687 23.4526 44.0276L23.6369 43.9354Z\" fill=\"#D40449\"/>\n                                    <path d=\"M22.5031 42.4063H11.9844C11.7399 42.4063 11.5054 42.3091 11.3325 42.1362C11.1597 41.9634 11.0625 41.7289 11.0625 41.4844V11.0625C11.0625 10.818 11.1597 10.5835 11.3325 10.4107C11.5054 10.2378 11.7399 10.1406 11.9844 10.1406H44.25C44.4945 10.1406 44.729 10.2378 44.9019 10.4107C45.0747 10.5835 45.1719 10.818 45.1719 11.0625V13.8281C45.1719 14.1575 44.9962 14.4617 44.711 14.6265C44.4258 14.7911 44.0743 14.7911 43.7891 14.6265C43.5039 14.4617 43.3281 14.1575 43.3281 13.8281V11.9844H12.9063V40.5625H22.5031C22.8325 40.5625 23.1367 40.7382 23.3015 41.0235C23.4661 41.3087 23.4661 41.6601 23.3015 41.9453C23.1367 42.2305 22.8325 42.4063 22.5031 42.4063Z\" fill=\"#D40449\"/>\n                                    <path d=\"M44.25 39.7513C44.0055 39.7513 43.771 39.6541 43.5982 39.4812C43.4253 39.3084 43.3281 39.0739 43.3281 38.8294V35.9531C43.3281 35.6238 43.5039 35.3195 43.7891 35.1548C44.0743 34.9902 44.4257 34.9902 44.7109 35.1548C44.9961 35.3195 45.1719 35.6238 45.1719 35.9531V38.8663C45.1623 39.1042 45.0611 39.3295 44.8892 39.4945C44.7173 39.6594 44.4882 39.7515 44.25 39.7513Z\" fill=\"#D40449\"/>\n                                    <path d=\"M31.8049 19.3594H24.4299C24.1855 19.3594 23.951 19.2622 23.7781 19.0894C23.6052 18.9165 23.5081 18.682 23.5081 18.4375V11.0625C23.5081 10.818 23.6052 10.5835 23.7781 10.4107C23.9509 10.2378 24.1854 10.1406 24.4299 10.1406H31.8049C32.0494 10.1406 32.2839 10.2378 32.4568 10.4107C32.6296 10.5835 32.7268 10.818 32.7268 11.0625V18.4375C32.7268 18.682 32.6296 18.9165 32.4568 19.0894C32.2839 19.2622 32.0494 19.3594 31.8049 19.3594ZM25.3518 17.5156H30.8831V11.9844H25.3518V17.5156Z\" fill=\"#D40449\"/>\n                                    <path d=\"M45.1719 33.1875C42.9715 33.1875 40.8612 32.3135 39.3054 30.7574C37.7493 29.2014 36.8752 27.0911 36.8752 24.8909C36.8752 22.6906 37.7493 20.5801 39.3054 19.0243C40.8614 17.4683 42.9717 16.5942 45.1719 16.5942C47.3721 16.5942 49.4827 17.4682 51.0385 19.0243C52.5945 20.5803 53.4686 22.6906 53.4686 24.8909C53.4686 27.0911 52.5946 29.2016 51.0385 30.7574C49.4825 32.3134 47.3721 33.1875 45.1719 33.1875ZM45.1719 18.4375C43.4605 18.4375 41.819 19.1174 40.6088 20.3276C39.3987 21.5377 38.7188 23.1792 38.7188 24.8907C38.7188 26.6021 39.3987 28.2436 40.6088 29.4538C41.8189 30.6639 43.4605 31.3438 45.1719 31.3438C46.8834 31.3438 48.5248 30.6639 49.735 29.4538C50.9452 28.2436 51.625 26.6021 51.625 24.8907C51.625 23.1792 50.9452 21.5377 49.735 20.3276C48.5249 19.1174 46.8834 18.4375 45.1719 18.4375Z\" fill=\"#D40449\"/>\n                                    <path d=\"M45.172 27.6563C44.9724 27.6563 44.7784 27.5916 44.6188 27.4719L40.9313 24.7063C40.6678 24.5087 40.5298 24.1854 40.5691 23.8586C40.6087 23.5315 40.8194 23.2503 41.1222 23.1211C41.4251 22.9916 41.7741 23.0337 42.0376 23.2313L44.9783 25.4346L51.8002 16.0496C51.9445 15.8516 52.1615 15.7189 52.4035 15.6809C52.6457 15.6428 52.8929 15.7026 53.0908 15.8468C53.2888 15.991 53.4216 16.2081 53.4596 16.4501C53.4976 16.6923 53.4379 16.9394 53.2937 17.1374L45.9187 27.2781C45.7733 27.4774 45.5541 27.6103 45.3102 27.6468L45.172 27.6563Z\" fill=\"#D40449\"/>\n                                    </svg>\n                                    <svg width=\"59\" height=\"59\" version=\"1.1\" viewBox=\"0 0 59 59\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <g>\n                                        <path d=\"m475.5 843.75h-88.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h88.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\" fill=\"#D40449\" />\n                                        <path d=\"m843.75 843.75h-269.25c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h250.5v-431.25c0-4.9727-1.9766-9.7422-5.4922-13.258-3.5156-3.5156-8.2852-5.4922-13.258-5.4922h-581.25c-4.9727 0-9.7422 1.9766-13.258 5.4922-3.5156 3.5156-5.4922 8.2852-5.4922 13.258v300c0 6.6992-3.5742 12.887-9.375 16.238-5.8008 3.3477-12.949 3.3477-18.75 0-5.8008-3.3516-9.375-9.5391-9.375-16.238v-300c0-14.918 5.9258-29.227 16.477-39.773 10.547-10.551 24.855-16.477 39.773-16.477h581.25c14.918 0 29.227 5.9258 39.773 16.477 10.551 10.547 16.477 24.855 16.477 39.773v450c0 4.9727-1.9766 9.7422-5.4922 13.258-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\" fill=\"#D40449\" />\n                                        <path d=\"m288 843.75h-100.5c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258v-75c0-6.6992 3.5742-12.887 9.375-16.238 5.8008-3.3477 12.949-3.3477 18.75 0 5.8008 3.3516 9.375 9.5391 9.375 16.238v56.25h81.75c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\" fill=\"#D40449\" />\n                                        <path d=\"m1012.5 656.25h-168.75c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258v-150c0-4.9727 1.9766-9.7422 5.4922-13.258 3.5156-3.5156 8.2852-5.4922 13.258-5.4922h131.25c4.2812-0.125 8.4805 1.2227 11.891 3.8125 3.4141 2.5938 5.832 6.2773 6.8594 10.438l37.5 150c1.4219 5.6094 0.17578 11.559-3.375 16.125-3.6992 4.6875-9.4062 7.332-15.375 7.125zm-150-37.5h126l-28.125-112.5h-97.875z\" fill=\"#D40449\" />\n                                        <path d=\"m1106.2 900h-56.25c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h37.5v-190.88l-76.875-15.375h-148.12v206.25h37.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375h-56.25c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258v-243.75c0-4.9727 1.9766-9.7422 5.4922-13.258 3.5156-3.5156 8.2852-5.4922 13.258-5.4922h172.5l93.75 18.75c4.3008 0.875 8.1562 3.2344 10.895 6.6602 2.7422 3.4258 4.1953 7.7031 4.1055 12.09v225c0 4.9727-1.9766 9.7422-5.4922 13.258-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\" fill=\"#D40449\" />\n                                        <path d=\"m918.75 656.25c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258v-56.25c0-6.6992 3.5742-12.887 9.375-16.238 5.8008-3.3477 12.949-3.3477 18.75 0 5.8008 3.3516 9.375 9.5391 9.375 16.238v56.25c0 4.9727-1.9766 9.7422-5.4922 13.258-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\" fill=\"#D40449\" />\n                                        <path d=\"m975 975c-24.863 0-48.711-9.8789-66.293-27.457-17.578-17.582-27.457-41.43-27.457-66.293s9.8789-48.711 27.457-66.293c17.582-17.578 41.43-27.457 66.293-27.457s48.711 9.8789 66.293 27.457c17.578 17.582 27.457 41.43 27.457 66.293s-9.8789 48.711-27.457 66.293c-17.582 17.578-41.43 27.457-66.293 27.457zm0-150c-14.918 0-29.227 5.9258-39.773 16.477-10.551 10.547-16.477 24.855-16.477 39.773s5.9258 29.227 16.477 39.773c10.547 10.551 24.855 16.477 39.773 16.477s29.227-5.9258 39.773-16.477c10.551-10.547 16.477-24.855 16.477-39.773s-5.9258-29.227-16.477-39.773c-10.547-10.551-24.855-16.477-39.773-16.477z\" fill=\"#D40449\" />\n                                        <path d=\"m937.5 487.5c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258s1.9766-9.7422 5.4922-13.258c3.5156-3.5156 8.2852-5.4922 13.258-5.4922s9.7422 1.9766 13.258 5.4922c3.5156 3.5156 5.4922 8.2852 5.4922 13.258s-1.9766 9.7422-5.4922 13.258c-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\" fill=\"#D40449\" />\n                                        <path d=\"m262.5 900h-37.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h37.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\" fill=\"#D40449\" />\n                                        <path d=\"m843.75 900h-243.75c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h243.75c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\" fill=\"#D40449\" />\n                                        <path d=\"m450 900h-37.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h37.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\" fill=\"#D40449\" />\n                                        <path d=\"m337.5 975c-24.863 0-48.711-9.8789-66.293-27.457-17.578-17.582-27.457-41.43-27.457-66.293s9.8789-48.711 27.457-66.293c17.582-17.578 41.43-27.457 66.293-27.457s48.711 9.8789 66.293 27.457c17.578 17.582 27.457 41.43 27.457 66.293s-9.8789 48.711-27.457 66.293c-17.582 17.578-41.43 27.457-66.293 27.457zm0-150c-14.918 0-29.227 5.9258-39.773 16.477-10.551 10.547-16.477 24.855-16.477 39.773s5.9258 29.227 16.477 39.773c10.547 10.551 24.855 16.477 39.773 16.477s29.227-5.9258 39.773-16.477c10.551-10.547 16.477-24.855 16.477-39.773s-5.9258-29.227-16.477-39.773c-10.547-10.551-24.855-16.477-39.773-16.477z\" fill=\"#D40449\" />\n                                        <path d=\"m525 975c-24.863 0-48.711-9.8789-66.293-27.457-17.578-17.582-27.457-41.43-27.457-66.293s9.8789-48.711 27.457-66.293c17.582-17.578 41.43-27.457 66.293-27.457s48.711 9.8789 66.293 27.457c17.578 17.582 27.457 41.43 27.457 66.293s-9.8789 48.711-27.457 66.293c-17.582 17.578-41.43 27.457-66.293 27.457zm0-150c-14.918 0-29.227 5.9258-39.773 16.477-10.551 10.547-16.477 24.855-16.477 39.773s5.9258 29.227 16.477 39.773c10.547 10.551 24.855 16.477 39.773 16.477s29.227-5.9258 39.773-16.477c10.551-10.547 16.477-24.855 16.477-39.773s-5.9258-29.227-16.477-39.773c-10.547-10.551-24.855-16.477-39.773-16.477z\" fill=\"#D40449\" />\n                                        <path d=\"m150 900c-2.4609 0.0625-4.8984-0.44922-7.125-1.5-2.3008-0.89062-4.4062-2.2305-6.1875-3.9375-3.4258-3.5938-5.3672-8.3477-5.4375-13.312 0.03125-2.4492 0.53906-4.8711 1.5-7.125 0.94922-2.2734 2.2812-4.3633 3.9375-6.1875 1.7812-1.707 3.8867-3.0469 6.1875-3.9375 3.4141-1.4375 7.1797-1.8281 10.816-1.1289 3.6367 0.70312 6.9844 2.4648 9.6211 5.0664 1.6562 1.8242 2.9883 3.9141 3.9375 6.1875 0.96094 2.2539 1.4688 4.6758 1.5 7.125 0 4.9727-1.9766 9.7422-5.4922 13.258-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\" fill=\"#D40449\" />\n                                        <path d=\"m93.75 900c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258 0.03125-2.4492 0.53906-4.8711 1.5-7.125 0.94922-2.2734 2.2812-4.3633 3.9375-6.1875 4.4336-4.3906 10.758-6.2891 16.875-5.0625 1.2422 0.17188 2.4453 0.55469 3.5625 1.125l3.375 1.6875 2.8125 2.25c1.6562 1.8242 2.9883 3.9141 3.9375 6.1875 1.0508 2.2266 1.5625 4.6641 1.5 7.125-0.070312 4.9648-2.0117 9.7188-5.4375 13.312l-2.8125 2.25-3.375 1.6875c-1.1172 0.57031-2.3203 0.95312-3.5625 1.125z\" fill=\"#D40449\" />\n                                        <path d=\"m1106.2 787.5h-37.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h37.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\" fill=\"#D40449\" />\n                                        <path d=\"m262.5 768.75h-112.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h112.5c6.6992 0 12.887-3.5742 16.238-9.375 3.3477-5.8008 3.3477-12.949 0-18.75-3.3516-5.8008-9.5391-9.375-16.238-9.375h-168.75c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h168.75c20.098 0 38.664 10.723 48.715 28.125 10.047 17.402 10.047 38.848 0 56.25-10.051 17.402-28.617 28.125-48.715 28.125z\" fill=\"#D40449\" />\n                                        </g>\n                                    </svg>\n                                    </div>\n                                    <span>Order processed</span>\n\n                                </li>\n                                <li>\n                                    <div className=\"shipping-icon\">\n                                        <svg width=\"62\" height=\"62\" version=\"1.1\" viewBox=\"0 0 1200 1200\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <g>\n                                        <path d=\"m475.5 843.75h-88.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h88.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\"/>\n                                        <path d=\"m843.75 843.75h-269.25c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h250.5v-431.25c0-4.9727-1.9766-9.7422-5.4922-13.258-3.5156-3.5156-8.2852-5.4922-13.258-5.4922h-581.25c-4.9727 0-9.7422 1.9766-13.258 5.4922-3.5156 3.5156-5.4922 8.2852-5.4922 13.258v300c0 6.6992-3.5742 12.887-9.375 16.238-5.8008 3.3477-12.949 3.3477-18.75 0-5.8008-3.3516-9.375-9.5391-9.375-16.238v-300c0-14.918 5.9258-29.227 16.477-39.773 10.547-10.551 24.855-16.477 39.773-16.477h581.25c14.918 0 29.227 5.9258 39.773 16.477 10.551 10.547 16.477 24.855 16.477 39.773v450c0 4.9727-1.9766 9.7422-5.4922 13.258-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\"/>\n                                        <path d=\"m288 843.75h-100.5c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258v-75c0-6.6992 3.5742-12.887 9.375-16.238 5.8008-3.3477 12.949-3.3477 18.75 0 5.8008 3.3516 9.375 9.5391 9.375 16.238v56.25h81.75c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\"/>\n                                        <path d=\"m1012.5 656.25h-168.75c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258v-150c0-4.9727 1.9766-9.7422 5.4922-13.258 3.5156-3.5156 8.2852-5.4922 13.258-5.4922h131.25c4.2812-0.125 8.4805 1.2227 11.891 3.8125 3.4141 2.5938 5.832 6.2773 6.8594 10.438l37.5 150c1.4219 5.6094 0.17578 11.559-3.375 16.125-3.6992 4.6875-9.4062 7.332-15.375 7.125zm-150-37.5h126l-28.125-112.5h-97.875z\"/>\n                                        <path d=\"m1106.2 900h-56.25c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h37.5v-190.88l-76.875-15.375h-148.12v206.25h37.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375h-56.25c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258v-243.75c0-4.9727 1.9766-9.7422 5.4922-13.258 3.5156-3.5156 8.2852-5.4922 13.258-5.4922h172.5l93.75 18.75c4.3008 0.875 8.1562 3.2344 10.895 6.6602 2.7422 3.4258 4.1953 7.7031 4.1055 12.09v225c0 4.9727-1.9766 9.7422-5.4922 13.258-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\"/>\n                                        <path d=\"m918.75 656.25c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258v-56.25c0-6.6992 3.5742-12.887 9.375-16.238 5.8008-3.3477 12.949-3.3477 18.75 0 5.8008 3.3516 9.375 9.5391 9.375 16.238v56.25c0 4.9727-1.9766 9.7422-5.4922 13.258-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\"/>\n                                        <path d=\"m975 975c-24.863 0-48.711-9.8789-66.293-27.457-17.578-17.582-27.457-41.43-27.457-66.293s9.8789-48.711 27.457-66.293c17.582-17.578 41.43-27.457 66.293-27.457s48.711 9.8789 66.293 27.457c17.578 17.582 27.457 41.43 27.457 66.293s-9.8789 48.711-27.457 66.293c-17.582 17.578-41.43 27.457-66.293 27.457zm0-150c-14.918 0-29.227 5.9258-39.773 16.477-10.551 10.547-16.477 24.855-16.477 39.773s5.9258 29.227 16.477 39.773c10.547 10.551 24.855 16.477 39.773 16.477s29.227-5.9258 39.773-16.477c10.551-10.547 16.477-24.855 16.477-39.773s-5.9258-29.227-16.477-39.773c-10.547-10.551-24.855-16.477-39.773-16.477z\"/>\n                                        <path d=\"m937.5 487.5c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258s1.9766-9.7422 5.4922-13.258c3.5156-3.5156 8.2852-5.4922 13.258-5.4922s9.7422 1.9766 13.258 5.4922c3.5156 3.5156 5.4922 8.2852 5.4922 13.258s-1.9766 9.7422-5.4922 13.258c-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\"/>\n                                        <path d=\"m262.5 900h-37.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h37.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\"/>\n                                        <path d=\"m843.75 900h-243.75c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h243.75c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\"/>\n                                        <path d=\"m450 900h-37.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h37.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\"/>\n                                        <path d=\"m337.5 975c-24.863 0-48.711-9.8789-66.293-27.457-17.578-17.582-27.457-41.43-27.457-66.293s9.8789-48.711 27.457-66.293c17.582-17.578 41.43-27.457 66.293-27.457s48.711 9.8789 66.293 27.457c17.578 17.582 27.457 41.43 27.457 66.293s-9.8789 48.711-27.457 66.293c-17.582 17.578-41.43 27.457-66.293 27.457zm0-150c-14.918 0-29.227 5.9258-39.773 16.477-10.551 10.547-16.477 24.855-16.477 39.773s5.9258 29.227 16.477 39.773c10.547 10.551 24.855 16.477 39.773 16.477s29.227-5.9258 39.773-16.477c10.551-10.547 16.477-24.855 16.477-39.773s-5.9258-29.227-16.477-39.773c-10.547-10.551-24.855-16.477-39.773-16.477z\"/>\n                                        <path d=\"m525 975c-24.863 0-48.711-9.8789-66.293-27.457-17.578-17.582-27.457-41.43-27.457-66.293s9.8789-48.711 27.457-66.293c17.582-17.578 41.43-27.457 66.293-27.457s48.711 9.8789 66.293 27.457c17.578 17.582 27.457 41.43 27.457 66.293s-9.8789 48.711-27.457 66.293c-17.582 17.578-41.43 27.457-66.293 27.457zm0-150c-14.918 0-29.227 5.9258-39.773 16.477-10.551 10.547-16.477 24.855-16.477 39.773s5.9258 29.227 16.477 39.773c10.547 10.551 24.855 16.477 39.773 16.477s29.227-5.9258 39.773-16.477c10.551-10.547 16.477-24.855 16.477-39.773s-5.9258-29.227-16.477-39.773c-10.547-10.551-24.855-16.477-39.773-16.477z\"/>\n                                        <path d=\"m150 900c-2.4609 0.0625-4.8984-0.44922-7.125-1.5-2.3008-0.89062-4.4062-2.2305-6.1875-3.9375-3.4258-3.5938-5.3672-8.3477-5.4375-13.312 0.03125-2.4492 0.53906-4.8711 1.5-7.125 0.94922-2.2734 2.2812-4.3633 3.9375-6.1875 1.7812-1.707 3.8867-3.0469 6.1875-3.9375 3.4141-1.4375 7.1797-1.8281 10.816-1.1289 3.6367 0.70312 6.9844 2.4648 9.6211 5.0664 1.6562 1.8242 2.9883 3.9141 3.9375 6.1875 0.96094 2.2539 1.4688 4.6758 1.5 7.125 0 4.9727-1.9766 9.7422-5.4922 13.258-3.5156 3.5156-8.2852 5.4922-13.258 5.4922z\"/>\n                                        <path d=\"m93.75 900c-4.9727 0-9.7422-1.9766-13.258-5.4922-3.5156-3.5156-5.4922-8.2852-5.4922-13.258 0.03125-2.4492 0.53906-4.8711 1.5-7.125 0.94922-2.2734 2.2812-4.3633 3.9375-6.1875 4.4336-4.3906 10.758-6.2891 16.875-5.0625 1.2422 0.17188 2.4453 0.55469 3.5625 1.125l3.375 1.6875 2.8125 2.25c1.6562 1.8242 2.9883 3.9141 3.9375 6.1875 1.0508 2.2266 1.5625 4.6641 1.5 7.125-0.070312 4.9648-2.0117 9.7188-5.4375 13.312l-2.8125 2.25-3.375 1.6875c-1.1172 0.57031-2.3203 0.95312-3.5625 1.125z\"/>\n                                        <path d=\"m1106.2 787.5h-37.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h37.5c6.6992 0 12.887 3.5742 16.238 9.375 3.3477 5.8008 3.3477 12.949 0 18.75-3.3516 5.8008-9.5391 9.375-16.238 9.375z\"/>\n                                        <path d=\"m262.5 768.75h-112.5c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h112.5c6.6992 0 12.887-3.5742 16.238-9.375 3.3477-5.8008 3.3477-12.949 0-18.75-3.3516-5.8008-9.5391-9.375-16.238-9.375h-168.75c-6.6992 0-12.887-3.5742-16.238-9.375-3.3477-5.8008-3.3477-12.949 0-18.75 3.3516-5.8008 9.5391-9.375 16.238-9.375h168.75c20.098 0 38.664 10.723 48.715 28.125 10.047 17.402 10.047 38.848 0 56.25-10.051 17.402-28.617 28.125-48.715 28.125z\"/>\n                                        </g>\n                                        </svg>\n\n                                    </div>\n\n                                    <span>Order dispatched</span>\n                                </li>\n                                <li>\n                                    <div className=\"shipping-icon\">\n                                        <svg width=\"49\" height=\"49\" viewBox=\"0 0 49 49\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                            <path d=\"M15.053 26.4718C15.053 27.6116 15.9803 28.539 17.1202 28.539C18.26 28.539 19.1874 27.6116 19.1874 26.4718C19.1874 25.332 18.26 24.4046 17.1202 24.4046C15.9803 24.4046 15.053 25.332 15.053 26.4718ZM17.6561 26.4718C17.6561 26.7674 17.4157 27.0077 17.1202 27.0077C16.8246 27.0077 16.5842 26.7674 16.5842 26.4718C16.5842 26.1762 16.8246 25.9359 17.1202 25.9359C17.4157 25.9359 17.6561 26.1762 17.6561 26.4718Z\" fill=\"#D40449\"/>\n                                            <path d=\"M44.6391 26.6168H35.0972V26.6161H32.9534V26.6168H30.9414V26.6161H28.7977V26.6168H26.0721C25.4801 26.6168 25.0002 27.0967 25.0002 27.6886V40.6945H13.4178L13.4176 7.7481H28.7975V25.8503H30.9413L30.9414 6.67622C30.9414 6.08508 30.4607 5.60435 29.8696 5.60435H12.3459C11.7518 5.60435 11.2741 6.08508 11.2741 6.67622V40.6945H9.26207L9.26191 3.81585H32.9534V25.8503H35.0972V2.74357C35.0972 2.15242 34.6164 1.67169 34.0253 1.67169H8.19004C7.5989 1.67169 7.11816 2.15242 7.11816 2.74357V40.6941H4.36191C3.77077 40.6941 3.29004 41.1748 3.29004 41.7659V46.2556C3.29004 46.8467 3.77077 47.3274 4.36191 47.3274H26.0714H26.072H44.6393C45.2312 47.3274 45.7112 46.8475 45.7112 46.2556L45.711 27.6882C45.711 27.0966 45.2313 26.6164 44.6392 26.6164L44.6391 26.6168ZM32.9457 28.7605H37.6999V32.4891L37.3381 32.2315C37.0725 32.042 36.7156 32.042 36.45 32.2315L35.3225 33.0341L34.1951 32.2315C33.9295 32.042 33.5726 32.042 33.307 32.2315L32.9452 32.4891L32.9454 28.7605H32.9457ZM5.43379 42.8382H25.0003V45.1841H5.43379V42.8382ZM43.5672 45.1841H27.1436V28.7605H31.414V33.9741C31.414 34.2607 31.5738 34.5232 31.8287 34.6545C32.0834 34.7863 32.39 34.7636 32.6237 34.5976L33.7511 33.795L34.8784 34.5976C35.144 34.7871 35.501 34.7871 35.7665 34.5976L36.8941 33.795L38.0214 34.5976C38.1537 34.6919 38.309 34.7397 38.4655 34.7397C38.5856 34.7397 38.7056 34.7115 38.8164 34.6545C39.0711 34.5231 39.2311 34.2607 39.2311 33.9741L39.231 28.7605H43.5671L43.5672 45.1841Z\" fill=\"#D40449\"/>\n                                        </svg>\n                                    </div>\n                                    <span>Better health is at your door</span>\n                                </li>\n                            </ul>\n                    </div>\n                </div>)\n            }\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { ErrorModal } from '../common/error';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (\n        address,\n        itemId,\n        itemKey,\n    ) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useContext } from 'react';\n\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isShippingStepPending,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={shippingAddress}\n                    buttonId={editAddressButtonId}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initializeShipping(options)}\n                    isLoading={isShippingStepPending}\n                    methodId={methodId}\n                    onFieldChange={onFieldChange}\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    consignments={consignments}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { isPaypalConnectMethod, usePayPalConnectAddress } from '@bigcommerce/checkout/paypal-connect-integration';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n    addresses,\n    assignItem,\n    cart,\n    cartHasChanged,\n    createCustomerAddress,\n    consignments,\n    countries,\n    countriesWithAutocomplete,\n    onCreateAccount,\n    customerMessage,\n    deinitialize,\n    deleteConsignments,\n    getFields,\n    googleMapsApiKey,\n    initialize,\n    isBillingSameAsShipping,\n    isGuest,\n    isLoading,\n    isMultiShippingMode,\n    methodId,\n    onMultiShippingSubmit,\n    onSignIn,\n    onSingleShippingSubmit,\n    onUnhandledError,\n    onUseNewAddress,\n    shippingAddress,\n    shouldShowOrderComments,\n    shouldShowSaveAddress,\n    shouldShowAddAddressInCheckout,\n    signOut,\n    updateAddress,\n    isShippingStepPending,\n    isFloatingLabelEnabled,\n}: ShippingFormProps & WithLanguageProps) => {\n    const { isPayPalAxoEnabled, mergedBcAndPayPalConnectAddresses } = usePayPalConnectAddress();\n    const shippingAddresses = isPayPalAxoEnabled ? mergedBcAndPayPalConnectAddresses : addresses;\n\n    useEffect(() => {\n        if (isPaypalConnectMethod(methodId) && isPayPalAxoEnabled) {\n            initialize({ methodId });\n        }\n    });\n\n    return isMultiShippingMode ? (\n        <MultiShippingForm\n            addresses={shippingAddresses}\n            assignItem={assignItem}\n            cart={cart}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            createCustomerAddress={createCustomerAddress}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isGuest={isGuest}\n            isLoading={isLoading}\n            onCreateAccount={onCreateAccount}\n            onSignIn={onSignIn}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowAddAddressInCheckout={shouldShowAddAddressInCheckout}\n            shouldShowOrderComments={shouldShowOrderComments}\n        />\n    ) : (\n        <SingleShippingForm\n            addresses={shippingAddresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useEffect } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.ShippingShippingAddressFormBefore),\n    );\n\n    useEffect(() => {\n        if (isExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.ShippingShippingAddressFormBefore,\n                ExtensionRegion.ShippingShippingAddressFormBefore,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.ShippingShippingAddressFormBefore);\n            };\n        }\n    }, [extensionService, isExtensionRegionEnabled]);\n\n    return (\n        <>\n            {isExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.ShippingShippingAddressFormBefore} />\n            )}\n            <div className=\"form-legend-container\">\n                <Legend testId=\"shipping-address-heading\">\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {shouldShowMultiShipping && (\n                    <a\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        }\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions()]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            providerWithCustomCheckout,\n            step,\n            isFloatingLabelEnabled,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        if (providerWithCustomCheckout === PaymentMethodId.StripeUPE && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout:\n            features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne((selectedItemId) => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const { children, className = 'accordion', defaultSelectedItemId } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={this.getContextValue(selectedItemId)}>\n                <ul className={className}>{children}</ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = (id) => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li\n            className={classNames(className, { [classNameSelected]: isSelected })}\n        >\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children && (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            )}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","data","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","providerWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","ExtensionRegionContainer","useExtensions","extensionContext","useContext","ExtensionContext","Error","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","length","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","isMultiShippingMode","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","extensionService","isExtensionEnabled","isExtensionRegionEnabled","Boolean","isRegionEnabled","useEffect","renderExtension","ShippingShippingAddressFormAfter","removeListeners","hasFreeShipping","v","cost","Fieldset","legend","Legend","Alert","ShippingOptions","width","height","viewBox","fill","xmlns","d","version","OrderComments","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","addressFieldName","fieldName","fieldValue","formFieldName","field","custom","handleChange","onFieldChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","handleFieldValueChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","testId","DynamicFormField","parentFieldName","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","FormContext","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","usePayPalConnectAddress","isPayPalAxoEnabled","mergedBcAndPayPalConnectAddresses","shippingAddresses","onMultiShippingChange","shouldShowMultiShipping","ShippingShippingAddressFormBefore","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","useState","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","code","allowedCountries","join","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","current","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","email","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","Shipping","createContext","onToggle","getContextValue","selectedItemId","handleToggleItem","isDisabled","children","AccordionContext","ChecklistContext","contextValue","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","Label","htmlFor","content","kebabCase","rest","renderInput","Function","selectedValue","renderHeaderContent","BasicFormField"],"sourceRoot":""}