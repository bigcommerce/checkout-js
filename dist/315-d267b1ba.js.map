{"version":3,"file":"315-d267b1ba.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/form/Label/Label.tsx","webpack://checkout/./packages/ui/src/icon/IconHelp.tsx","webpack://checkout/./packages/ui/src/form/TextInput/TextInput.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/ui/src/form/Input/Input.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/ui/src/form/RadioInput/RadioInput.tsx","webpack://checkout/./packages/ui/src/form/FormFieldError/FormFieldError.tsx","webpack://checkout/./packages/ui/src/form/FormField/FormField.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormFieldType.ts","webpack://checkout/./packages/ui/src/form/DynamicFormField/MultiCheckboxControl.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/CheckboxGroupFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormField.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/ui/src/icon/IconError.tsx","webpack://checkout/./packages/ui/src/icon/IconSuccess.tsx","webpack://checkout/./packages/ui/src/icon/IconInfo.tsx","webpack://checkout/./packages/ui/src/alert/Alert.tsx","webpack://checkout/./packages/ui/src/form/CheckboxInput/CheckboxInput.tsx","webpack://checkout/./packages/ui/src/icon/IconChevronDown.tsx","webpack://checkout/./packages/ui/src/form/TextArea/TextArea.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicInput.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/ui/src/form/FormFieldContainer/FormFieldContainer.tsx","webpack://checkout/./packages/ui/src/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/ui/src/form/BasicFormField/BasicFormField.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { FunctionComponent, LabelHTMLAttributes } from 'react';\n\nexport interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n    testId?: string;\n    hidden?: boolean;\n}\n\nconst Label: FunctionComponent<LabelProps> = ({ children, className, hidden, testId, ...rest }) => (\n    <label\n        {...rest}\n        className={classNames(\n            className || 'form-label',\n            { 'is-srOnly': hidden },\n            'optimizedCheckout-form-label',\n        )}\n        data-test={testId}\n    >\n        {children}\n    </label>\n);\n\nexport default Label;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\n\nexport interface TextInputProps extends InputProps {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\n}\n\nconst TextInput = forwardRef(\n    (\n        { additionalClassName, appearFocused, type = 'text', ...rest }: TextInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <Input\n            {...rest}\n            className={classNames(\n                'form-input',\n                'optimizedCheckout-form-input',\n                { 'form-input--focus': appearFocused },\n                { 'optimizedCheckout-form-input--focus': appearFocused },\n                additionalClassName,\n            )}\n            ref={ref}\n            type={type}\n        />\n    ),\n);\n\nexport default TextInput;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\n      node.addEventListener('transitionend', ({ target }: Event) => {\n        if (target === node) {\n          done();\n        }\n      });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    testId?: string;\n}\n\nconst Input = forwardRef(({ testId, ...rest }: InputProps, ref: Ref<HTMLInputElement>) => (\n    <input {...rest} data-test={testId} ref={ref} />\n));\n\nexport default Input;\n","import classNames from 'classnames';\nimport React, { FieldsetHTMLAttributes, forwardRef, ReactNode, Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef(\n    (\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\n        ref: Ref<HTMLFieldSetElement>,\n    ) => (\n        <fieldset\n            {...rest}\n            className={className || classNames('form-fieldset', additionalClassName)}\n            data-test={testId}\n            ref={ref}\n        >\n            {legend}\n\n            <div className=\"form-body\">{children}</div>\n        </fieldset>\n    ),\n);\n\nexport default Fieldset;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from '../Input/Input';\nimport Label from '../Label/Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef(\n    (\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                checked={checked}\n                className={classNames(\n                    'form-radio',\n                    'optimizedCheckout-form-radio',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"radio\"\n                value={value}\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default RadioInput;\n","import { ErrorMessage } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldErrorProps {\n    name: string;\n    testId?: string;\n    errorId: string;\n}\n\nconst FormFieldError: FunctionComponent<FormFieldErrorProps> = ({ name, testId, errorId }) => {\n    const renderMessage = useCallback(\n        (message: string) => (\n            <ul className=\"form-field-errors\" data-test={testId}>\n                <li className=\"form-field-error\">\n                    <label\n                        aria-live=\"polite\"\n                        className=\"form-inlineMessage\"\n                        htmlFor={name}\n                        id={errorId}\n                        role=\"alert\"\n                    >\n                        {message}\n                    </label>\n                </li>\n            </ul>\n        ),\n        [errorId, name, testId],\n    );\n\n    return (\n        <FormContext.Consumer>\n            {({ isSubmitted }) =>\n                isSubmitted && <ErrorMessage name={name} render={renderMessage} />\n            }\n        </FormContext.Consumer>\n    );\n};\n\nexport default memo(FormFieldError);\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { FormFieldError } from '../FormFieldError';\nimport { Label } from '../Label';\n\nexport interface FormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    label?: ReactNode | ((fieldName: string) => ReactNode);\n    labelContent?: ReactNode;\n    footer?: ReactNode;\n    id?: string;\n    input(field: FieldProps<string>): ReactNode;\n    onChange?(value: string): void;\n}\n\nconst FormField: FunctionComponent<FormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    label,\n    onChange,\n    footer,\n    input,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        (props: FieldProps<string>) => (\n            <>\n                {Boolean(label) && (typeof label === 'function' ? label(name) : label)}\n\n                {Boolean(labelContent && !label) && (\n                    <Label htmlFor={name} id={`${id ?? name}-label`}>\n                        {labelContent}\n                    </Label>\n                )}\n\n                {input(props)}\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n\n                {footer}\n            </>\n        ),\n        [label, labelContent, id, input, name, footer],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(FormField);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","enum DynamicFormFieldType {\n    TELEPHONE = 'tel',\n    DROPDOWM = 'dropdown',\n    NUMBER = 'number',\n    PASSWORD = 'password',\n    CHECKBOX = 'checkbox',\n    MULTILINE = 'multiline',\n    DATE = 'date',\n    RADIO = 'radio',\n    TEXT = 'text',\n}\n\nexport default DynamicFormFieldType;\n","/* istanbul ignore file */\n\nimport React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedAll();\n        },\n        [onSelectedAll],\n    );\n\n    const handleSelectNoneClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedNone();\n        },\n        [onSelectedNone],\n    );\n\n    return (\n        <ul className=\"multiCheckbox--controls\">\n            <li className=\"multiCheckbox--control\">\n                <TranslatedString id=\"address.select\" />\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-all-button`}\n                    href=\"#\"\n                    onClick={handleSelectAllClick}\n                >\n                    <TranslatedString id=\"address.select_all\" />\n                </a>\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-none-button`}\n                    href=\"#\"\n                    onClick={handleSelectNoneClick}\n                >\n                    <TranslatedString id=\"address.select_none\" />\n                </a>\n            </li>\n        </ul>\n    );\n};\n\nexport default memo(MultiCheckboxControl);\n","/* istanbul ignore file */\n\nimport { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\nimport { FormFieldError } from '../FormFieldError';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(\n            options.map(({ value }) => value),\n            checkedValues,\n        ).forEach((val) => push(val));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, options, push, values]);\n\n    const handleSelectNone = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, remove, values]);\n\n    const handleInputChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const checkedValues: string[] = getIn(values, name) || [];\n            const { value, checked } = event.target;\n\n            if (checked) {\n                push(value);\n            } else {\n                remove(checkedValues.indexOf(value));\n            }\n\n            onChange(getIn(values, name));\n        },\n        [name, onChange, push, remove, values],\n    );\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\n            {label}\n\n            {options.length > 1 && (\n                <MultiCheckboxControl\n                    onSelectedAll={handleSelectAll}\n                    onSelectedNone={handleSelectNone}\n                    testId={id}\n                />\n            )}\n\n            <DynamicInput\n                fieldType={DynamicFormFieldType.CHECKBOX}\n                id={id}\n                name={name}\n                onChange={handleInputChange}\n                options={options}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                value={getIn(values, name) || []}\n            />\n\n            <FormFieldError\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                errorId={`${id ?? name}-field-error-message`}\n                name={name}\n                testId={`${kebabCase(name)}-field-error-message`}\n            />\n        </FormFieldContainer>\n    );\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback(\n        (renderProps: FieldArrayRenderProps) => (\n            <MultiCheckboxFormField\n                id={id}\n                label={label}\n                name={name}\n                onChange={onChange}\n                options={options}\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\n            />\n        ),\n        [id, label, name, onChange, options],\n    );\n\n    return <FieldArray name={name} render={renderField} />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport { includes } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField } from '../FormField';\nimport { Label } from '../Label';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n        inputDateFormat,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(\n        () => (\n            <Label htmlFor={fieldInputId} id={`${fieldInputId}-label`}>\n                {label || fieldLabel}\n                {!required && (\n                    <>\n                        {' '}\n                        <small className=\"optimizedCheckout-contentSecondary\">\n                            <TranslatedString id=\"common.optional_text\" />\n                        </small>\n                    </>\n                )}\n            </Label>\n        ),\n        [fieldInputId, fieldLabel, required, label],\n    );\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.NUMBER;\n            }\n\n            if (includes(name, 'phone') || includes(name, 'tel')) {\n                return DynamicFormFieldType.TELEPHONE;\n            }\n\n            return secret ? DynamicFormFieldType.PASSWORD : DynamicFormFieldType.TEXT;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, name, secret]);\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\n                autoComplete={autocomplete}\n                fieldType={dynamicFormFieldType}\n                id={fieldInputId}\n                inputDateFormat={inputDateFormat}\n                max={max}\n                maxLength={maxLength || undefined}\n                min={min}\n                options={options && options.items}\n                placeholder={placeholder || (options && options.helperLabel)}\n                rows={options && options.rows}\n            />\n        ),\n        [\n            inputDateFormat,\n            fieldInputId,\n            autocomplete,\n            dynamicFormFieldType,\n            max,\n            maxLength,\n            min,\n            options,\n            placeholder,\n        ],\n    );\n\n    return (\n        <div className={`dynamic-form-field ${extraClass || ''}`}>\n            {fieldType === DynamicFormFieldType.CHECKBOX ? (\n                <CheckboxGroupFormField\n                    id={fieldInputId}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                    options={(options && options.items) || []}\n                />\n            ) : (\n                <FormField\n                    id={fieldInputId}\n                    input={renderInput}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import React, { FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    children: React.ReactNode;\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconError: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconError);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSuccess: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconSuccess);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconInfo: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconInfo);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode, useId } from 'react';\n\nimport { IconError, IconInfo, IconSuccess } from '../icon';\n\nexport interface AlertProps {\n    additionalClassName?: string;\n    icon?: ReactNode;\n    testId?: string;\n    type?: AlertType;\n    children?: ReactNode;\n}\n\nexport enum AlertType {\n    Error = 'error',\n    Info = 'info',\n    Success = 'success',\n    Warning = 'warning',\n}\n\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\n    switch (type) {\n        case AlertType.Error:\n        case AlertType.Warning:\n            return <IconError />;\n\n        case AlertType.Success:\n            return <IconSuccess />;\n\n        case AlertType.Info:\n        default:\n            return <IconInfo />;\n    }\n}\n\nconst Alert: FunctionComponent<AlertProps> = ({\n    additionalClassName,\n    children,\n    icon,\n    testId,\n    type,\n}) => {\n    const describedBy = useId();\n\n    return (\n        <div\n            aria-describedby={describedBy}\n            className={classNames(\n                'alertBox',\n                additionalClassName,\n                { 'alertBox--info': type === AlertType.Info || !type },\n                { 'alertBox--error': type === AlertType.Error },\n                { 'alertBox--success': type === AlertType.Success },\n                { 'alertBox--warning': type === AlertType.Warning },\n            )}\n            data-test={testId}\n        >\n            <div className=\"alertBox-column alertBox-icon\">{icon || renderDefaultIcon(type)}</div>\n\n            <div \n                id={describedBy}\n                aria-live={type === AlertType.Error ? 'assertive' : 'polite'}\n                className=\"alertBox-column alertBox-message\"\n                role={type === AlertType.Error ? 'alert' : 'status'}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default Alert;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\nimport { Label } from '../Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef(\n    (\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                className={classNames(\n                    'form-checkbox',\n                    'optimizedCheckout-form-checkbox',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"checkbox\"\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default CheckboxInput;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => (\n        <textarea\n            {...rest}\n            className={\n                className ||\n                classNames('form-input', 'optimizedCheckout-form-input', additionalClassName)\n            }\n            data-test={testId}\n            ref={ref}\n        />\n    ),\n);\n\nexport default TextArea;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { isDate, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate } from '@bigcommerce/checkout/locale';\n\nimport { IconChevronDown } from '../../icon';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { InputProps } from '../Input';\nimport { RadioInput } from '../RadioInput';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n    isFloatingLabelEnabled?: boolean;\n    inputDateFormat?: string;\n    date?: {\n        inputFormat: string;\n    };\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    isFloatingLabelEnabled,\n    date,\n    inputDateFormat,\n    ...rest\n}) => {\n    const inputFormat = inputDateFormat || date?.inputFormat || '';\n\n    const handleDateChange = useCallback(\n      (dateValue: string, event: any) =>\n        onChange({\n          ...event,\n          target: {\n            name,\n            value: dateValue,\n          },\n        }),\n      [onChange, name],\n    );\n\n    switch (fieldType) {\n        case DynamicFormFieldType.DROPDOWM:\n            return (\n                <>\n                    <div\n                        className={classNames(\n                            { 'dropdown-chevron': !isFloatingLabelEnabled },\n                            { 'floating-select-chevron': isFloatingLabelEnabled },\n                        )}\n                    >\n                        <IconChevronDown />\n                    </div>\n                    <select\n                        {...(rest as any)}\n                        className={classNames(\n                            { 'floating-select': isFloatingLabelEnabled },\n                            'form-select optimizedCheckout-form-select',\n                        )}\n                        data-test={`${id}-select`}\n                        id={id}\n                        name={name}\n                        onChange={onChange}\n                        value={value ?? ''}\n                    >\n                        {!!placeholder && <option value=\"\">{placeholder}</option>}\n                        {options &&\n                            options.map(({ label, value: optionValue }) => (\n                                <option key={optionValue} value={optionValue}>\n                                    {label}\n                                </option>\n                            ))}\n                    </select>\n                </>\n            );\n\n        case DynamicFormFieldType.RADIO:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <RadioInput\n                            {...rest}\n                            checked={optionValue === value}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-radio`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.CHECKBOX:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <CheckboxInput\n                            {...rest}\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-checkbox`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.DATE:\n            return (\n                <ReactDatePicker\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    autoComplete=\"off\"\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                    // onChangeRaw={ rest.onChange }\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\n                    className=\"form-input optimizedCheckout-form-input\"\n                    dateFormat={inputFormat}\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\n                    name={name}\n                    onChange={handleDateChange}\n                    placeholderText={inputFormat.toUpperCase()}\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\n                    selected={isDate(value) ? value : undefined}\n                />\n            );\n\n        case DynamicFormFieldType.MULTILINE:\n            return (\n                <TextArea\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    testId={`${id}-text`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n\n        default:\n            return (\n                <TextInput\n                    {...rest}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    placeholder={placeholder}\n                    testId={`${id}-${\n                        fieldType === DynamicFormFieldType.PASSWORD ? 'password' : 'text'\n                    }`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children?: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children?: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    useEffect(() => {\n        return () => {\n            setFieldValue(name, '');\n        };\n    }, []);\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldContainerProps {\n    additionalClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    hasError?: boolean;\n    testId?: string;\n}\n\nconst FormFieldContainer: FunctionComponent<FormFieldContainerProps> = ({\n    additionalClassName,\n    children,\n    className,\n    hasError,\n    testId,\n}) => (\n    <FormContext.Consumer>\n        {({ isSubmitted }) => (\n            <div\n                className={\n                    className ||\n                    classNames('form-field', additionalClassName, {\n                        'form-field--error': hasError && isSubmitted,\n                    })\n                }\n                data-test={testId}\n            >\n                {children}\n            </div>\n        )}\n    </FormContext.Consumer>\n);\n\nexport default memo(FormFieldContainer);\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from '@popperjs/core';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children?: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <span\n                            onBlur={this.handleHide}\n                            onFocus={this.handleShow}\n                            onMouseEnter={this.handleShow}\n                            onMouseLeave={this.handleHide}\n                            ref={ref}\n                        >\n                            {children}\n                        </span>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        shouldShow && (\n                            <div ref={ref} style={style}>\n                                {tooltip}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n","import { Field, FieldConfig, FieldProps, getIn } from 'formik';\nimport { isDate, noop } from 'lodash';\nimport React, {\n    Component,\n    createElement,\n    FunctionComponent,\n    memo,\n    useCallback,\n    useMemo,\n} from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\n\nexport interface BasicFormFieldProps extends FieldConfig {\n    additionalClassName?: string;\n    className?: string;\n    testId?: string;\n    onChange?(value: unknown): void;\n}\n\ntype InnerFieldInputProps = FieldProps &\n    Pick<FieldConfig, 'component' | 'render'> & {\n        onChange?(value: string): void;\n    };\n\ntype InnerFieldProps = Omit<BasicFormFieldProps, keyof FieldConfig> & InnerFieldInputProps;\n\nclass InnerFieldInput extends Component<InnerFieldInputProps> {\n    componentDidUpdate({ field: prevField }: InnerFieldInputProps) {\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            field: { value },\n            onChange = noop,\n        } = this.props;\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparableValue = isDate(value) ? value.getTime() : value;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparablePrevValue = isDate(prevField.value)\n            ? prevField.value.getTime()\n            : prevField.value;\n\n        if (comparableValue !== comparablePrevValue) {\n            onChange(value);\n        }\n    }\n\n    render() {\n        const { component = 'input', field, render } = this.props;\n\n        if (render) {\n            return render(this.props);\n        }\n\n        if (typeof component === 'string') {\n            return createElement(component, field);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        return createElement(component as any, this.props);\n    }\n}\n\nconst InnerField: FunctionComponent<InnerFieldProps> = memo(\n    ({ additionalClassName, component, field, form, onChange, render, testId }) => {\n        const input = useMemo(\n            () => (\n                <InnerFieldInput\n                    component={component}\n                    field={field}\n                    form={form}\n                    meta={form.getFieldMeta(field.name)}\n                    onChange={onChange}\n                    render={render}\n                />\n            ),\n            [field, form, onChange, component, render],\n        );\n\n        return (\n            <FormFieldContainer\n                additionalClassName={additionalClassName}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                hasError={getIn(form.errors, field.name)}\n                testId={testId}\n            >\n                {input}\n            </FormFieldContainer>\n        );\n    },\n    (\n        { form: prevForm, field: prevField, ...prevProps },\n        { form: nextForm, field: nextField, ...nextProps },\n    ) =>\n        shallowEqual(prevProps, nextProps) &&\n        shallowEqual(prevForm, nextForm) &&\n        shallowEqual(prevField, nextField),\n);\n\nconst BasicFormField: FunctionComponent<BasicFormFieldProps> = ({\n    additionalClassName,\n    className,\n    component,\n    render,\n    testId,\n    onChange,\n    ...rest\n}) => {\n    const renderInnerField = useCallback(\n        (props: FieldProps) => (\n            <InnerField\n                {...props}\n                additionalClassName={additionalClassName}\n                className={className}\n                component={component}\n                onChange={onChange}\n                render={render}\n                testId={testId}\n            />\n        ),\n        [additionalClassName, className, component, render, testId, onChange],\n    );\n\n    return <Field {...rest}>{renderInnerField}</Field>;\n};\n\nexport default memo(BasicFormField);\n"],"names":["children","className","hidden","testId","rest","height","viewBox","width","xmlns","d","forwardRef","ref","additionalClassName","appearFocused","type","memo","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","useContext","AccordionContext","A","onToggle","isSelected","transitionEndListener","useCallback","node","done","addEventListener","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","id","props","Input","checked","Label","htmlFor","isDisabled","value","content","htmlId","kebabCase","label","Checklist","C","name","renderInput","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","render","legend","errorId","renderMessage","message","role","Consumer","labelContent","footer","input","renderField","Boolean","createContext","noop","DynamicFormFieldType","onSelectedAll","onSelectedNone","handleSelectAllClick","event","preventDefault","handleSelectNoneClick","TranslatedString","href","onClick","MultiCheckboxFormField","form","values","errors","options","push","remove","handleSelectAll","checkedValues","difference","map","forEach","val","handleSelectNone","handleInputChange","target","indexOf","FormFieldContainer","hasError","length","DynamicInput","fieldType","CHECKBOX","FormFieldError","renderProps","pick","secret","fieldLabel","required","max","min","maxLength","inputDateFormat","parentFieldName","placeholder","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","useMemo","dynamicFormFieldType","NUMBER","includes","TELEPHONE","PASSWORD","TEXT","autoComplete","undefined","items","helperLabel","rows","FormField","withIconContainer","AlertType","icon","describedBy","useId","Info","Error","Success","Warning","renderDefaultIcon","withDate","isFloatingLabelEnabled","date","inputFormat","handleDateChange","dateValue","DROPDOWM","optionValue","key","RADIO","RadioInput","CheckboxInput","Array","isArray","DATE","calendarClassName","dateFormat","maxDate","Date","minDate","placeholderText","toUpperCase","popperClassName","selected","isDate","MULTILINE","TextInput","defaultSelectedItemId","onSelect","useState","selectedItemId","setSelectedItemId","handleToggleItem","getContextValue","newSelectedItemId","Provider","ChecklistContext","connectFormik","setFieldValue","useEffect","handleSelect","contextValue","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","isSubmitted","state","shouldShow","handleShow","setState","handleHide","this","placement","tooltip","onBlur","onFocus","onMouseEnter","onMouseLeave","modifiers","enabled","style","defaultProps","Component","componentDidUpdate","prevField","getTime","component","createElement","InnerField","InnerFieldInput","meta","getFieldMeta","prevForm","nextForm","nextField","renderInnerField"],"sourceRoot":""}