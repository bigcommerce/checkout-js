{"version":3,"file":"order-summary-20865131.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/order/OrderSummaryHeader.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/CertificateSelect.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/services/LambdaService.ts","webpack://checkout/./packages/core/src/app/avalara-certificates/CreateCertificate.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummary.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst OrderSummaryHeader: FunctionComponent = ({ children }) => (\n    <header className=\"cart-header\">\n        <h3 className=\"cart-title optimizedCheckout-headingSecondary\">\n            <TranslatedString id=\"cart.cart_heading\" />\n        </h3>\n        {children}\n    </header>\n);\n\nexport default OrderSummaryHeader;\n","import React, { useEffect, useState } from 'react';\nimport { Certificate } from './interfaces/Certificate';\nimport { fetchCertificates } from './services/LambdaService';\ninterface CertificateSelectProps {\n    onSelect: (certificate: string) => void;\n}\n\n\nconst CertificateSelect: React.FC<CertificateSelectProps> = ({onSelect }) => {\n    const [certificates, setCertificates] = useState<Certificate[]>([]);\n    const [selectedCertificate, setSelectedCertificate] = useState<string>('');\n\n    const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedCertificate(e.target.value);\n        onSelect(e.target.value);\n    };\n    useEffect(() => {\n        const getCertificates = async () => {\n            try {\n                const data = await fetchCertificates();\n                setCertificates(data);\n                console.log(certificates);\n            } catch (error) {\n                console.error('Error loading certificates:', error);\n            }\n        };\n\n        getCertificates();\n    }, []);\n\n    return (\n        <div className=\"dynamic-form-field floating-form-field dynamic-form-field--countryCode\">\n            <div className=\"form-field\">\n                <div className=\"floating-select-chevron\">\n                    <div className=\"icon\">\n                        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"></path>\n                        </svg>\n                    </div>\n                </div>\n                <select\n                    aria-labelledby=\"certificateSelect-label certificateSelect-field-error-message\"\n                    className=\"floating-select form-select optimizedCheckout-form-select\"\n                    data-test=\"certificateSelect-select\"\n                    id=\"certificateSelect\"\n                    name=\"certificateSelect\"\n                    value={selectedCertificate}\n                    onChange={handleChange}\n                >\n                    <option value=\"\">Select a certificate</option>\n                        {certificates.map(certificate => (\n                            <option key={certificate.id} value={certificate.id}>\n                                {certificate.id} - {certificate.validatedExemptionReason.name} - {certificate.ecmStatus}\n                            </option>\n                        ))}\n                </select>\n                <label htmlFor=\"certificateSelect\" id=\"certificateSelect-label\" className=\"floating-label form-label optimizedCheckout-form-label\">\n                    Certificate\n                </label>\n            </div>\n        </div>\n    );\n};\n\nexport default CertificateSelect;\n","import axios from 'axios';\nconst API_URL = 'https://yx1041xohb.execute-api.us-east-2.amazonaws.com/Prod/query';\n\nexport const fetchToken = async (): Promise<string | null> => {\n    try {\n        const response = await fetch('/customer/current.jwt?app_client_id=bzhkzdt0f7vrrg92o4iym8rxvd872qj', {\n            method: 'GET',\n            headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n        });\n\n        const data = await response.json();\n        return data.token;\n    } catch (error) {\n        console.error('Error fetching token:', error);\n        return null;\n    }\n};\nexport const getHeaders = (token: string) => {\n    return {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'X-Current-Customer': token,\n    };\n};\n\nexport const fetchCertificates = async () => {\n    try {\n        const token = await fetchToken();\n        if (!token) {\n            throw new Error('Token not available');\n        }\n        const headers = getHeaders(token);\n        const response = await axios.get(API_URL, { headers });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching certificates:', error);\n        return [];\n    }\n};\n","import React, { useState } from 'react';\nimport { withCheckout } from '../checkout';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport CertificateSelect from './CertificateSelect';\n\ninterface Customer {\n    id: number;\n    email: string;\n    isGuest: boolean;\n}\n\ninterface CreateCertificateProps {\n    customer: Customer;\n}\n\nconst CreateCertificate: React.FC<CreateCertificateProps> = ({ customer }) => {\n    const [selectedCertificate, setSelectedCertificate] = useState<string>('');\n\n    const handleSelect = (certificate: string) => {\n        setSelectedCertificate(certificate);\n        console.log('Selected Certificate:', certificate);\n    };\n\n    return !customer.isGuest ? (\n        <>\n            <a href={`/certificates`} target=\"_blank\" rel=\"noopener noreferrer\">\n                Use Tax/ Exempt Certificate\n            </a>\n            <CertificateSelect onSelect={handleSelect} />\n            {selectedCertificate && <p>Selected Certificate ID: {selectedCertificate}</p>}\n        </>\n    ) : null;\n};\n\ninterface WithCheckoutCustomerInfoProps {\n    email: string;\n    customer: Customer;\n}\n\nfunction mapToWithCheckoutCustomerInfoProps({\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutCustomerInfoProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n\n    if (!billingAddress || !checkout || !customer) {\n        return null;\n    }\n\n    return {\n        email: billingAddress.email || customer.email,\n        customer,\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerInfoProps)(CreateCertificate);\n","import {\n    ExtensionRegion,\n    LineItemMap,\n    ShopperCurrency,\n    StoreCurrency,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode, useEffect, useMemo } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport OrderSummaryHeader from './OrderSummaryHeader';\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummaryPrice from './OrderSummaryPrice';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\nimport removeBundledItems from './removeBundledItems';\nimport { CreateCertificate } from '../avalara-certificates';\n\nexport interface OrderSummaryProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrency;\n    additionalLineItems?: ReactNode;\n}\n\nconst OrderSummary: FunctionComponent<OrderSummaryProps & OrderSummarySubtotalsProps> = ({\n    isTaxIncluded,\n    taxes,\n    storeCurrency,\n    shopperCurrency,\n    headerLink,\n    additionalLineItems,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isSummaryLastItemAfterExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.SummaryLastItemAfter),\n    );\n    const nonBundledLineItems = useMemo(() => removeBundledItems(lineItems), [lineItems]);\n    const displayInclusiveTax = isTaxIncluded && taxes && taxes.length > 0;\n\n    useEffect(() => {\n        if (isSummaryLastItemAfterExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.SummaryLastItemAfter,\n                ExtensionRegion.SummaryLastItemAfter,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.SummaryLastItemAfter);\n            };\n        }\n    }, [extensionService, isSummaryLastItemAfterExtensionRegionEnabled]);\n\n    return (\n        <article className=\"cart optimizedCheckout-orderSummary\" data-test=\"cart\">\n            <OrderSummaryHeader>{headerLink}</OrderSummaryHeader>\n\n            <OrderSummarySection>\n                <OrderSummaryItems displayLineItemsCount items={nonBundledLineItems} />\n            </OrderSummarySection>\n\n            {isSummaryLastItemAfterExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.SummaryLastItemAfter} />\n            )}\n\n            <OrderSummarySection>\n                <OrderSummarySubtotals isTaxIncluded={isTaxIncluded} taxes={taxes} {...orderSummarySubtotalsProps} />\n                {additionalLineItems}\n            </OrderSummarySection>\n            <OrderSummarySection>\n                <CreateCertificate/>\n            </OrderSummarySection>\n\n            <OrderSummarySection>\n                <OrderSummaryTotal\n                    orderAmount={total}\n                    shopperCurrencyCode={shopperCurrency.code}\n                    storeCurrencyCode={storeCurrency.code}\n                />\n            </OrderSummarySection>\n\n            {displayInclusiveTax && <OrderSummarySection>\n                <h5\n                    className=\"cart-taxItem cart-taxItem--subtotal optimizedCheckout-contentPrimary\"\n                    data-test=\"tax-text\"\n                >\n                    <TranslatedString\n                        id=\"tax.inclusive_label\"\n                    />\n                </h5>\n                {(taxes || []).map((tax, index) => (\n                    <OrderSummaryPrice\n                        amount={tax.amount}\n                        key={index}\n                        label={tax.name}\n                        testId=\"cart-taxes\"\n                    />\n                ))}\n            </OrderSummarySection>}\n        </article>\n    );\n};\n\nexport default OrderSummary;\n"],"names":["children","className","TranslatedString","id","onSelect","useState","certificates","setCertificates","selectedCertificate","setSelectedCertificate","useEffect","fetch","method","headers","Accept","json","token","console","error","Error","getHeaders","axios","data","log","height","viewBox","width","xmlns","d","name","value","onChange","e","target","map","certificate","key","validatedExemptionReason","ecmStatus","htmlFor","withCheckout","getBillingAddress","getCheckout","getCustomer","billingAddress","checkout","customer","email","isGuest","href","rel","isTaxIncluded","taxes","storeCurrency","shopperCurrency","headerLink","additionalLineItems","lineItems","total","orderSummarySubtotalsProps","useExtensions","extensionService","isExtensionEnabled","isSummaryLastItemAfterExtensionRegionEnabled","Boolean","isRegionEnabled","nonBundledLineItems","useMemo","removeBundledItems","displayInclusiveTax","length","renderExtension","ExtensionRegionContainer","removeListeners","OrderSummarySection","OrderSummaryItems","displayLineItemsCount","items","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","code","storeCurrencyCode","tax","index","OrderSummaryPrice","amount","label","testId"],"sourceRoot":""}