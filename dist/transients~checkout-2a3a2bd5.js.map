{"version":3,"sources":["webpack://checkout/../../../../src/store/v2/mappers/index.js","webpack://checkout/../../src/client/default-config.js","webpack://checkout/../src/index.ts","webpack://checkout/../src/timeout.ts","webpack://checkout/../../../src/common/utils/is-nil.js","webpack://checkout/../../../src/common/utils/omit-property.js","webpack://checkout/../../../src/payment/payment-method-mappers/payment-method-id-mapper.js","webpack://checkout/../../src/payment/url-helper.js","webpack://checkout/../../../src/common/http-request/request-sender.js","webpack://checkout/../../../src/common/http-request/method-types.js","webpack://checkout/../src/request-sender.ts","webpack://checkout/../../../src/common/utils/index.js","webpack://checkout/../src/data-store.ts","webpack://checkout/../src/deep-freeze.ts","webpack://checkout/../src/combine-reducers.ts","webpack://checkout/../src/create-action.ts","webpack://checkout/../src/script-loader.ts","webpack://checkout/../src/create-script-loader.ts","webpack://checkout/../src/form-poster.ts","webpack://checkout/../../src/payment/payment-types.js","webpack://checkout/../../../src/common/utils/is-object.js","webpack://checkout/../../../src/common/http-request/content-types.js","webpack://checkout/webpack://checkoutKit/webpack/bootstrap","webpack://checkout/webpack://checkoutKit/external \"tslib\"","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkout/webpack://checkoutKit/external \"lodash\"","webpack://checkout/webpack://checkoutKit/external \"rxjs\"","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-actions.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/memoize\"","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/missing-data-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-actions.ts","webpack://checkout/webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-actions.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/order-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-actions.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-actions.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-actions.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout-events.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/standard-error.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/set-prototype-of.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/request-error.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-actions.ts","webpack://checkout/webpack://checkoutKit/src/config/config-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-plain-object.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-actions.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-actions.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkout/webpack://checkoutKit/src/payment/payment-status-types.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkout/webpack://checkoutKit/src/common/http-request/content-type.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/invalid-argument-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-types.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/is-iframe-event.ts","webpack://checkout/webpack://checkoutKit/external \"shallowequal\"","webpack://checkout/webpack://checkoutKit/src/common/utility/is-equal.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkout/webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkout/webpack://checkoutKit/external \"reselect\"","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-poster.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-initialized-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/with-memoized-combiner.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-listener.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-default-includes.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-items.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/internal-api-headers.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-item.ts","webpack://checkout/webpack://checkoutKit/src/common/error/throw-error-action.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/amount-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/url/parse-url.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cache-action.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/is-action-options.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cachable-action-decorator.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/bind-decorator.ts","webpack://checkout/webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkout/webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-deep.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkout/webpack://checkoutKit/src/shipping/map-to-internal-shipping-option.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-private.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unrecoverable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-internal-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-payment-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/clear-error-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-set.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-state.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/array-replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-merge.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-state.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-reducer.ts","webpack://checkout/webpack://checkoutKit/src/config/config-state.ts","webpack://checkout/webpack://checkoutKit/src/config/config-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-state.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/order/order-state.ts","webpack://checkout/webpack://checkoutKit/src/order/order-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/merge-or-push.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-reducer.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/create-freeze-proxy.ts","webpack://checkout/webpack://checkoutKit/src/address/is-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-internal-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-selector.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-selector.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-selector.ts","webpack://checkout/webpack://checkoutKit/src/config/config-selector.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-selector.ts","webpack://checkout/webpack://checkoutKit/src/form/form-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/order/order-selector.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-action-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/error/create-request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/errors/checkout-not-available-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-coupon.ts","webpack://checkout/webpack://checkoutKit/src/address/map-to-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/billing/is-billing-address-like.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/selector-decorator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/is-element-id.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/set-unique-element-id.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/storage/browser-storage.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/loading-indicator.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embed-checkout.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-maps.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-resolver.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkout/webpack://checkoutKit/external \"messageformat\"","webpack://checkout/webpack://checkoutKit/src/common/error/errors/timeout-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/join-includes.ts","webpack://checkout/webpack://checkoutKit/src/config/config-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/config/config-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/registry/registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkout/webpack://checkoutKit/src/customer/map-to-internal-customer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-gift-certificate.ts","webpack://checkout/webpack://checkoutKit/src/order/map-to-internal-order.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/common/iframe/iframe-resizer.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/get-environment.ts","webpack://checkout/webpack://checkoutKit/src/common/log/create-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/console-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/noop-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/get-default-logger.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-type.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-implemented-error.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/default/default-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/square/square-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/mutation-observer.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/order/errors/order-finalization-not-required-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-comparator.ts","webpack://checkout/webpack://checkoutKit/src/cart/errors/cart-changed-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-validator.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-vaulted-instrument.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-transformer.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/adyenv2/adyenv2.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-argument-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/order/order-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-cancelled-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirmJs.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/address/is-internal-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-private.ts","webpack://checkout/webpack://checkoutKit/src/address/map-from-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/overlay/overlay.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cancellable-promise.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-failed-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-credit-card-like.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-form.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unsupported-browser-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-declined-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/create-data-store-projection.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/is-future.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/add-minutes.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-response-transformer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/clone-result.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-shallow-equal-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-message-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/to-single-line.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service-error-transformer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/create-spam-protection.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-client.ts","webpack://checkout/webpack://checkoutKit/src/customer/create-customer-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/shipping/create-shipping-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/custom-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/locale/language-service.ts","webpack://checkout/webpack://checkoutKit/src/locale/create-language-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-formatter.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/create-currency-service.ts","webpack://checkout/webpack://checkoutKit/src/index.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-cart.ts","webpack://checkout/webpack://checkoutKit/src/promotion/map-to-discount-notifications.ts","webpack://checkout/webpack://checkoutKit/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-action-creator.ts","webpack://checkout/../src/create-request-sender.ts","webpack://checkout/../src/payload-transformer.ts","webpack://checkout/../src/to-form-url-encoded.ts","webpack://checkout/../src/request-factory.ts","webpack://checkout/./node_modules/@bigcommerce/request-sender/node_modules/query-string/index.js","webpack://checkout/../src/is-promise.ts","webpack://checkout/../src/create-timeout.ts","webpack://checkout/../src/is-observable-action-like.ts","webpack://checkout/../src/noop-action-transformer.ts","webpack://checkout/../src/noop-state-transformer.ts","webpack://checkout/../src/compose-reducers.ts","webpack://checkout/../src/create-data-store.ts","webpack://checkout/../src/create-error-action.ts","webpack://checkout/../src/memoize.ts","webpack://checkout/../src/cache-key-resolver.ts","webpack://checkout/../src/cache-key-maps.ts","webpack://checkout/../src/get-script-loader.ts","webpack://checkout/../src/create-form-poster.ts","webpack://checkout/../src/form-builder.ts","webpack://checkout/../src/url-utils.ts","webpack://checkout/../src/index.js","webpack://checkout/../../src/client/client.js","webpack://checkout/../../src/payment/offsite-payment-initializer.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/payload-mapper.js","webpack://checkout/../../../src/common/utils/includes.js","webpack://checkout/../../../src/common/utils/omit-emptystring-and-nil.js","webpack://checkout/../../../src/common/utils/is-emptystring-or-nil.js","webpack://checkout/../../../src/common/utils/is-empty-string.js","webpack://checkout/../../../src/common/utils/omit-nil.js","webpack://checkout/../../../src/common/utils/to-number.js","webpack://checkout/../../../src/common/utils/to-snake-case.js","webpack://checkout/../../../src/common/utils/to-string.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/address-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/customer-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/meta-mapper.js","webpack://checkout/../../src/payment/payment-method-types.js","webpack://checkout/../../src/payment/payment-method-ids.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/store-mapper.js","webpack://checkout/../../src/payment/payment-submitter.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payload-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/customer-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/order-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payment-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/store-mapper.js","webpack://checkout/../../../src/common/http-request/default-options.js","webpack://checkout/../../../src/common/http-request/payload-transformer.js","webpack://checkout/../../../src/common/http-request/request-factory.js","webpack://checkout/../../src/payment/client-token-generator.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/client-token-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/cart-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/gateway-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/quote-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/store-mapper.js","webpack://checkout/../../src/store/store-request-sender.js","webpack://checkout/../../src/store/url-helper.js"],"names":["mapToInstrumentPayload","data","arguments","length","undefined","providerName","default_instrument","defaultInstrument","provider","_utils","omitNil","name","credit_card","_ref2","_ref2$creditCard","creditCard","threeDSecure","cardholder_name","cardholderName","number","month","year","verification_code","verificationCode","issue_month","issueMonth","issue_year","issueYear","issue_number","issueNumber","track_data","trackData","is_manual_entry","isManualEntry","icc_data","iccData","fallback_reason","fallbackReason","is_contactless","isContactless","encrypted_pin_cryptogram","encryptedPinCryptogram","encrypted_pin_ksn","encryptedPinKsn","three_d_secure","billing_address","mapToAddress","billingAddress","mapToTrustedShippingAddressPayload","shipping_address","shippingAddress","mapToHeaders","Authorization","authToken","__webpack_require__","code","address","state","provinceCode","province","address_line_1","addressLine1","address_line_2","addressLine2","city","company","country_code","countryCode","email","first_name","firstName","last_name","lastName","phone","postal_code","postCode","host","create_request_sender_1","exports","createRequestSender","default","create_timeout_1","createTimeout","request_sender_1","RequestSender","timeout_1","Timeout","_delay","_this","this","_resolve","_promise","Promise","resolve","prototype","onComplete","callback","then","complete","_timeoutToken","window","clearTimeout","start","setTimeout","value","object","predicateFn","_isObject2","Object","keys","reduce","result","key","_isObject","_paymentMethodTypes","_paymentMethodIds","PaymentMethodIdMapper","paymentMethod","id","method","MULTI_OPTION","gateway","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISACHECKOUT","BRAINTREE_GOOGLEPAY","isBraintreePaymentMethod","BRAINTREE","UrlHelper","config","_classCallCheck","_methodTypes","requestFactory","payloadTransformer","RequestFactory","create","PayloadTransformer","url","options","mergedOptions","_deepAssign2","DEFAULT_OPTIONS","xhr","createRequest","error","response","fromResponse","isSuccessfulRequest","payload","toRequest","headers","send","_objectAssign2","POST","sendRequest","status","GET","DELETE","merge_1","tslib_1","__importDefault","is_promise_1","_requestFactory","_payloadTransformer","_cookie","_options","requestOptions","_mergeDefaultOptions","request","_prependHost","reject","requestHandler","toResponse","onload","onerror","onabort","ontimeout","timeout","abort","toRequestBody","get","__assign","post","put","patch","delete","defaultOptions","credentials","Accept","csrfToken","body","test","replace","lodash_1","rxjs_1","operators_1","shallowEqual","deep_freeze_1","is_observable_action_like_1","noop_action_transformer_1","noop_state_transformer_1","DataStore","reducer","initialState","_reducer","actionTransformer","equalityCheck","shouldWarnMutation","stateTransformer","_state$","BehaviorSubject","_notification$","Subject","_dispatchers","_dispatchQueue$","_errors","pipe","mergeMap","dispatcher$","concatMap","action$","filter","action","type","scan","states","_transformStates","transformedState","getValue","distinctUntilChanged","_a","_b","stateA","stateB","map","subscribe","dispatch","_dispatchObservableAction","_dispatchThunkAction","_dispatchAction","getState","notifyState","next","subscriber","args","_i","filters","state$","every","filterFn","initial","skip","subscriptions","forEach","subscription","unsubscribe","newState","previousValue","_getDispatchError","meta","queueId","throwError","of","error$","transformedAction$","from","merge","_getDispatcher","index","first","catchError","Error","tap","thunkAction","defer","deepFreeze","equalityCheck_1","_c","previousValue_1","isFrozen","Array","isArray","isPlainObject","freeze","getOwnPropertyNames","hasOwnProperty","TypeError","reducers","currentState","assign","omitBy","ScriptLoader","_scripts","loadScript","src","script","document","createElement","event","onreadystatechange","async","appendChild","script_loader_1","create_form_poster_1","createFormPoster","form_poster_1","FormPoster","url_utils_1","_formBuilder","postForm","form","build","addEventListener","handleUnload","removeEventListener","submit","removeChild","isAbsoluteUrl","joinPaths","API","HOSTED","OFFLINE","_typeof","APPLICATION_JSON","memoize_1","memoize","memoizeOne","installedModules","moduleId","module","i","l","modules","call","m","c","d","getter","o","defineProperty","enumerable","r","Symbol","toStringTag","t","mode","__esModule","ns","bind","n","property","p","s","require","ConsignmentActionType","e","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","LoadShippingOptionsRequested","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","CustomerStrategyActionType","SignInFailed","SignInRequested","SignInSucceeded","SignOutFailed","SignOutRequested","SignOutSucceeded","InitializeFailed","InitializeRequested","InitializeSucceeded","DeinitializeFailed","DeinitializeRequested","DeinitializeSucceeded","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","PaymentStrategyActionType","ExecuteFailed","ExecuteRequested","ExecuteSucceeded","FinalizeFailed","FinalizeRequested","FinalizeSucceeded","ShippingStrategyActionType","UpdateAddressFailed","UpdateAddressRequested","UpdateAddressSucceeded","SelectOptionFailed","SelectOptionRequested","SelectOptionSucceeded","MissingDataErrorType","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingPaymentToken","MissingShippingAddress","MissingSpamProtectionToken","a","subtype","__extends","CheckoutActionType","LoadCheckoutRequested","LoadCheckoutSucceeded","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","CouponActionType","ApplyCouponRequested","ApplyCouponSucceeded","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponSucceeded","RemoveCouponFailed","BillingAddressActionType","UpdateBillingAddressRequested","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestSucceeded","ContinueAsGuestFailed","OrderActionType","LoadOrderRequested","LoadOrderSucceeded","LoadOrderFailed","LoadOrderPaymentsRequested","LoadOrderPaymentsSucceeded","LoadOrderPaymentsFailed","SubmitOrderRequested","SubmitOrderSucceeded","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderSucceeded","FinalizeOrderFailed","PaymentMethodActionType","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","LoadPaymentMethodsRequested","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","CheckoutButtonActionType","InitializeButtonFailed","InitializeButtonRequested","InitializeButtonSucceeded","DeinitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","GiftCertificateActionType","ApplyGiftCertificateRequested","ApplyGiftCertificateSucceeded","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateSucceeded","RemoveGiftCertificateFailed","InstrumentActionType","LoadInstrumentsRequested","LoadInstrumentsSucceeded","LoadInstrumentsFailed","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","EmbeddedCheckoutEventType","CheckoutComplete","CheckoutError","CheckoutLoaded","FrameError","FrameLoaded","SignedOut","message","setPrototypeOf","__proto__","captureStackTrace","stack","RemoteCheckoutActionType","InitializeRemoteBillingRequested","InitializeRemoteBillingSucceeded","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingSucceeded","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsSucceeded","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","UpdateRemoteCheckout","DEFAULT_RESPONSE","errors","StoreCreditActionType","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","ConfigActionType","LoadConfigRequested","LoadConfigSucceeded","LoadConfigFailed","CountryActionType","LoadCountriesRequested","LoadCountriesSucceeded","LoadCountriesFailed","ShippingCountryActionType","LoadShippingCountriesRequested","LoadShippingCountriesSucceeded","LoadShippingCountriesFailed","ACKNOWLEDGE","FINALIZE","ContentType","Json","JsonV1","PaymentActionType","SubmitPaymentRequested","SubmitPaymentSucceeded","SubmitPaymentFailed","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","isIframeEvent","isEqual","objectA","objectB","Date","getTime","RegExp","toString","keyFilter","keysA","keysB","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","CustomerActionType","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","SpamProtectionActionType","Completed","SubmitFailed","NotInitializedErrorType","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","withMemoizedCombiner","creator","combiner","pop","apply","__spreadArrays","combinerArgs","ErrorActionType","ClearError","_requestSender","loadPaymentMethods","Observable","observer","createAction","deviceSessionId","sessionHash","catch","createErrorAction","loadPaymentMethod","methodId","__decorate","X-API-INTERNAL","EmbeddedContentEventType","StyleConfigured","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","mapToInternalLineItems","itemMap","decimalPlaces","idKey","item","amountTransformer","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","INTERNAL_USE_ONLY","CheckoutIncludes","AvailableShippingOptions","PhysicalItemsCategoryNames","DigitalItemsCategoryNames","_scriptLoader","_window","loadClient","braintree","client","load3DS","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","b","_client","authorization","getPaypal","_paypal","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","throwErrorAction","concat","_decimalPlaces","Math","round","pow","parseUrl","anchor","href","port","hostname","hash","protocol","pathname","search","cacheAction","fn","shareReplay","store","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","u","lastArg","instanceMethods","set","bindDecorator","target","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","boundMethod","omitDeep","predicate","transform","_checkoutRequestSender","_configActionCreator","loadCheckout","loadConfig","loadDefaultCheckout","__awaiter","context","getContextConfig","checkoutId","sent","updateCheckout","checkout","getCheckout","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","params","include","updateAddress","_getConsignmentRequestBody","createConsignments","consignmentId","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","DEFAULT_PARAMS","join","__rest","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","joinErrors","_factoryMethods","register","detail","title","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","g","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","I","combineReducers","dataReducer","composeReducers","errorsReducer","statusesReducer","S","O","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","j","objectMerge","currentObject","newObject","T","cartReducer","N","U","q","D","R","z","x","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","V","K","H","B","F","containerId","G","Y","Q","configReducer","X","$","ee","Z","te","couponReducer","re","ie","oe","coupons","ae","giftCertificateReducer","ce","ue","de","giftCertificates","pe","customerReducer","le","customer","me","customerStrategyReducer","_e","ye","be","fe","isInitialized","initializeError","initializeMethodId","deinitializeError","deinitializeMethodId","signInError","signInMethodId","signOutError","signOutMethodId","widgetInteractionError","widgetInteractionMethodId","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","ve","countryReducer","Se","Ie","Ae","Ce","we","orderReducer","je","ke","metaReducer","Re","omit","callbackUrl","order","orderToken","token","payment","Ee","paymentReducer","Te","ze","Ne","paymentMethodReducer","Ue","xe","Fe","Be","Le","array","defaultPredicate","pick","findIndex","pickBy","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","Ye","paymentStrategyReducer","Ve","Ke","He","Ge","executeError","executeMethodId","finalizeError","finalizeMethodId","isExecuting","isFinalizing","Qe","instrumentReducer","Xe","et","$e","tt","Ze","vaultedInstruments","instrument","bigpayToken","instrumentId","deleteError","failedInstrument","isDeleting","deletingInstrument","rt","remoteCheckoutReducer","ot","nt","billing","shipping","st","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","ut","dt","pt","at","lt","shippingCountryReducer","mt","gt","_t","ht","bt","shippingStrategyReducer","vt","Ot","St","yt","updateAddressError","updateAddressMethodId","selectOptionError","selectOptionMethodId","isUpdatingAddress","isSelectingOption","At","storeCreditReducer","Et","Pt","It","jt","checkoutReducer","kt","Rt","zt","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","charAt","normalize","address1","address2","stateOrProvince","postalCode","customFields","identity","Bt","createInternalCheckoutSelectorsFactory","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","Tt","continueAsGuestError","loadError","Dt","createCartSelector","createCheckoutButtonSelector","some","values","createConfigSelector","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","createCountrySelector","getCountries","countries","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","getDeleteError","createFormSelector","getShippingAddressFields","selectedCountry","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","Boolean","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createConsignmentSelector","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isCreating","isAssigningItems","C","createConsignmentSelectorFactory","createCheckoutSelector","h","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","max","outstandingBalance","createOrderSelector","getOrder","getOrderMeta","createPaymentSelector","payments","providerId","providerType","qt","internalPayment","step","redirectUrl","nonce","Ut","createStoreCreditSelector","applyError","checkoutButton","customerStrategies","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","v","f","y","createCheckoutStore","requestErrorFactory","factory","createInternalCheckoutSelectors","createDataStore","couponTypes","mapToInternalCoupon","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","stateOrProvinceCode","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","slice","container","uniqueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","empty","w","A","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","MASTERPASS","PAYPALEXPRESS","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","payment_type","device_data","JSON","stringify","_mapToLegacyShippingAddress","_mapToLegacyBillingAddress","details","recipientName","phone_number","line1","line2","W","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","getElementById","googlePayButton","createButton","_handleWalletButtonClick","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","merchantId","clientId","actions","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","requestSender","formPoster","E","registry","k","scriptLoader","P","getScriptLoader","checkoutActionCreator","M","L","NotEmbeddableErrorType","_namespace","getItem","rawValue","withNamespace","parse","removeItem","getItemOnce","setItem","MissingContainer","MissingContent","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","onLoad","onFrameLoad","onSignOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","detach","iFrameResizer","close","contentWindow","styles","encodeURIComponent","visibility","EmbeddedCheckout","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","STORAGE_PREFIX","embedCheckout","loadingIndicator","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","noop","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","createSelector","joinIncludes","includes","uniq","_configRequestSender","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","customerId","isGuest","fullName","customerGroupName","customerGroup","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","keyBy","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","iframeResizer","setupContentWindowForIframeResizer","clearError","getEnvironment","process","isEnabled","_console","log","_logToConsole","messages","info","warn","debug","logger","console","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","signOut","widgetInteraction","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","userEmail","card_information","_getCardInformation","cardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","PaymentStrategyType","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","_customerRequestSender","signInCustomer","ne","switchMap","signOutCustomer","_remoteCheckoutActionCreator","amazonOptions","se","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","visaCheckoutOptions","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","_chasePayScriptLoader","chasepay","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","Accept-Language","loadOrder","submitOrder","finalizeOrder","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","Oe","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","spamProtectionToken","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","executeSpamProtection","execute","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","reset","error-callback","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","observe","attributeFilter","_loadPromise","_loadScript","initRecaptcha","grecaptcha","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","take","ADYENV2","AFFIRM","AFTERPAY","AMAZON","CREDIT_CARD","CYBERSOURCE","KLARNA","LEGACY","OFFSITE","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","SQUARE","STRIPEV3","NO_PAYMENT_DATA_REQUIRED","BRAINTREE_VISA_CHECKOUT","BRAINTREE_GOOGLE_PAY","CHASE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","ZIP","CONVERGE","_orderActionCreator","De","strategy","getByMethod","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","qe","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_paymentRequestSender","_paymentRequestTransformer","submitPayment","initializeOffsitePayment","_transformResponse","statusText","isVaultedInstrument","ThreeDS2ComponentType","ResultCode","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","vaultAccessToken","Je","quoteMeta","geoCountryCode","source","paymentMethodSelector","_getToken","_hasFactoryForMethod","_isLegacyMethod","clientSidePaymentProviders","paymentSettings","invalidFields","ThreeDS2DeviceFingerprint","ThreeDS2Challenge","AuthenticationFinished","Authorised","Cancelled","ChallengeShopper","IdentifyShopper","Pending","Received","RedirectShopper","Refused","OrderIncludes","_paymentActionCreator","_adyenV2ScriptLoader","_locale","adyenv2","_adyenv2","configuration","environment","originKey","paymentMethodsResponse","adyenCheckout","_adyenCheckout","adyenComponent","onChange","_updateStateContainer","mount","_adyenComponent","shouldSaveInstrument","paymentPayload","_getStateContainer","it","three_ds_result","result_code","_handle3DS2Fingerprint","_handle3DS2Challenge","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","unmount","_getAdyenV2PaymentInitializeOptions","_stateContainer","_getThreeDS2ChallengeWidgetSize","threeDS2Options","threeDS2ChallengeWidgetSize","resultObject","paymentMethodId","threeDS2Component","challengeToken","challengeData","challengePaymentPayload","payment_data","threeDS2Container","threeDS2ContainerId","fingerprintToken","fingerprintData","fingerprintPaymentPayload","isValid","_stylesheets","_loadStylesheet","AdyenCheckout","stylesheet","rel","DigitalItemsCategories","PhysicalItemsCategories","_affirmScriptLoader","publicKey","affirm","_affirm","_getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","Function","apikey","scriptURI","_getScriptURI","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","wt","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","handeTransition","propertyName","promise","cancellable","cancel","race","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","appendSessionId","processedPayment","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","endpoint","isCreditCardLike","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","tokenizedCard","_credit","braintreeOptions","_paymentStrategyActionCreator","visaInitOptions","_cardinalClient","prepare","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","Init","Complete","Confirm","SetupCompleted","Validated","Success","NoAction","Failure","CCA","Paypal","VisaCheckout","ApplePay","DiscoverWallet","BinProcess","Yes","No","ChasePayEventType","_sdk","_getClientSDK","off","ActionCode","ErrorNumber","ErrorDescription","setup","jwt","binNumber","Status","threeDSecureData","orderData","Payment","ExtendedData","SignatureVerification","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","StartCheckout","CompleteCheckout","CancelCheckout","CardBrand","DigitalWalletType","Qt","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","onCancel","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","Jt","_threeDSecureFlow","tn","_googlePayOptions","statusCode","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorization_token","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","an","orderPayload","_shouldSubmitFullPayload","_isPaymentAcknowledged","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","americanExpress","discover","discoverDiners","JCB","masterCard","unionPay","unknown","visa","squareGift","applePay","none","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","square","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","mn","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","publishableKey","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","orderActionCreator","paymentActionCreator","payloadWithToken","$t","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","Sn","onCheckout","openModal","externalId","On","Zip","ProjectionActionType","_instrumentRequestSender","loadInstruments","Pn","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","now","vaultAccessExpiry","newDate","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","_transformer","Mn","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","Dn","Nn","selectOption","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","Synchronize","cloneDeep","input","cloneDeepSafe","Gn","cloneResult","createShallowEqualSelector","Kn","createSelectorCreator","defaultMemoize","Hn","Jn","Zn","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","Bn","Vn","availableShippingOptions","xn","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","_messageCustomizer","trim","er","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","$n","_selectorsFactory","_storeProjection","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","CheckoutService","createCheckoutService","tr","paymentClient","createClient","setHost","bigpayBaseUrl","orderRequestSender","checkoutRequestSender","configActionCreator","spamProtection","createScriptLoader","Pe","MutationObserverFactory","spamProtectionActionCreator","Me","Rn","zn","paymentMethodActionCreator","remoteCheckoutRequestSender","J","remoteCheckoutActionCreator","ge","he","jn","kn","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","overlay","Mt","checkoutValidator","storeCreditActionCreator","We","paymentStrategyActionCreator","ct","ft","Ct","en","Gt","Vt","Kt","nn","rn","cn","un","dn","pn","hn","ln","gn","_n","sn","xt","Cn","vn","In","An","Xt","yn","bn","createPaymentStrategyRegistry","Tn","Ln","qn","consignmentRequestSender","consignmentActionCreator","Un","Fn","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","hr","_untargetedMessagePoster","_messageHandlers","postComplete","ar","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","pr","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","lr","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","or","parentWindow","sr","parentOrigin","cr","gr","_logger","_transformConfig","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","mr","compile","_transformData","output","defaultTranslations","_flattenObject","union","parentKey","resultKey","isObject","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","br","_storeConfig","_customerFormatter","yr","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","nr","rr","ir","fr","_r","Cr","ButtonType","ButtonColor","Long","Short","Default","Black","White","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","mapToInternalCart","promotions","notifications","promotion","banners","banner","placeholders","messageHtml","certificate","isShippingRequired","taxSubtotal","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","cookie","__importStar","payload_transformer_1","request_factory_1","to_form_url_encoded_1","JSON_CONTENT_TYPE_REGEXP","FORM_URLENCODED_CONTENT_TYPE_REGEXP","contentType","_getHeader","_parseResponseHeaders","getAllResponseHeaders","_parseResponseBody","responseText","rawHeaders","parts","shift","queryString","XMLHttpRequest","_configureRequest","_formatUrl","_configureRequestHeaders","withCredentials","setRequestHeader","strictUriEncode","objectAssign","decodeComponent","encode","opts","strict","extract","str","queryStart","formatter","arrayFormat","accumulator","exec","parserForArrayFormat","ret","val","keysSorter","obj","encoderForArrayFormat","val2","query","delay","data_store_1","combine_reducers_1","compose_reducers_1","create_action_1","create_data_store_1","create_error_action_1","flowRight","curryRight","lodash_memoize_1","shallowequal_1","cache_key_resolver_1","Map","memoized","cache_key_maps_1","CacheKeyResolver","isRootCacheKeyMap","create_script_loader_1","get_script_loader_1","instance","form_builder_1","formBuilder","FormBuilder","_createInput","pathA","pathB","path","removeLeadingSlash","Client","paymentSubmitter","offsitePaymentInitializer","clientTokenGenerator","storeRequestSender","clientConfig","DEFAULT_CONFIG","OffsitePaymentInitializer","PaymentSubmitter","ClientTokenGenerator","StoreRequestSender","generateClientToken","postShopperInstrument","_paymentTypes","urlHelper","payloadMapper","PayloadMapper","_data$paymentMethod","mapToPayload","getOffsitePaymentUrl","addressMapper","customerMapper","metaMapper","paymentMethodIdMapper","storeMapper","AddressMapper","CustomerMapper","MetaMapper","StoreMapper","_data$order","bc_auth_token","mapToId","notify_url","page_title","payment_method_id","reference_id","return_url","mapToBillingAddress","mapToCustomer","mapToMeta","mapToShippingAddress","mapToStore","_omitProperty2","isEmptyStringOrNil","_isEmptyString2","_isNil2","isNil","parseFloat","string","isNaN","addressKey","_omitNil","formattedAddressKey","toSnakeCase","_defineProperty","_data$customer","_data$quoteMeta","_data$store","customer_browser_info","navigator","userAgent","customer_email","customer_first_name","customer_geo_ip_country_code","customer_last_name","customer_locale","customer_name","customer_phone","customer_reference","meta_referrer","referrer","meta_source","meta_user_agent","store_hash","storeHash","store_id","getPaymentUrl","postRequest","orderMapper","paymentMapper","OrderMapper","PaymentMapper","mapToOrder","mapToPayment","customer_group","geo_ip_country_code","session_token","mapToCoupons","mapToItems","mapToShipping","totals","mapToOrderTotals","_ref2$order","_ref3","omitEmptyStringAndNil","state_code","street_1","street_2","_data$cart","itemData","variant_id","_data$order2","grand_total","tax","_data$orderMeta","_data$payment","device_info","device","deviceFingerprint","fingerprint_id","vault_payment_instrument","mapToBigPayToken","credit_card_token","credit_card_cryptogram","mapToCryptogram","mapToCreditCard","_data$payment2","account_name","toNumber","verification_value","customer_code","ccCustomerCode","_ref","credit_card_number_confirmation","payment_cryptogram","xid","account_mask","_contentTypes","parseResponseHeaders","getResponseHeader","_objectAssign3","setOptions","setHeaders","clientTokenMapper","ClientTokenMapper","getGenerateClientTokenUrl","mapToClientToken","cartMapper","gatewayMapper","quoteMapper","CartMapper","GatewayMapper","QuoteMapper","mapToCart","mapToGateway","quote","mapToQuote","currency_code","_data$cart2","integerTax","mapToType","_data$cart3","discount_total","shipping_total","surcharge_total","tax_total","ItemPhysicalEntity","ItemDigitalEntity","ItemGiftCertificateEntity","_paymentMethodIdMapper","mapToLocale","store_identity","mapToIdentity","urls","mapToUrls","language_code","_data$store2","_data$store3","cartLink","confirmation","orderConfirmationLink","home","shopPath","_mappers","getInstrumentsUrl","getTrustedShippingAddressUrl","getInstrumentByIdUrl"],"mappings":"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","file":"transients~checkout-2a3a2bd5.js","sourcesContent":["import { omitNil } from '../../../common/utils';\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.billingAddress\n * @param {CreditCard} data.creditCard\n * @param {boolean} data.defaultInstrument\n * @param {string} data.providerName\n * @return {Object}\n */\nexport function mapToInstrumentPayload(data = {}) {\n    const {\n        providerName,\n        defaultInstrument: default_instrument,\n    } = data;\n\n    const provider = omitNil({ name: providerName });\n\n    return omitNil({\n        provider,\n        credit_card: mapToCreditCard(data),\n        billing_address: mapToAddress(data.billingAddress),\n        default_instrument,\n    });\n}\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.shippingAddress\n * @return {Object}\n */\nexport function mapToTrustedShippingAddressPayload(data = {}) {\n    return omitNil({\n        shipping_address: mapToAddress(data.shippingAddress),\n    });\n}\n\n/**\n * @param {Object} data\n * @param {string} data.authToken\n * @return {Object}\n */\nexport function mapToHeaders({ authToken: Authorization } = {}) {\n    return omitNil({\n        Authorization,\n    });\n}\n\n/**\n * @param {AddressData} address\n * @return {Object}\n */\nfunction mapToAddress(address = {}) {\n    const state = mapToState(address.provinceCode, address.province);\n\n    return omitNil({\n        address_line_1: address.addressLine1,\n        address_line_2: address.addressLine2,\n        city: address.city,\n        company: address.company,\n        country_code: address.countryCode,\n        email: address.email,\n        first_name: address.firstName,\n        last_name: address.lastName,\n        phone: address.phone,\n        postal_code: address.postCode,\n        state,\n    });\n}\n\n/**\n * @param {string} code\n * @param {string} name\n * @return {Object}\n */\nfunction mapToState(code, name) {\n    return omitNil({\n        code,\n        name,\n    });\n}\n\n/**\n * @param {Object} data\n * @param {CreditCard} data.creditCard\n * @return {Object}\n */\nfunction mapToCreditCard({ creditCard = {} }) {\n    const threeDSecure = omitNil(creditCard.threeDSecure);\n\n    return omitNil({\n        cardholder_name: creditCard.cardholderName,\n        number: creditCard.number,\n        month: creditCard.month,\n        year: creditCard.year,\n        verification_code: creditCard.verificationCode,\n        issue_month: creditCard.issueMonth,\n        issue_year: creditCard.issueYear,\n        issue_number: creditCard.issueNumber,\n        track_data: creditCard.trackData,\n        is_manual_entry: creditCard.isManualEntry,\n        icc_data: creditCard.iccData,\n        fallback_reason: creditCard.fallbackReason,\n        is_contactless: creditCard.isContactless,\n        encrypted_pin_cryptogram: creditCard.encryptedPinCryptogram,\n        encrypted_pin_ksn: creditCard.encryptedPinKsn,\n        three_d_secure: threeDSecure,\n    });\n}\n","const DEFAULT_CONFIG = {\n    host: '',\n};\n\nexport default DEFAULT_CONFIG;\n","export { default as ScriptLoader } from './script-loader';\nexport { default as createScriptLoader } from './create-script-loader';\nexport { default as getScriptLoader } from './get-script-loader';\n","export default class Timeout {\n    private _promise: Promise<any>;\n    private _resolve: () => void;\n    private _timeoutToken?: number;\n\n    constructor(\n        private _delay?: number\n    ) {\n        // tslint:disable-next-line:no-empty\n        this._resolve = () => {};\n\n        this._promise = new Promise(resolve => {\n            this._resolve = resolve;\n        });\n    }\n\n    onComplete(callback: () => void): void {\n        this._promise.then(callback);\n    }\n\n    complete(): void {\n        this._resolve();\n\n        if (this._timeoutToken) {\n            window.clearTimeout(this._timeoutToken);\n        }\n    }\n\n    start(): void {\n        if (this._delay) {\n            this._timeoutToken = window.setTimeout(() => this.complete(), this._delay);\n        }\n    }\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isNil(value) {\n    if (value === null || value === undefined) {\n        return true;\n    }\n\n    return false;\n}\n","import isObject from './is-object';\n\n/**\n * @param {Object} object\n * @param {Function} predicateFn\n * @returns {Object}\n */\nexport default function omitProperty(object, predicateFn) {\n    if (!isObject(object)) {\n        return object;\n    }\n\n    const keys = Object.keys(object);\n\n    return keys.reduce((result, key) => {\n        const value = object[key];\n\n        if (!predicateFn(value)) {\n            result[key] = value;\n        }\n\n        return result;\n    }, {});\n}\n","import { MULTI_OPTION } from '../payment-method-types';\nimport {\n    BRAINTREE,\n    BRAINTREE_GOOGLEPAY,\n    BRAINTREE_PAYPAL,\n    BRAINTREE_PAYPAL_CREDIT,\n    BRAINTREE_VISACHECKOUT,\n} from '../payment-method-ids';\n\n/**\n * @param {string} id\n * @return {Boolean}\n */\nfunction isBraintreePaymentMethod(id) {\n    switch (id) {\n    case BRAINTREE_PAYPAL:\n    case BRAINTREE_PAYPAL_CREDIT:\n    case BRAINTREE_VISACHECKOUT:\n    case BRAINTREE_GOOGLEPAY:\n        return true;\n    default:\n        return false;\n    }\n}\n\nexport default class PaymentMethodIdMapper {\n    /**\n     * @returns {PaymentMethodIdMapper}\n     */\n    static create() {\n        return new PaymentMethodIdMapper();\n    }\n\n    /**\n     * @param {PaymentMethod} paymentMethod\n     * @returns {string}\n     */\n    mapToId(paymentMethod) {\n        let { id } = paymentMethod;\n\n        if (paymentMethod.method === MULTI_OPTION) {\n            id = paymentMethod.gateway;\n        }\n\n        if (isBraintreePaymentMethod(id)) {\n            return BRAINTREE;\n        }\n\n        return id;\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    get host() {\n        return this.config.host;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getOffsitePaymentUrl() {\n        return `${this.host}/pay/initialize`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getPaymentUrl() {\n        return `${this.host}/api/public/v1/orders/payments`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getGenerateClientTokenUrl() {\n        return `${this.host}/api/v2/public/payments/client_tokens`;\n    }\n}\n","import deepAssign from 'deep-assign';\nimport objectAssign from 'object-assign';\nimport { POST } from './method-types';\nimport DEFAULT_OPTIONS from './default-options';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\n\nexport default class RequestSender {\n    /**\n     * @returns {RequestSender}\n     */\n    static create() {\n        const requestFactory = RequestFactory.create();\n        const payloadTransformer = PayloadTransformer.create();\n\n        return new RequestSender(requestFactory, payloadTransformer);\n    }\n\n    /**\n     * @param {RequestFactory} requestFactory\n     * @param {PayloadTransformer} payloadTransformer\n     */\n    constructor(requestFactory, payloadTransformer) {\n        /**\n         * @private\n         * @type {RequestFactory}\n         */\n        this.requestFactory = requestFactory;\n\n        /**\n         * @private\n         * @type {PayloadTransformer}\n         */\n        this.payloadTransformer = payloadTransformer;\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    sendRequest(url, data, options, callback) {\n        const mergedOptions = deepAssign({}, DEFAULT_OPTIONS, options);\n\n        const xhr = this.requestFactory.createRequest(url, mergedOptions, (error) => {\n            const response = this.payloadTransformer.fromResponse(xhr);\n\n            if (!callback) {\n                return;\n            }\n\n            if (error || !this.isSuccessfulRequest(xhr)) {\n                callback(response);\n                return;\n            }\n\n            callback(null, response);\n        });\n\n        const payload = this.payloadTransformer.toRequest(data, mergedOptions.headers['Content-Type']);\n\n        xhr.send(payload);\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    postRequest(url, data, options, callback) {\n        const mergedOptions = objectAssign({}, options, {\n            method: POST,\n        });\n\n        this.sendRequest(url, data, mergedOptions, callback);\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @returns {boolean}\n     */\n    isSuccessfulRequest(xhr) {\n        return xhr.status >= 200 && xhr.status < 300;\n    }\n}\n","export const GET = 'GET';\nexport const POST = 'POST';\nexport const DELETE = 'DELETE';\n","import { CookiesStatic } from 'js-cookie';\nimport merge from 'lodash/merge';\n\nimport isPromise from './is-promise';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestOptions from './request-options';\nimport RequestSenderOptions from './request-sender-options';\nimport Response from './response';\nimport Timeout from './timeout';\n\nexport default class RequestSender {\n    constructor(\n        private _requestFactory: RequestFactory,\n        private _payloadTransformer: PayloadTransformer,\n        private _cookie: CookiesStatic,\n        private _options?: RequestSenderOptions\n    ) {}\n\n    sendRequest<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        const requestOptions = this._mergeDefaultOptions(options);\n        const request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n\n        return new Promise((resolve, reject) => {\n            const requestHandler = () => {\n                const response = this._payloadTransformer.toResponse(request);\n\n                if (response.status >= 200 && response.status < 300) {\n                    resolve(response);\n                } else {\n                    reject(response);\n                }\n            };\n\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n\n            if (requestOptions.timeout instanceof Timeout) {\n                requestOptions.timeout.onComplete(() => request.abort());\n                requestOptions.timeout.start();\n            }\n\n            if (isPromise(requestOptions.timeout)) {\n                requestOptions.timeout.then(() => request.abort());\n            }\n\n            request.send(this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    }\n\n    get<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'GET' });\n    }\n\n    post<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'POST' });\n    }\n\n    put<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PUT' });\n    }\n\n    patch<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PATCH' });\n    }\n\n    delete<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'DELETE' });\n    }\n\n    private _mergeDefaultOptions(options?: RequestOptions): RequestOptions {\n        const defaultOptions: Partial<RequestOptions> = {\n            credentials: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n\n        const csrfToken = this._cookie.get('XSRF-TOKEN');\n\n        if (csrfToken && defaultOptions.headers) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n\n        return merge({}, defaultOptions, options);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n\n        return `${this._options.host.replace(/\\/$/, '')}/${url.replace(/^\\//, '')}`;\n    }\n}\n","export { default as includes } from './includes';\nexport { default as isNil } from './is-nil';\nexport { default as isObject } from './is-object';\nexport { default as omitEmptyStringAndNil } from './omit-emptystring-and-nil';\nexport { default as omitNil } from './omit-nil';\nexport { default as omitProperty } from './omit-property';\nexport { default as toNumber } from './to-number';\nexport { default as toSnakeCase } from './to-snake-case';\nexport { default as toString } from './to-string';\n","import { merge } from 'lodash';\nimport {\n    defer,\n    from,\n    of,\n    throwError,\n    BehaviorSubject,\n    Observable,\n    Subject,\n    Subscribable,\n    SubscribableOrPromise\n} from 'rxjs';\nimport {\n    catchError,\n    concatMap,\n    distinctUntilChanged,\n    filter,\n    first,\n    map,\n    mergeMap,\n    scan,\n    skip,\n    tap,\n} from 'rxjs/operators';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport deepFreeze from './deep-freeze';\nimport DispatchableDataStore, { DispatchableAction, DispatchOptions } from './dispatchable-data-store';\nimport isObservableActionLike from './is-observable-action-like';\nimport noopActionTransformer from './noop-action-transformer';\nimport noopStateTransformer from './noop-state-transformer';\nimport ReadableDataStore, { Filter, Subscriber, SubscribeOptions, Unsubscriber } from './readable-data-store';\nimport Reducer from './reducer';\nimport ThunkAction from './thunk-action';\n\nexport default class DataStore<TState, TAction extends Action = Action, TTransformedState = TState> implements\n    ReadableDataStore<TTransformedState>, DispatchableDataStore<TTransformedState, TAction> {\n    private _reducer: Reducer<TState, TAction>;\n    private _options: DataStoreOptions<TState, TAction, TTransformedState>;\n    private _notification$: Subject<TTransformedState>;\n    private _dispatchers: { [key: string]: Dispatcher<TAction> };\n    private _dispatchQueue$: Subject<Dispatcher<TAction>>;\n    private _state$: BehaviorSubject<TTransformedState>;\n    private _errors: { [key: string]: Subject<Error> };\n\n    constructor(\n        reducer: Reducer<TState, TAction>,\n        initialState: Partial<TState> = {},\n        options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n    ) {\n        this._reducer = reducer;\n        this._options = {\n            actionTransformer: noopActionTransformer,\n            equalityCheck: shallowEqual,\n            shouldWarnMutation: true,\n            stateTransformer: noopStateTransformer,\n            ...options,\n        };\n        this._state$ = new BehaviorSubject(this._options.stateTransformer(initialState as TState));\n        this._notification$ = new Subject();\n        this._dispatchers = {};\n        this._dispatchQueue$ = new Subject();\n        this._errors = {};\n\n        this._dispatchQueue$\n            .pipe(\n                mergeMap(dispatcher$ => dispatcher$.pipe(concatMap(action$ => action$))),\n                filter(action => !!action.type),\n                scan(\n                    (states: StateTuple<TState, TTransformedState>, action: TAction) =>\n                        this._transformStates(states, action),\n                    {\n                        state: initialState as TState,\n                        transformedState: this._state$.getValue(),\n                    }\n                ),\n                distinctUntilChanged(({ state: stateA }, { state: stateB }) =>\n                    this._options.equalityCheck(stateA, stateB)\n                ),\n                map(({ transformedState }) => transformedState)\n            )\n            .subscribe(this._state$);\n\n        this.dispatch({ type: 'INIT' } as TAction);\n    }\n\n    dispatch<TDispatchAction extends TAction>(\n        action: DispatchableAction<TDispatchAction, TTransformedState>,\n        options?: DispatchOptions\n    ): Promise<TTransformedState> {\n        if (isObservableActionLike(action)) {\n            return this._dispatchObservableAction(action, options);\n        }\n\n        if (typeof action === 'function') {\n            return this._dispatchThunkAction(action, options);\n        }\n\n        return this._dispatchAction(action);\n    }\n\n    getState(): TTransformedState {\n        return this._state$.getValue();\n    }\n\n    notifyState(): void {\n        this._notification$.next(this.getState());\n    }\n\n    subscribe(subscriber: Subscriber<TTransformedState>, ...filters: Array<Filter<TTransformedState>>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, options: SubscribeOptions<TTransformedState>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, ...args: any[]): Unsubscriber {\n        const options: SubscribeOptions<TTransformedState> = typeof args[0] === 'object' ? args[0] : undefined;\n        const filters: Array<Filter<TTransformedState>> = options ? (options.filters || []) : args;\n\n        let state$: Observable<TTransformedState> = this._state$;\n\n        if (filters.length > 0) {\n            state$ = state$.pipe(\n                distinctUntilChanged((stateA, stateB) =>\n                    filters.every(filterFn =>\n                        this._options.equalityCheck(filterFn(stateA), filterFn(stateB))\n                    )\n                )\n            );\n        }\n\n        if (options && options.initial === false) {\n            state$ = state$.pipe(skip(1));\n        }\n\n        const subscriptions = [\n            state$.subscribe(subscriber),\n            this._notification$.subscribe(subscriber),\n        ];\n\n        return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    private _transformStates(\n        states: StateTuple<TState, TTransformedState>,\n        action: TAction\n    ): StateTuple<TState, TTransformedState> {\n        try {\n            const newState = this._options.shouldWarnMutation === false ?\n                this._reducer(states.state, action) :\n                deepFreeze(this._reducer(states.state, action), {\n                    equalityCheck: this._options.equalityCheck,\n                    previousValue: states.state,\n                });\n            const transformedState = this._options.stateTransformer(newState);\n\n            return { state: newState, transformedState };\n        } catch (error) {\n            this._getDispatchError(action.meta && action.meta.queueId).next(error);\n\n            return { state: states.state, transformedState: states.transformedState };\n        }\n    }\n\n    private _dispatchAction<TDispatchAction extends TAction>(\n        action: TDispatchAction\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(\n            action.error ? throwError(action) : of(action)\n        );\n    }\n\n    private _dispatchObservableAction<TDispatchAction extends TAction>(\n        action$: SubscribableOrPromise<TDispatchAction>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return new Promise((resolve, reject) => {\n            const error$ = this._getDispatchError(options.queueId);\n            const transformedAction$ = this._options.actionTransformer(\n                from(action$).pipe(\n                    map(action =>\n                        options.queueId ?\n                            merge({}, action, { meta: { queueId: options.queueId } }) :\n                            action\n                    )\n                ) as Subscribable<TDispatchAction>\n            );\n\n            this._getDispatcher(options.queueId).next(\n                from(transformedAction$)\n                    .pipe(\n                        map((action, index) => {\n                            if (index === 0) {\n                                error$.pipe(first()).subscribe(reject);\n                            }\n\n                            if (action.error) {\n                                reject(action.payload);\n                            }\n\n                            return action;\n                        }),\n                        catchError(action => {\n                            reject(action instanceof Error ? action : action.payload);\n\n                            return of(action);\n                        }),\n                        tap({\n                            complete: () => {\n                                resolve(this.getState());\n                            },\n                        })\n                    )\n            );\n        });\n    }\n\n    private _dispatchThunkAction<TDispatchAction extends TAction>(\n        thunkAction: ThunkAction<TDispatchAction, TTransformedState>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(defer(() => thunkAction(this)), options);\n    }\n\n    private _getDispatcher(queueId: string = 'default'): Dispatcher<TAction> {\n        if (!this._dispatchers[queueId]) {\n            this._dispatchers[queueId] = new Subject();\n\n            this._dispatchQueue$.next(this._dispatchers[queueId]);\n        }\n\n        return this._dispatchers[queueId];\n    }\n\n    private _getDispatchError(queueId: string = 'default'): Subject<Error> {\n        if (!this._errors[queueId]) {\n            this._errors[queueId] = new Subject();\n        }\n\n        return this._errors[queueId];\n    }\n}\n\nexport interface DataStoreOptions<TState, TAction, TTransformedState> {\n    shouldWarnMutation: boolean;\n    actionTransformer(action: Subscribable<TAction>): Subscribable<TAction>;\n    equalityCheck(valueA: any, valueB: any): boolean;\n    stateTransformer(state: TState): TTransformedState;\n}\n\ninterface StateTuple<TState, TTransformedState> {\n    state: TState;\n    transformedState: TTransformedState;\n}\n\ntype Dispatcher<TAction> = Subject<Subscribable<TAction>>;\n","import { isPlainObject } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nexport interface DeepFreezeOptions<T> {\n    previousValue?: T;\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n\nexport default function deepFreeze<T>(object: T[], options?: DeepFreezeOptions<T>): ReadonlyArray<T>;\nexport default function deepFreeze<T extends object>(object: T, options?: DeepFreezeOptions<T>): Readonly<T>;\nexport default function deepFreeze<T>(object: T, options?: DeepFreezeOptions<T>): T;\nexport default function deepFreeze<T>(\n    object: T[] | T,\n    options?: DeepFreezeOptions<T>\n): ReadonlyArray<T> | Readonly<T> | T {\n    try {\n        const { equalityCheck = shallowEqual, previousValue = null } = options || {};\n\n        if (equalityCheck(object, previousValue) && Object.isFrozen(previousValue)) {\n            return previousValue as T;\n        }\n\n        if (Object.isFrozen(object) || (!Array.isArray(object) && !isPlainObject(object))) {\n            return object;\n        }\n\n        if (Array.isArray(object)) {\n            return Object.freeze(object.map((value, index) =>\n                deepFreeze(value, {\n                    equalityCheck,\n                    previousValue: Array.isArray(previousValue) ? previousValue[index] : undefined,\n                })\n            ));\n        }\n\n        return Object.freeze(Object.getOwnPropertyNames(object).reduce((result, key) => {\n            result[key as keyof T] = deepFreeze(object[key as keyof T], {\n                equalityCheck,\n                previousValue: previousValue && previousValue.hasOwnProperty(key) ?\n                    (previousValue as any)[key] :\n                    undefined,\n            });\n\n            return result;\n        }, {} as T));\n    } catch (error) {\n        // Browsers that only support ES5 will throw `TypeError` when checking\n        // if a primitive value is frozen or trying to freeze a primitive value.\n        if (error instanceof TypeError) {\n            return object;\n        }\n\n        throw error;\n    }\n}\n","import { assign } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function combineReducers<TState, TAction extends Action = Action>(\n    reducers: ReducerMap<TState, TAction>,\n    options?: CombineReducersOptions\n): Reducer<TState, TAction> {\n    const { equalityCheck = shallowEqual } = options || {};\n\n    return (state, action) =>\n        Object.keys(reducers).reduce((result, key) => {\n            const reducer = reducers[key as keyof TState];\n            const currentState = state ? state[key as keyof TState] : undefined;\n            const newState = reducer(currentState, action);\n\n            if (equalityCheck(currentState, newState) && result) {\n                return result;\n            }\n\n            return assign({}, result, { [key]: newState });\n        }, state || {} as TState);\n}\n\nexport type ReducerMap<TState, TAction extends Action = Action> = {\n    [Key in keyof TState]: Reducer<TState[Key], TAction>;\n};\n\nexport interface CombineReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import { omitBy } from 'lodash';\n\nimport Action from './action';\n\nexport default function createAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    if (typeof type !== 'string' || type === '') {\n        throw new Error('`type` must be a string');\n    }\n\n    return { type, ...omitBy({ payload, meta }, value => value === undefined) };\n}\n","export default class ScriptLoader {\n    private _scripts: { [key: string]: Promise<Event> } = {};\n\n    loadScript(src: string): Promise<Event> {\n        if (!this._scripts[src]) {\n            this._scripts[src] = new Promise((resolve, reject) => {\n                const script = document.createElement('script') as LegacyHTMLScriptElement;\n\n                script.onload = event => resolve(event);\n                script.onreadystatechange = event => resolve(event);\n                script.onerror = event => {\n                    delete this._scripts[src];\n                    reject(event);\n                };\n                script.async = true;\n                script.src = src;\n\n                document.body.appendChild(script);\n            });\n        }\n\n        return this._scripts[src];\n    }\n}\n\ninterface LegacyHTMLScriptElement extends HTMLScriptElement {\n    // `onreadystatechange` is needed to support legacy IE\n    onreadystatechange(this: HTMLElement, event: Event): any;\n}\n","import ScriptLoader from './script-loader';\n\nexport default function createScriptLoader(): ScriptLoader {\n    return new ScriptLoader();\n}\n","import FormBuilder from './form-builder';\nimport FormPosterOptions from './form-poster-options';\nimport { isAbsoluteUrl, joinPaths } from './url-utils';\n\nexport default class FormPoster {\n    /**\n     * @internal\n     */\n    constructor(\n        private _formBuilder: FormBuilder,\n        private _options?: FormPosterOptions\n    ) {}\n\n    postForm(url: string, data: { [key: string]: any }, callback?: () => void): void {\n        const form = this._formBuilder.build(this._prependHost(url), data);\n\n        window.addEventListener('unload', function handleUnload() {\n            window.removeEventListener('unload', handleUnload);\n\n            if (callback) {\n                callback();\n            }\n        });\n\n        // In order to submit the form, the form must be attached to DOM.\n        document.body.appendChild(form);\n        form.submit();\n        document.body.removeChild(form);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || isAbsoluteUrl(url)) {\n            return url;\n        }\n\n        return joinPaths(this._options.host, url);\n    }\n}\n","export const API = 'PAYMENT_TYPE_API';\nexport const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isObject(value) {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n}\n","export const APPLICATION_JSON = 'application/json';\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 150);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit/store-credit-actions';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit/store-credit-selector';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../../common/selector';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                        recaptcha.reset();\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export interface AdyenComponentCallbacks {\n    onChange?(state: AdyenCardState): void;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenCheckout;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: AdyenPaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: AdyenPaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface AdyenPaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface AdyenPaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport enum ThreeDS2ComponentType {\n    ThreeDS2DeviceFingerprint = 'threeDS2DeviceFingerprint',\n    ThreeDS2Challenge = 'threeDS2Challenge',\n}\n\nexport interface ThreeDS2Result {\n    payment_data: string;\n    result_code: string;\n    token: string;\n}\n\nexport interface ThreeDS1Result {\n    acs_url: string;\n    payer_auth_request: string;\n    callback_url: string;\n    merchant_data: string;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface RecurringDetail extends AdyenPaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumnber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenCheckout {\n    create(type: string, componentOptions?: CreditCardComponentOptions |\n        ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions): AdyenComponent;\n}\n\nexport interface ThreeDS2ComponentOptions {\n    threeDS2ChallengeWidgetSize?: string;\n}\n\nexport interface CreditCardComponentOptions {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: AdyenStyleOptions;\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface AdyenCardState {\n    data: AdyenCardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface AdyenCardDataPaymentMethodState {\n    paymentMethod: AdyenCardPaymentMethodState;\n}\nexport interface AdyenCardPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n    type: string;\n}\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    fingerprintToken: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport enum ResultCode {\n    AuthenticationFinished = 'AuthenticationFinished',\n    Authorised = 'Authorised',\n    Cancelled = 'Cancelled',\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n    Pending = 'Pending',\n    Received = 'Received',\n    RedirectShopper = 'RedirectShopper',\n    Refused = 'Refused',\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    challengeToken: string;\n    size?: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenStyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface ThreeDS2OnComplete {\n    data: {\n        details: {\n            'threeds2.challengeResult'?: string;\n            'threeds2.fingerprint'?: string;\n            paymentData: string;\n        };\n    };\n}\n\nexport interface ThreeDSRequiredErrorResponse {\n    errors: [\n        { code: string }\n    ];\n    three_ds_result: {\n        result_code: ResultCode;\n        token?: string;\n        payment_data?: string;\n        acs_url?: string;\n        callback_url?: string;\n        payer_auth_request?: string;\n        merchant_data?: string;\n    };\n    status: string;\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType, NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport NotInitializedError from '../../../common/error/errors/not-initialized-error';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    AdyenCardState,\n    AdyenCheckout,\n    AdyenComponent,\n    AdyenConfiguration,\n    AdyenError,\n    ResultCode,\n    ThreeDS2ComponentType,\n    ThreeDS2OnComplete,\n    ThreeDS2Result,\n} from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenCheckout?: AdyenCheckout;\n    private _stateContainer?: string;\n    private _adyenv2?: AdyenV2PaymentInitializeOptions;\n    private _adyenComponent?: AdyenComponent;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _adyenV2ScriptLoader: AdyenV2ScriptLoader,\n        private _formPoster: FormPoster,\n        private _locale: string\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._adyenv2 = adyenv2;\n\n        const configuration: AdyenConfiguration = {\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        };\n\n        return this._adyenV2ScriptLoader.load(configuration)\n            .then(adyenCheckout => {\n                this._adyenCheckout = adyenCheckout;\n\n                const adyenComponent = this._adyenCheckout.create(\n                    paymentMethod.method,\n                    {\n                        ...adyenv2.options,\n                        onChange: (state: AdyenCardState) => {\n                            this._updateStateContainer(state);\n                        },\n                    }\n                );\n\n                adyenComponent.mount(`#${adyenv2.containerId}`);\n\n                this._adyenComponent = adyenComponent;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                const paymentPayload = {\n                    methodId: payment.methodId,\n                    paymentData: {\n                        nonce: this._getStateContainer(),\n                        shouldSaveInstrument,\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.IdentifyShopper) {\n                    return this._handle3DS2Fingerprint(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n                        )\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                                return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                                    .then((payment: Payment) =>\n                                        this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n                                    );\n                            }\n\n                            return Promise.reject(error);\n                        });\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                    return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n                        );\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._adyenComponent) {\n            this._adyenComponent.unmount();\n            this._adyenComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenV2PaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._adyenv2) {\n            throw new InvalidArgumentError(' \"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._adyenv2;\n    }\n\n    private _getStateContainer(): string {\n        if (!this._stateContainer) {\n            return '{}';\n        }\n\n        return this._stateContainer;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { threeDS2Options } = this._getAdyenV2PaymentInitializeOptions();\n\n        if (!threeDS2Options) {\n            throw new InvalidArgumentError('\"options.adyenv2.threeds2options\" argument was not provided during initialization.');\n        }\n\n        const { threeDS2ChallengeWidgetSize } = threeDS2Options;\n\n        if (!threeDS2ChallengeWidgetSize) {\n            return '01';\n        }\n\n        return threeDS2ChallengeWidgetSize;\n    }\n\n    private _handle3DS2Challenge(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2Challenge, {\n                    challengeToken: resultObject.token,\n                    onComplete: (challengeData: ThreeDS2OnComplete) => {\n                        const challengePaymentPayload = {\n                            ...challengeData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(challengePaymentPayload),\n                            },\n                        };\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                    size: this._getThreeDS2ChallengeWidgetSize(),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _handle3DS2Fingerprint(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2DeviceFingerprint, {\n                    fingerprintToken: resultObject.token,\n                    onComplete: (fingerprintData: ThreeDS2OnComplete) => {\n                        const fingerprintPaymentPayload = {\n                            ...fingerprintData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(fingerprintPaymentPayload),\n                            },\n                        };\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _updateStateContainer(newState: AdyenCardState) {\n        if (newState.isValid) {\n            const state = {\n                ...newState.data.paymentMethod,\n                origin: window.location.origin,\n            };\n\n            this._stateContainer = JSON.stringify(state);\n        }\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    AdyenCheckout,\n    AdyenConfiguration,\n    AdyenHostWindow\n} from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    private _stylesheets: { [key: string]: Promise<Event> } = {};\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AdyenHostWindow = window\n    ) {}\n\n    load(configuration: AdyenConfiguration): Promise<AdyenCheckout> {\n        return Promise.all([\n            this._loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.js`),\n        ])\n        .then(() => {\n            if (!this._window.AdyenCheckout) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.AdyenCheckout(configuration);\n        })\n        .catch(() => {\n            throw new PaymentMethodClientUnavailableError();\n        });\n\n    }\n\n    private _loadStylesheet(src: string): Promise<Event> {\n        if (!this._stylesheets[src]) {\n            this._stylesheets[src] = new Promise((resolve, reject) => {\n                const stylesheet = document.createElement('link');\n\n                stylesheet.onload = event => {\n                    resolve(event);\n                };\n                stylesheet.onerror = event => {\n                    delete this._stylesheets[src];\n                    reject(event);\n                };\n                stylesheet.type = 'text/css';\n                stylesheet.rel = 'stylesheet';\n                stylesheet.href = src;\n\n                document.head.appendChild(stylesheet);\n            });\n        }\n\n        return this._stylesheets[src];\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\nimport StoreCreditActionCreator from '../store-credit/store-credit-action-creator';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader),\n            formPoster,\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import * as cookie from 'js-cookie';\n\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestSender from './request-sender';\nimport RequestSenderOptions from './request-sender-options';\n\nexport default function createRequestSender(options?: RequestSenderOptions): RequestSender {\n    return new RequestSender(\n        new RequestFactory(),\n        new PayloadTransformer(),\n        cookie,\n        options\n    );\n}\n","import Headers from './headers';\nimport RequestOptions from './request-options';\nimport Response from './response';\nimport toFormUrlEncoded from './to-form-url-encoded';\n\nconst JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\nconst FORM_URLENCODED_CONTENT_TYPE_REGEXP = /application\\/x-www-form-urlencoded/;\n\nexport default class PayloadTransformer {\n    toRequestBody(options: RequestOptions): any {\n        const contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n\n        if (options.body) {\n            if (JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return JSON.stringify(options.body);\n            }\n\n            if (FORM_URLENCODED_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return toFormUrlEncoded(options.body);\n            }\n        }\n\n        return options.body;\n    }\n\n    toResponse(xhr: XMLHttpRequest): Response {\n        const headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n\n        // Using `responseText` to support legacy IE\n        const body = this._parseResponseBody(\n            'response' in xhr ? xhr.response : (xhr as any).responseText,\n            headers\n        );\n\n        return {\n            body,\n            headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    }\n\n    private _parseResponseBody(body: string, headers: Headers): any {\n        const contentType = this._getHeader(headers, 'Content-Type');\n\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n\n        return body;\n    }\n\n    private _parseResponseHeaders(rawHeaders: string): Headers {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return {\n                ...headers,\n                [key.toLowerCase()]: parts.join(':').trim(),\n            };\n        }, {});\n    }\n\n    private _getHeader(headers: Headers, key: string): string {\n        if (!headers || !key) {\n            return '';\n        }\n\n        return headers[key] || headers[key.toLowerCase()] || '';\n    }\n}\n","export default function toFormUrlEncoded(data: any): string {\n    if (typeof data !== 'object' || data === null) {\n        return data;\n    }\n\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import * as queryString from 'query-string';\n\nimport Headers from './headers';\nimport RequestOptions from './request-options';\n\nexport default class RequestFactory {\n    createRequest(url: string, options?: RequestOptions): XMLHttpRequest {\n        const xhr = new XMLHttpRequest();\n\n        this._configureRequest(xhr, url, options);\n\n        return xhr;\n    }\n\n    private _configureRequest(xhr: XMLHttpRequest, url: string, options: RequestOptions = {}): void {\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params), true);\n\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    }\n\n    private _configureRequestHeaders(xhr: XMLHttpRequest, headers: Headers): void {\n        Object.keys(headers).forEach(key => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    }\n\n    private _formatUrl(url: string, params?: object): string {\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n\n        return `${url}?${queryString.stringify(params)}`;\n    }\n}\n","'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nfunction extract(str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tif (opts.sort === false) {\n\t\topts.sort = function () {};\n\t}\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort(opts.sort).map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nexports.parseUrl = function (str, opts) {\n\treturn {\n\t\turl: str.split('?')[0] || '',\n\t\tquery: parse(extract(str), opts)\n\t};\n};\n","export default function isPromise(promise: any): promise is PromiseLike<any> {\n    return !!promise &&\n        (typeof promise === 'object' || typeof promise === 'function') &&\n        typeof promise.then === 'function';\n}\n","import Timeout from './timeout';\n\nexport default function createTimeout(delay?: number): Timeout {\n    return new Timeout(delay);\n}\n","import { Subscribable, SubscribableOrPromise } from 'rxjs';\n\nimport Action from './action';\nimport { DispatchableAction } from './dispatchable-data-store';\n\nexport default function isObservableActionLike<TAction extends Action = Action>(\n    action: DispatchableAction<TAction>\n): action is SubscribableOrPromise<TAction> {\n    return (\n        typeof (action as Subscribable<TAction>).subscribe === 'function' ||\n        typeof (action as PromiseLike<TAction>).then === 'function'\n    );\n}\n","import { Subscribable } from 'rxjs';\n\nimport Action from './action';\n\nexport default function noopActionTransformer<TAction extends Action, TTransformedAction extends Action = TAction>(\n    action: Subscribable<TAction>\n): Subscribable<TTransformedAction> {\n    return action as any as Subscribable<TTransformedAction>;\n}\n","export default function noopStateTransformer<TState, TTransformedState = TState>(\n    state: TState\n): TTransformedState {\n    return state as any as TTransformedState;\n}\n","import { curryRight, flowRight } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function composeReducers<TState, TStateA, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TState, action: TAction) => TStateA,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TState, action: TAction) => TStateB,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TState, action: TAction) => TStateC,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TStateD, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TStateD, action: TAction) => TStateC,\n    reducerE: (state: TState, action: TAction) => TStateD,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TAction extends Action = Action>(\n    ...args: any[]\n): Reducer<TState, TAction> {\n    let reducers: Array<Reducer<TState, TAction>> = args;\n    let options: ComposeReducersOptions = {};\n\n    if (typeof args[args.length - 1] === 'object') {\n        reducers = args.slice(0, -1);\n        options = { ...options, ...args[args.length - 1] };\n    }\n\n    const { equalityCheck = shallowEqual } = options;\n\n    return (state, action) => {\n        const newState = flowRight(\n            reducers\n                .filter(reducer => reducer.length === 2)\n                .map(reducer => curryRight(reducer)(action))\n        )(state);\n\n        return equalityCheck(state, newState) ? state : newState;\n    };\n}\n\nexport interface ComposeReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import Action from './action';\nimport combineReducers, { ReducerMap } from './combine-reducers';\nimport DataStore, { DataStoreOptions } from './data-store';\nimport Reducer from './reducer';\n\nexport default function createDataStore<TState, TAction extends Action = Action, TTransformedState = TState>(\n    reducer: Reducer<TState, TAction> | ReducerMap<TState, TAction>,\n    initialState?: Partial<TState>,\n    options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n): DataStore<TState, TAction, TTransformedState> {\n    if (typeof reducer === 'function') {\n        return new DataStore(reducer, initialState, options);\n    }\n\n    return new DataStore(\n        combineReducers(reducer, { equalityCheck: options && options.equalityCheck }),\n        initialState,\n        options\n    );\n}\n","import Action from './action';\nimport createAction from './create-action';\n\nexport default function createErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    return {\n        ...createAction(type, payload, meta),\n        error: true,\n    };\n}\n","import lodashMemoize from 'lodash.memoize'; // tslint:disable-line:match-default-export-name\nimport shallowEqual from 'shallowequal';\n\nimport CacheKeyResolver from './cache-key-resolver';\nimport { Omit } from './types';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        isEqual,\n        maxSize,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            isEqual: shallowEqual,\n            maxSize: 0,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import createScriptLoader from './create-script-loader';\nimport ScriptLoader from './script-loader';\n\nlet instance: ScriptLoader;\n\nexport default function getScriptLoader(): ScriptLoader {\n    if (!instance) {\n        instance = createScriptLoader();\n    }\n\n    return instance;\n}\n","import FormBuilder from './form-builder';\nimport FormPoster from './form-poster';\nimport FormPosterOptions from './form-poster-options';\n\nexport default function createFormPoster(options?: FormPosterOptions): FormPoster {\n    const formBuilder = new FormBuilder();\n    const formPoster = new FormPoster(formBuilder, options);\n\n    return formPoster;\n}\n","export default class FormBuilder {\n    build(url: string, data: { [key: string]: any }): HTMLFormElement {\n        const form = document.createElement('form');\n\n        form.style.display = 'none';\n\n        form.setAttribute('action', url);\n        form.setAttribute('method', 'POST');\n        form.setAttribute('target', '_top');\n\n        Object.keys(data)\n            .forEach(key => {\n                const value = data[key];\n\n                form.appendChild(this._createInput(value, key));\n            });\n\n        return form;\n    }\n\n    private _createInput(value: any, key: string): HTMLInputElement {\n        const input = document.createElement('input');\n\n        input.setAttribute('name', key);\n        input.setAttribute('type', 'hidden');\n        input.setAttribute('value', value);\n\n        return input;\n    }\n}\n","export function isAbsoluteUrl(url: string): boolean {\n    return /^https?:\\/\\//.test(url);\n}\n\nexport function joinPaths(pathA: string, pathB: string): string {\n    return `${removeTrailingSlash(pathA)}/${removeLeadingSlash(pathB)}`;\n}\n\nfunction removeTrailingSlash(path: string): string {\n    return path.replace(/\\/$/, '');\n}\n\nfunction removeLeadingSlash(path: string): string {\n    return path.replace(/^\\//, '');\n}\n","import Client from './client/client';\n\n/**\n * @param {Object} [config]\n * @returns {Client}\n */\nexport function createClient(config) {\n    return Client.create(config);\n}\n","import objectAssign from 'object-assign';\nimport OffsitePaymentInitializer from '../payment/offsite-payment-initializer';\nimport PaymentSubmitter from '../payment/payment-submitter';\nimport ClientTokenGenerator from '../payment/client-token-generator';\nimport StoreRequestSender from '../store/store-request-sender';\nimport DEFAULT_CONFIG from './default-config';\n\nexport default class Client {\n    /**\n     * @param {Object} config\n     * @returns {Client}\n     */\n    static create(config) {\n        const clientConfig = objectAssign({}, DEFAULT_CONFIG, config);\n        const offsitePaymentInitializer = OffsitePaymentInitializer.create(clientConfig);\n        const paymentSubmitter = PaymentSubmitter.create(clientConfig);\n        const clientTokenGenerator = ClientTokenGenerator.create(clientConfig);\n        const storeRequestSender = StoreRequestSender.create(clientConfig);\n\n        return new Client(\n            clientConfig,\n            paymentSubmitter,\n            offsitePaymentInitializer,\n            clientTokenGenerator,\n            storeRequestSender\n        );\n    }\n\n    /**\n     * @param {Object} config\n     * @param {PaymentSubmitter} paymentSubmitter\n     * @param {OffsitePaymentInitializer} offsitePaymentInitializer\n     * @param {ClientTokenGenerator} clientTokenGenerator\n     * @param {StoreRequestSender} storeRequestSender\n     */\n    constructor(\n        config,\n        paymentSubmitter,\n        offsitePaymentInitializer,\n        clientTokenGenerator,\n        storeRequestSender\n    ) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n\n        /**\n         * @private\n         * @type {PaymentSubmitter}\n         */\n        this.paymentSubmitter = paymentSubmitter;\n\n        /**\n         * @private\n         * @type {OffsitePaymentInitializer}\n         */\n        this.offsitePaymentInitializer = offsitePaymentInitializer;\n\n        /**\n         * @private\n         * @type {ClientTokenGenerator}\n         */\n        this.clientTokenGenerator = clientTokenGenerator;\n\n        /**\n         * @private\n         * @type {StoreRequestSender}\n         */\n        this.storeRequestSender = storeRequestSender;\n    }\n\n    /**\n     * @param {string} host\n     * @returns {void}\n     */\n    setHost(host) {\n        this.config.host = host;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    initializeOffsitePayment(data, callback) {\n        this.offsitePaymentInitializer.initializeOffsitePayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    submitPayment(data, callback) {\n        this.paymentSubmitter.submitPayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        this.clientTokenGenerator.generateClientToken(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        this.storeRequestSender.loadInstruments(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {AddressData} data.shippingAddress\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        this.storeRequestSender.loadInstrumentsWithAddress(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {CreditCard} data.creditCard\n     * @param {AddressData} data.billingAddress\n     * @param {boolean} data.defaultInstrument\n     * @param {string} data.providerName\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        this.storeRequestSender.postShopperInstrument(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.instrumentId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        this.storeRequestSender.deleteShopperInstrument(data, callback);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { HOSTED } from './payment-types';\nimport PayloadMapper from './offsite-payment-mappers/payload-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class OffsitePaymentInitializer {\n    /**\n     * @param {Object} config\n     * @returns {OffsitePaymentInitializer}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const formPoster = createFormPoster();\n        const payloadMapper = PayloadMapper.create();\n\n        return new OffsitePaymentInitializer(urlHelper, formPoster, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {FormPoster} formPoster\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, formPoster, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {FormPoster}\n         */\n        this.formPoster = formPoster;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    initializeOffsitePayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== HOSTED) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getOffsitePaymentUrl();\n\n        this.formPoster.postForm(url, payload, callback);\n    }\n}\n","import objectAssign from 'object-assign';\nimport { omitNil, toString } from '../../common/utils';\nimport AddressMapper from './address-mapper';\nimport CustomerMapper from './customer-mapper';\nimport MetaMapper from './meta-mapper';\nimport PaymentMethodIdMapper from '../payment-method-mappers/payment-method-id-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const addressMapper = AddressMapper.create();\n        const customerMapper = CustomerMapper.create();\n        const metaMapper = MetaMapper.create();\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper);\n    }\n\n    /**\n     * @param {AddressMapper} addressMapper\n     * @param {CustomerMapper} customerMapper\n     * @param {MetaMapper} metaMapper\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @param {StoreMapper} storeMapper\n     * @returns {Object}\n     */\n    constructor(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper) {\n        /**\n         * @private\n         * @type {AddressMapper}\n         */\n        this.addressMapper = addressMapper;\n\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {MetaMapper}\n         */\n        this.metaMapper = metaMapper;\n\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { authToken, order = {}, paymentMethod = {} } = data;\n\n        const payload = objectAssign(\n            {\n                amount: order.grandTotal ? order.grandTotal.integerAmount : null,\n                bc_auth_token: authToken,\n                currency: order.currency,\n                gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n                notify_url: order.callbackUrl,\n                order_id: order.orderId ? toString(order.orderId) : null,\n                page_title: document.title ? document.title : null,\n                payment_method_id: paymentMethod.id,\n                reference_id: order.orderId ? toString(order.orderId) : null,\n                return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            },\n            this.addressMapper.mapToBillingAddress(data),\n            this.customerMapper.mapToCustomer(data),\n            this.metaMapper.mapToMeta(data),\n            this.addressMapper.mapToShippingAddress(data),\n            this.storeMapper.mapToStore(data)\n        );\n\n        return omitNil(payload);\n    }\n}\n","/**\n * @param {array|string} items\n * @param {array|string} item\n * @returns {boolean}\n */\nexport default function includes(items, item) {\n    if (!Array.isArray(items) && typeof items !== 'string') {\n        return false;\n    }\n\n    return items.indexOf(item) !== -1;\n}\n","import isEmptyStringOrNil from './is-emptystring-or-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitEmptyStringAndNil(object) {\n    return omitProperty(object, isEmptyStringOrNil);\n}\n","import isEmptyString from './is-empty-string';\nimport isNil from './is-nil';\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyStringOrNil(value) {\n    return isEmptyString(value) || isNil(value);\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyString(value) {\n    return value === '';\n}\n","import isNil from './is-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitNil(object) {\n    return omitProperty(object, isNil);\n}\n","/**\n * @param {*} value\n * @returns {number}\n */\nexport default function toNumber(value) {\n    return parseFloat(value) || 0;\n}\n","/**\n * @param {string} string\n * @returns {string}\n */\nexport default function toSnakeCase(string) {\n    if (typeof string !== 'string') {\n        return string;\n    }\n\n    return string.replace(/([a-z\\d])([A-Z]+)/g, '$1_$2')\n        .replace(/[-\\s]+/g, '_')\n        .toLowerCase();\n}\n","/**\n * @param {*} value\n * @returns {string}\n */\nexport default function toString(value) {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (typeof value === 'number' && !isNaN(value)) {\n        return value.toString();\n    }\n\n    return '';\n}\n","import { omitNil, toSnakeCase } from '../../common/utils';\n\nexport default class AddressMapper {\n    /**\n     * @returns {AddressMapper}\n     */\n    static create() {\n        return new AddressMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        return this.mapToAddress(data, 'billingAddress');\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n        const formattedAddressKey = toSnakeCase(addressKey);\n\n        return omitNil({\n            [`${formattedAddressKey}_city`]: address.city,\n            [`${formattedAddressKey}_company`]: address.company,\n            [`${formattedAddressKey}_country_code`]: address.countryCode,\n            [`${formattedAddressKey}_country`]: address.country,\n            [`${formattedAddressKey}_first_name`]: address.firstName,\n            [`${formattedAddressKey}_last_name`]: address.lastName,\n            [`${formattedAddressKey}_phone`]: address.phone,\n            [`${formattedAddressKey}_state_code`]: address.provinceCode,\n            [`${formattedAddressKey}_state`]: address.province,\n            [`${formattedAddressKey}_street_1`]: address.addressLine1,\n            [`${formattedAddressKey}_street_2`]: address.addressLine2,\n            [`${formattedAddressKey}_zip`]: address.postCode,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {}, store = {} } = data;\n\n        return omitNil({\n            customer_browser_info: navigator.userAgent,\n            customer_email: customer.email,\n            customer_first_name: customer.firstName,\n            customer_geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            customer_last_name: customer.lastName,\n            customer_locale: store.storeLanguage,\n            customer_name: customer.name,\n            customer_phone: customer.phoneNumber,\n            customer_reference: customer.email,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class MetaMapper {\n    /**\n     * @returns {MetaMapper}\n     */\n    static create() {\n        return new MetaMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToMeta(data) {\n        const { source } = data;\n\n        return omitNil({\n            meta_referrer: document.referrer,\n            meta_source: source,\n            meta_user_agent: navigator.userAgent,\n        });\n    }\n}\n","export const CREDIT_CARD = 'credit-card';\nexport const MULTI_OPTION = 'multi-option';\n","export const BRAINTREE = 'braintree';\nexport const BRAINTREE_PAYPAL = 'braintreepaypal';\nexport const BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit';\nexport const BRAINTREE_VISACHECKOUT = 'braintreevisacheckout';\nexport const BRAINTREE_GOOGLEPAY = 'googlepaybraintree';\n","import { omitNil, toString } from '../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            store_hash: store.storeHash,\n            store_id: store.storeId ? toString(store.storeId) : null,\n        });\n    }\n}\n","import { API } from './payment-types';\nimport PayloadMapper from './v1/payment-mappers/payload-mapper';\nimport RequestSender from '../common/http-request/request-sender';\nimport UrlHelper from './url-helper';\n\nexport default class PaymentSubmitter {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const payloadMapper = PayloadMapper.create();\n\n        return new PaymentSubmitter(urlHelper, requestSender, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    submitPayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== API) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getPaymentUrl();\n        const options = {\n            headers: this.payloadMapper.mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CustomerMapper from './customer-mapper';\nimport OrderMapper from './order-mapper';\nimport PaymentMapper from './payment-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const customerMapper = CustomerMapper.create();\n        const orderMapper = OrderMapper.create();\n        const paymentMapper = PaymentMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(customerMapper, orderMapper, paymentMapper, storeMapper);\n    }\n\n    /**\n     * @param {CustomerMapper} customerMapper\n     * @param {OrderMapper} orderMapper\n     * @param {PaymentMapper} paymentMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(customerMapper, orderMapper, paymentMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {OrderMapper}\n         */\n        this.orderMapper = orderMapper;\n\n        /**\n         * @private\n         * @type {PaymentMapper}\n         */\n        this.paymentMapper = paymentMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            customer: this.customerMapper.mapToCustomer(data),\n            notify_url: order.callbackUrl,\n            order: this.orderMapper.mapToOrder(data),\n            payment: this.paymentMapper.mapToPayment(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToHeaders(data) {\n        const { authToken } = data;\n\n        return omitNil({\n            Authorization: authToken,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {} } = data;\n\n        return omitNil({\n            customer_group: customer.customerGroupName ? { name: customer.customerGroupName } : null,\n            geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            id: customer.customerId ? toString(customer.customerId) : null,\n            session_token: quoteMeta.request ? quoteMeta.request.sessionHash : null,\n        });\n    }\n}\n","import { omitEmptyStringAndNil, omitNil, toString } from '../../../common/utils';\n\nexport default class OrderMapper {\n    /**\n     * @returns {OrderMapper}\n     */\n    static create() {\n        return new OrderMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrder(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            billing_address: this.mapToBillingAddress(data),\n            coupons: this.mapToCoupons(data),\n            currency: order.currency,\n            id: order.orderId ? toString(order.orderId) : null,\n            items: this.mapToItems(data),\n            shipping: this.mapToShipping(data),\n            shipping_address: this.mapToShippingAddress(data),\n            token: order.token,\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        const { customer = {} } = data;\n        const address = this.mapToAddress(data, 'billingAddress');\n\n        if (customer.email) {\n            address.email = customer.email;\n        }\n\n        return address;\n    }\n\n    /**\n     * @private\n     * @param  {PaymentRequestData} data\n     * @return {Shipping[]}\n     */\n    mapToShipping(data) {\n        const { description } = data.shippingOption || {};\n\n        if (description) {\n            return [{\n                method: description,\n            }];\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Coupon[]}\n     */\n    mapToCoupons({ order = {} }) {\n        if (order.coupon && order.coupon.coupons) {\n            return order.coupon.coupons.map(({ code }) => ({ code }));\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n\n        return omitEmptyStringAndNil({\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            country: address.country,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            state_code: address.provinceCode,\n            state: address.province,\n            street_1: address.addressLine1,\n            street_2: address.addressLine2,\n            zip: address.postCode,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            code: itemData.id,\n            variant_id: itemData.variantId,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            grand_total: order.grandTotal ? order.grandTotal.integerAmount : null,\n            handling: order.handling ? order.handling.integerAmount : null,\n            shipping: order.shipping ? order.shipping.integerAmount : null,\n            subtotal: order.subtotal ? order.subtotal.integerAmount : null,\n            tax: order.taxTotal ? order.taxTotal.integerAmount : null,\n        });\n    }\n}\n","import objectAssign from 'object-assign';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const {\n            order = {},\n            orderMeta = {},\n            payment = {},\n            paymentMethod = {},\n        } = data;\n\n        const payload = {\n            device_info: payment.deviceSessionId ? payment.deviceSessionId : null,\n            device: orderMeta.deviceFingerprint ? { fingerprint_id: orderMeta.deviceFingerprint } : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            vault_payment_instrument: !payment.instrumentId ? payment.shouldSaveInstrument : null,\n        };\n\n        const method = paymentMethod.method;\n\n        if (method) {\n            objectAssign(payload, { method });\n        }\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (payment.instrumentId) {\n            objectAssign(payload, {\n                bigpay_token: this.mapToBigPayToken(data),\n            });\n        } else if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else if (payment.cryptogramId) {\n            objectAssign(payload, {\n                credit_card_cryptogram: this.mapToCryptogram(data),\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            customer_code: payment.ccCustomerCode,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToBigPayToken({ payment }) {\n        return omitNil({\n            credit_card_number_confirmation: payment.ccNumber,\n            token: payment.instrumentId,\n            verification_value: payment.ccCvv,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToCryptogram({ payment }) {\n        return omitNil({\n            payment_cryptogram: payment.cryptogramId,\n            eci: payment.eci,\n            xid: payment.transactionId,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            account_mask: payment.accountMask,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            hash: store.storeHash,\n            id: store.storeId ? toString(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n}\n","import { APPLICATION_JSON } from './content-types';\nimport { GET } from './method-types';\n\nconst DEFAULT_OPTIONS = {\n    headers: {\n        Accept: APPLICATION_JSON,\n        'Content-Type': APPLICATION_JSON,\n    },\n    method: GET,\n};\n\nexport default DEFAULT_OPTIONS;\n","import objectAssign from 'object-assign';\nimport { APPLICATION_JSON } from './content-types';\nimport { includes } from '../utils';\n\nexport default class PayloadTransformer {\n    /**\n     * @returns {PayloadTransformer}\n     */\n    static create() {\n        return new PayloadTransformer();\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} [contentType = APPLICATION_JSON]\n     * @returns {Object}\n     */\n    toRequest(data, contentType = APPLICATION_JSON) {\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            return JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    /**\n     * @param {XMLHttpRequest} xhr\n     * @returns {Object}\n     * @property {Object} data\n     * @property {number} status\n     * @property {string} statusText\n     */\n    fromResponse(xhr) {\n        const headers = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n        const contentType = xhr.getResponseHeader('Content-Type');\n        const { status, statusText } = xhr;\n\n        let data = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            data = JSON.parse(data);\n        }\n\n        return { data, headers, status, statusText };\n    }\n\n    /**\n     * @private\n     * @param {string} rawHeaders\n     * @returns {Object}\n     */\n    parseResponseHeaders(rawHeaders) {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return objectAssign({}, headers, {\n                [key.toLowerCase()]: parts.join(':').trim(),\n            });\n        }, {});\n    }\n}\n","export default class RequestFactory {\n    /**\n     * @returns {RequestFactory}\n     */\n    static create() {\n        return new RequestFactory();\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} options\n     * @param {Function} [callback]\n     * @returns {XMLHttpRequest}\n     */\n    createRequest(url, options, callback) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.onerror = () => {\n            if (callback) {\n                callback(new Error(xhr.statusText));\n            }\n        };\n\n        xhr.onload = () => {\n            if (callback) {\n                callback();\n            }\n        };\n\n        xhr.open(options.method, url, true);\n        this.setOptions(xhr, options);\n\n        return xhr;\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} headers\n     * @returns {void}\n     */\n    setHeaders(xhr, headers) {\n        const headerKeys = Object.keys(headers);\n\n        headerKeys.forEach((key) => {\n            const value = headers[key];\n\n            xhr.setRequestHeader(key, value);\n        });\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} options\n     * @returns {void}\n     */\n    setOptions(xhr, options) {\n        xhr.withCredentials = options.withCredentials;\n\n        if (options.headers) {\n            this.setHeaders(xhr, options.headers);\n        }\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport ClientTokenMapper from './v2/payment-mappers/client-token-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class ClientTokenGenerator {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const clientTokenMapper = ClientTokenMapper.create();\n\n        return new ClientTokenGenerator(urlHelper, requestSender, clientTokenMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {ClientTokenMapper} clientTokenMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, clientTokenMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {ClientTokenMapper}\n         */\n        this.clientTokenMapper = clientTokenMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        const url = this.urlHelper.getGenerateClientTokenUrl();\n        const payload = this.clientTokenMapper.mapToClientToken(data);\n\n        this.requestSender.postRequest(url, payload, {}, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CartMapper from './cart-mapper';\nimport GatewayMapper from './gateway-mapper';\nimport QuoteMapper from './quote-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class ClientTokenMapper {\n    /**\n     * @returns {ClientTokenMapper}\n     */\n    static create() {\n        const cartMapper = CartMapper.create();\n        const gatewayMapper = GatewayMapper.create();\n        const quoteMapper = QuoteMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new ClientTokenMapper(cartMapper, gatewayMapper, quoteMapper, storeMapper);\n    }\n\n    /**\n     * @param {CartMapper} cartMapper\n     * @param {GatewayMapper} gatewayMapper\n     * @param {QuoteMapper} quoteMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(cartMapper, gatewayMapper, quoteMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CartMapper}\n         */\n        this.cartMapper = cartMapper;\n\n        /**\n         * @private\n         * @type {GatewayMapper}\n         */\n        this.gatewayMapper = gatewayMapper;\n\n        /**\n         * @private\n         * @type {QuoteMapper}\n         */\n        this.quoteMapper = quoteMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToClientToken(data) {\n        return omitNil({\n            cart: this.cartMapper.mapToCart(data),\n            gateway: this.gatewayMapper.mapToGateway(data),\n            quote: this.quoteMapper.mapToQuote(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class CartMapper {\n    /**\n     * @returns {CartMapper}\n     */\n    static create() {\n        return new CartMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCart(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            currency_code: cart.currency,\n            items: this.mapToItems(data),\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object[]}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            discount_amount: itemData.integerDiscount,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n            tax_amount: itemData.integerTax,\n            amount: itemData.integerAmountAfterDiscount,\n            type: this.mapToType(itemData),\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            discount_total: cart.discount ? cart.discount.integerAmount : null,\n            grand_total: cart.grandTotal ? cart.grandTotal.integerAmount : null,\n            shipping_total: cart.shipping ? cart.shipping.integerAmount : null,\n            subtotal: cart.subtotal ? cart.subtotal.integerAmount : null,\n            surcharge_total: cart.handling ? cart.handling.integerAmount : null,\n            tax_total: cart.taxTotal ? cart.taxTotal.integerAmount : null,\n        });\n    }\n\n    /**\n     * @private\n     * @param {Object} itemData\n     * @returns {Object}\n     */\n    mapToType(itemData) {\n        const types = {\n            ItemPhysicalEntity: 'physical',\n            ItemDigitalEntity: 'digital',\n            ItemGiftCertificateEntity: 'gift_card',\n        };\n\n        return types[itemData.type];\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\n\nexport default class GatewayMapper {\n    /**\n     * @returns {GatewayMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new GatewayMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToGateway(data) {\n        const { paymentMethod = {} } = data;\n\n        return omitNil({\n            name: this.paymentMethodIdMapper.mapToId(paymentMethod),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class QuoteMapper {\n    /**\n     * @returns {QuoteMapper}\n     */\n    static create() {\n        return new QuoteMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToQuote(data) {\n        return omitNil({\n            billing_address: this.mapToAddress(data, 'billingAddress'),\n            shipping_address: this.mapToAddress(data, 'shippingAddress'),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const { customer = {} } = data;\n        const address = data[addressKey] || {};\n\n        return omitNil({\n            address_line_1: address.addressLine1,\n            address_line_2: address.addressLine2,\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            email: customer.email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            postal_code: address.postCode,\n            state: address.province,\n        });\n    }\n}\n","import { omitNil, toNumber } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        return omitNil({\n            locale: this.mapToLocale(data),\n            store_identity: this.mapToIdentity(data),\n            urls: this.mapToUrls(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToLocale(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            country_code: store.countryCode,\n            currency_code: store.currencyCode,\n            language_code: store.storeLanguage,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToIdentity(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            id: store.storeId ? toNumber(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToUrls(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            cart: store.cartLink,\n            checkout: store.checkoutLink,\n            confirmation: store.orderConfirmationLink,\n            home: store.shopPath,\n        });\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport { DELETE, POST } from '../common/http-request/method-types';\nimport UrlHelper from './url-helper';\nimport {\n    mapToHeaders,\n    mapToInstrumentPayload,\n    mapToTrustedShippingAddressPayload,\n} from './v2/mappers';\n\nexport default class StoreRequestSender {\n    /**\n     * @param {Object} config\n     * @returns {StoreRequestSender}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n\n        return new StoreRequestSender(urlHelper, requestSender);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        const url = this.urlHelper.getTrustedShippingAddressUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToTrustedShippingAddressPayload(data);\n        const options = {\n            method: POST,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToInstrumentPayload(data);\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentByIdUrl(\n            data.storeId,\n            data.customerId,\n            data.instrumentId\n        );\n        const options = {\n            method: DELETE,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     * @throws {Error}\n     */\n    get host() {\n        if (!this.config || !this.config.host) {\n            throw new Error('Host URL unavailable or not supplied.');\n        }\n\n        return this.config.host;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    getInstrumentsUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @return {string}\n     */\n    getTrustedShippingAddressUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/trusted_shipping_address?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {number} instrumentId\n     * @returns {string}\n     */\n    getInstrumentByIdUrl(storeId, customerId, instrumentId) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/${instrumentId}`;\n    }\n}\n"],"sourceRoot":""}