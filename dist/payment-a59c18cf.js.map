{"version":3,"file":"payment-a59c18cf.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./packages/core/src/app/coupon/AppliedCoupon.tsx","webpack://checkout/./packages/core/src/app/giftCertificate/AppliedGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconRemove.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemable.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemables.tsx","webpack://checkout/./packages/core/src/app/cart/Redeemable.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentContext.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodProviderType.ts","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/core/src/app/ui/form/withForm.tsx","webpack://checkout/./packages/core/src/app/cart/mapToRedeemableProps.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormContext.tsx","webpack://checkout/./packages/core/src/app/payment/withPayment.tsx","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalLink.tsx","webpack://checkout/./packages/core/src/app/ui/text/MultiLineText.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./packages/core/src/app/payment/mapSubmitOrderErrorMessage.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getUniquePaymentMethodId.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardFieldsetValues.ts","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./packages/core/src/app/payment/getPaymentValidationSchema.ts","webpack://checkout/./packages/core/src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./packages/core/src/app/ui/form/CustomChecklistItem.tsx","webpack://checkout/./packages/bigcommerce-payments-utils/src/BigCommercePaymentsPayLaterBanner.tsx","webpack://checkout/./packages/paypal-utils/src/BraintreePaypalCreditBanner.tsx","webpack://checkout/./packages/paypal-utils/src/PaypalCommerceCreditBanner.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIconList.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodTitle.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodDisplayName.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardFieldsetValues.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormProvider.tsx","webpack://checkout/./packages/core/src/app/generated/paymentIntegrations/index.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodV2.tsx","webpack://checkout/./packages/core/src/app/payment/resolvePaymentMethod.ts","webpack://checkout/./packages/core/src/app/payment/createPaymentFormService.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodList.tsx","webpack://checkout/./packages/core/src/app/common/utility/isMobile.ts","webpack://checkout/./packages/core/src/app/payment/PaymentRedeemables.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentSubmitButton.tsx","webpack://checkout/./packages/core/src/app/payment/SpamProtectionField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditOverlay.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentForm.tsx","webpack://checkout/./packages/core/src/app/payment/Payment.tsx","webpack://checkout/./packages/core/src/app/payment/mapToOrderRequestBody.ts","webpack://checkout/./packages/core/src/app/common/error/isCartChangedError.ts","webpack://checkout/./packages/dom-utils/src/parseAnchor.ts","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIcon.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./packages/ui/src/icon/mapFromPaymentMethodCardType.ts"],"sourcesContent":["import classNames from 'classnames';\nimport React, {\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n    useContext,\n} from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div aria-live=\"polite\" className={bodyClassName}>\n                        {children}\n                    </div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { type FunctionComponent, type InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { type FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, type AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { type Placement } from '@popperjs/core';\nimport React, { type ReactEventHandler, type ReactNode, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children: ReactNode;\n}\n\nconst TooltipTrigger: React.FC<TooltipTriggerProps> = ({\n    placement = 'bottom',\n    tooltip,\n    children,\n}) => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const handleShow: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(true);\n    };\n\n    const handleHide: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(false);\n    };\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <span\n                        onBlur={handleHide}\n                        onFocus={handleShow}\n                        onMouseEnter={handleShow}\n                        onMouseLeave={handleHide}\n                        ref={ref}\n                    >\n                        {children}\n                    </span>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    shouldShow && (\n                        <div ref={ref} style={style}>\n                            {tooltip}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default TooltipTrigger;\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type Coupon } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface AppliedCouponProps {\n    coupon: Coupon;\n}\n\nconst AppliedCoupon: FunctionComponent<AppliedCouponProps> = ({ coupon }) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--coupon\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"coupon-amount\">\n                {coupon.displayName}\n            </span>{' '}\n            <TranslatedString id=\"redeemable.coupon_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\" data-test=\"coupon-code\">\n            {coupon.code}\n        </span>\n    </div>\n);\n\nexport default memo(AppliedCoupon);\n","import { type GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { ShopperCurrency } from '../currency';\n\nexport interface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n}\n\nconst AppliedGiftCertificate: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n}) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--giftCertificate\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"giftCertificate-amount\">\n                <ShopperCurrency amount={giftCertificate.used} />\n            </span>{' '}\n            <TranslatedString id=\"redeemable.gift_certificate_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\">\n            {giftCertificate.remaining > 0 && (\n                <span className=\"redeemable-info-subHeader--remaining\">\n                    <TranslatedString id=\"redeemable.gift_certificate_remaining_text\" />{' '}\n                    <span data-test=\"giftCertificate-remaining\">\n                        <ShopperCurrency amount={giftCertificate.remaining} />\n                    </span>\n                </span>\n            )}\n\n            <span data-test=\"giftCertificate-code\">{giftCertificate.code}</span>\n        </span>\n    </div>\n);\n\nexport default memo(AppliedGiftCertificate);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconRemove: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconRemove);\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconRemove } from '../ui/icon';\n\nimport './AppliedRedeemable.scss';\n\nexport interface AppliedRedeemableProps {\n    children: ReactNode;\n    isRemoving: boolean;\n    onRemove(): void;\n}\n\nconst AppliedRedeemable: FunctionComponent<AppliedRedeemableProps> = ({\n    children,\n    isRemoving,\n    onRemove,\n}) => (\n    <div className=\"form-checklist-header\">\n        <div className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\">\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"redeemable.applied_text\" />\n            </span>\n        </div>\n\n        <div className=\"form-label form-label-redeemable\">\n            <div className=\"redeemable\">\n                {children}\n                <div className=\"redeemable-column redeemable-actions\">\n                    <button\n                        className={classNames('redeemable-remove', { 'is-loading': isRemoving })}\n                        data-test=\"redeemable-remove\"\n                        disabled={isRemoving}\n                        onClick={onRemove}\n                        type=\"button\"\n                    >\n                        <IconRemove />\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default AppliedRedeemable;\n","import { type Coupon, type GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { AppliedCoupon } from '../coupon';\nimport { AppliedGiftCertificate } from '../giftCertificate';\n\nimport AppliedRedeemable from './AppliedRedeemable';\n\ninterface AppliedCouponProps {\n    coupon: Coupon;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedCouponChecklistItem: FunctionComponent<AppliedCouponProps> = ({\n    coupon,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(coupon.code);\n    }, [coupon, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedCoupon coupon={coupon} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\ninterface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedGiftCertificateChecklistItem: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(giftCertificate.code);\n    }, [giftCertificate, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedGiftCertificate giftCertificate={giftCertificate} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\nexport interface AppliedRedeemablesProps {\n    coupons?: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    isRemovingGiftCertificate?: boolean;\n    isRemovingCoupon?: boolean;\n    onRemovedCoupon(code: string): void;\n    onRemovedGiftCertificate(code: string): void;\n}\n\nconst AppliedRedeemables: FunctionComponent<AppliedRedeemablesProps> = ({\n    coupons = [],\n    giftCertificates = [],\n    isRemovingCoupon = false,\n    isRemovingGiftCertificate = false,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n}) => {\n    if (!coupons.length && !giftCertificates.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"form-checklist optimizedCheckout-form-checklist\"\n            data-test=\"redeemables-list\"\n        >\n            {coupons.map((coupon) => (\n                <AppliedCouponChecklistItem\n                    coupon={coupon}\n                    isRemoving={isRemovingCoupon}\n                    key={coupon.code}\n                    onRemoved={onRemovedCoupon}\n                />\n            ))}\n\n            {giftCertificates.map((giftCertificate) => (\n                <AppliedGiftCertificateChecklistItem\n                    giftCertificate={giftCertificate}\n                    isRemoving={isRemovingGiftCertificate}\n                    key={giftCertificate.code}\n                    onRemoved={onRemovedGiftCertificate}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(AppliedRedeemables);\n","import { type CheckoutSelectors, type RequestError } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport classNames from 'classnames';\nimport { type FieldProps, type FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { type FunctionComponent, type KeyboardEvent, memo, type ReactNode, useCallback } from 'react';\nimport { object, string } from 'yup';\n\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { type FormContextType, FormProvider } from '@bigcommerce/checkout/ui';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { FormField, Label, TextInput } from '../ui/form';\nimport { Toggle } from '../ui/toggle';\n\nimport AppliedRedeemables, { type AppliedRedeemablesProps } from './AppliedRedeemables';\n\nexport interface RedeemableFormValues {\n    redeemableCode: string;\n}\n\nexport type ReedemableChildrenProps = Pick<\n    RedeemableProps,\n    | 'onRemovedCoupon'\n    | 'onRemovedGiftCertificate'\n    | 'isRemovingGiftCertificate'\n    | 'isRemovingCoupon'\n    | 'coupons'\n    | 'giftCertificates'\n>;\n\nexport type RedeemableProps = {\n    appliedRedeemableError?: RequestError;\n    isApplyingRedeemable?: boolean;\n    isRemovingRedeemable?: boolean;\n    removedRedeemableError?: RequestError;\n    showAppliedRedeemables?: boolean;\n    shouldCollapseCouponCode?: boolean;\n    applyCoupon(code: string): Promise<CheckoutSelectors>;\n    applyGiftCertificate(code: string): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n} & AppliedRedeemablesProps;\n\nconst Redeemable: FunctionComponent<\n    RedeemableProps & WithLanguageProps & FormikProps<RedeemableFormValues>\n    > = ({ shouldCollapseCouponCode, showAppliedRedeemables, ...formProps }) => {\n        const { themeV2 } = useThemeContext();\n\n        return (\n            <Toggle openByDefault={!shouldCollapseCouponCode}>\n                {({ toggle, isOpen }): ReactNode => (\n                    <>\n                        {shouldCollapseCouponCode && (\n                            <a\n                                aria-controls=\"redeemable-collapsable\"\n                                aria-expanded={isOpen}\n                                className={classNames('redeemable-label', { 'body-cta': themeV2 })}\n                                data-test=\"redeemable-label\"\n                                href=\"#\"\n                                onClick={preventDefault(toggle)}\n                            >\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </a>\n                        )}\n                        {!shouldCollapseCouponCode && (\n                            <div className={classNames('redeemable-label', { 'body-cta': themeV2 })}>\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </div>\n                        )}\n                        {(isOpen || !shouldCollapseCouponCode) && (\n                            <div data-test=\"redeemable-collapsable\" id=\"redeemable-collapsable\">\n                                <RedeemableForm {...formProps} />\n                                {showAppliedRedeemables && <AppliedRedeemables {...formProps} />}\n                            </div>\n                        )}\n                    </>\n                )}\n            </Toggle>\n        );\n    }\n\nconst RedeemableForm: FunctionComponent<\n    Partial<RedeemableProps> & FormikProps<RedeemableFormValues> & WithLanguageProps\n> = ({ appliedRedeemableError, isApplyingRedeemable, clearError = noop, submitForm, language }) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleSubmitForm = (setSubmitted: FormContextType['setSubmitted']) => {\n        if (isSubmittingOrder()) {\n            return;\n        }\n\n        setSubmitted(true);\n        submitForm();\n    }\n\n    const handleKeyDown = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => (event: KeyboardEvent) => {\n            if (appliedRedeemableError) {\n                clearError(appliedRedeemableError);\n            }\n\n            // note: to prevent submitting main form, we manually intercept\n            // the enter key event and submit the \"subform\".\n            if (event.keyCode === 13 || event.key === 'Enter') {\n                handleSubmitForm(setSubmitted);\n                event.preventDefault();\n            }\n        }),\n        [appliedRedeemableError, clearError, submitForm],\n    );\n\n    const handleSubmit = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => () => {\n            handleSubmitForm(setSubmitted);\n        }),\n        [],\n    );\n\n    const renderLabel = useCallback(\n        (name: string) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"redeemable.code_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderErrorMessage = useCallback((errorCode: string, errorMessage?: string) => {\n        switch (errorCode) {\n            case 'min_purchase':\n                return <TranslatedString id=\"redeemable.coupon_min_order_total\" />;\n\n            case 'not_applicable':\n                return <TranslatedString id=\"redeemable.coupon_location_error\" />;\n\n            default:\n                return errorMessage || <TranslatedString id=\"redeemable.code_invalid_error\" />;\n        }\n    }, []);\n\n    const renderInput = useCallback(\n        (setSubmitted: FormContextType['setSubmitted']) =>\n            ({ field }: FieldProps) =>\n                (\n                    <>\n                        {appliedRedeemableError &&\n                            appliedRedeemableError.errors &&\n                            appliedRedeemableError.errors[0] && (\n                                <Alert type={AlertType.Error}>\n                                    {renderErrorMessage(appliedRedeemableError.errors[0].code, appliedRedeemableError.errors[0].message)}\n                                </Alert>\n                            )}\n\n                        <div className=\"form-prefixPostfix\">\n                            <TextInput\n                                {...field}\n                                aria-label={language.translate('redeemable.code_label')}\n                                className=\"form-input optimizedCheckout-form-input\"\n                                onKeyDown={handleKeyDown(setSubmitted)}\n                                testId=\"redeemableEntry-input\"\n                                themeV2={themeV2}\n                            />\n\n                            <Button\n                                className={classNames('form-prefixPostfix-button--postfix', {\n                                    'body-bold': themeV2,\n                                })}\n                                disabled={isSubmittingOrder()}\n                                id=\"applyRedeemableButton\"\n                                isLoading={isApplyingRedeemable}\n                                onClick={handleSubmit(setSubmitted)}\n                                testId=\"redeemableEntry-submit\"\n                                variant={ButtonVariant.Secondary}\n                            >\n                                <TranslatedString id=\"redeemable.apply_action\" />\n                            </Button>\n                        </div>\n                    </>\n                ),\n        [\n            appliedRedeemableError,\n            handleKeyDown,\n            handleSubmit,\n            isApplyingRedeemable,\n            language,\n            isSubmittingOrder,\n            renderErrorMessage,\n        ],\n    );\n\n    const renderContent = useCallback(\n        memoizeOne(({ setSubmitted }: FormContextType) => (\n            <FormField\n                input={renderInput(setSubmitted)}\n                label={renderLabel}\n                name=\"redeemableCode\"\n            />\n        )),\n        [renderLabel, renderInput],\n    );\n\n    return (\n        <fieldset className=\"form-fieldset redeemable-entry\">\n            <FormProvider>{renderContent}</FormProvider>\n        </fieldset>\n    );\n};\n\nexport default withLanguage(\n    withFormik<RedeemableProps & WithLanguageProps, RedeemableFormValues>({\n        mapPropsToValues() {\n            return {\n                redeemableCode: '',\n            };\n        },\n\n        async handleSubmit(\n            { redeemableCode },\n            { props: { applyCoupon, applyGiftCertificate, clearError } },\n        ) {\n            const code = redeemableCode.trim();\n\n            try {\n                await applyGiftCertificate(code);\n            } catch (error) {\n                if (error instanceof Error) {\n                    clearError(error);\n                }\n\n                applyCoupon(code);\n            }\n        },\n\n        validationSchema({ language }: RedeemableProps & WithLanguageProps) {\n            return object({\n                redeemableCode: string().required(\n                    language.translate('redeemable.code_required_error'),\n                ),\n            });\n        },\n    })(memo(Redeemable)),\n);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import classNames from 'classnames';\nimport React, { forwardRef, type ReactNode, type Ref } from 'react';\n\nimport Input, { type InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n    themeV2?: boolean;\n}\n\nconst CheckboxInput = forwardRef(\n    (\n        { additionalClassName, label, id, testId, themeV2 = false, ...rest }: CheckboxInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                className={classNames(\n                    'form-checkbox',\n                    'optimizedCheckout-form-checkbox',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                testId={testId}\n                type=\"checkbox\"\n            />\n            <Label additionalClassName={themeV2 ? 'body-regular' : ''} htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default CheckboxInput;\n","import { type FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n    testId?: string;\n    themeV2?: boolean;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n    testId,\n    themeV2 = false,\n}) => {\n    const renderField = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <CheckboxInput\n                    {...field}\n                    checked={!!field.value}\n                    disabled={disabled}\n                    id={id || field.name}\n                    label={labelContent}\n                    testId={testId}\n                    themeV2={themeV2}\n                />\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n            </>\n        ),\n        [disabled, id, labelContent, name],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(CheckboxFormField);\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nconst PaymentContext = createContext<PaymentContextProps | undefined>(undefined);\n\nexport default PaymentContext;\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","enum PaymentMethodProviderType {\n    Api = 'PAYMENT_TYPE_API',\n    Hosted = 'PAYMENT_TYPE_HOSTED',\n    Offline = 'PAYMENT_TYPE_OFFLINE',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n}\n\nexport default PaymentMethodProviderType;\n","import React, { type FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    children: React.ReactNode;\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\nimport { FormContext, type FormContextType } from '@bigcommerce/checkout/ui';\n\nexport type WithFormProps = FormContextType;\n\nconst withForm = createInjectHoc(FormContext, { displayNamePrefix: 'WithForm' });\n\nexport default withForm;\n","import { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { EMPTY_ARRAY } from '../common/utility';\n\nimport { type RedeemableProps } from './Redeemable';\n\nexport default function mapToRedeemableProps(\n    context: CheckoutContextProps,\n): RedeemableProps | null {\n    const {\n        checkoutService,\n        checkoutState: {\n            data: { getConfig, getCoupons, getGiftCertificates },\n            statuses: {\n                isApplyingCoupon,\n                isApplyingGiftCertificate,\n                isRemovingCoupon,\n                isRemovingGiftCertificate,\n            },\n            errors: {\n                getApplyCouponError,\n                getApplyGiftCertificateError,\n                getRemoveCouponError,\n                getRemoveGiftCertificateError,\n            },\n        },\n    } = context;\n\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        appliedRedeemableError: getApplyCouponError() || getApplyGiftCertificateError(),\n        applyCoupon: checkoutService.applyCoupon,\n        applyGiftCertificate: checkoutService.applyGiftCertificate,\n        clearError: checkoutService.clearError,\n        coupons: getCoupons() || EMPTY_ARRAY,\n        giftCertificates: getGiftCertificates() || EMPTY_ARRAY,\n        isApplyingRedeemable: isApplyingCoupon() || isApplyingGiftCertificate(),\n        isRemovingCoupon: isRemovingCoupon(),\n        isRemovingGiftCertificate: isRemovingGiftCertificate(),\n        onRemovedCoupon: checkoutService.removeCoupon,\n        onRemovedGiftCertificate: checkoutService.removeGiftCertificate,\n        removedRedeemableError: getRemoveCouponError() || getRemoveGiftCertificateError(),\n        shouldCollapseCouponCode: config.checkoutSettings.isCouponCodeCollapsed,\n    };\n}\n","import { createContext, useContext } from 'react';\n\nimport type PaymentMethodProps from '../../PaymentMethodProps';\n\nexport type PaymentFormContextProps = Pick<PaymentMethodProps, 'paymentForm'>;\n\nexport const PaymentFormContext = createContext<PaymentFormContextProps | undefined>(undefined);\n\nexport function usePaymentFormContext() {\n    const context = useContext(PaymentFormContext);\n\n    if (!context) {\n        throw new Error('usePaymentFormContext must be used within a PaymentFormContextProvider');\n    }\n\n    return context;\n}\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport PaymentContext, { type PaymentContextProps } from './PaymentContext';\n\nexport type WithPaymentProps = PaymentContextProps;\n\nconst withPayment = createInjectHoc(PaymentContext, { displayNamePrefix: 'WithPayment' });\n\nexport default withPayment;\n","import classNames from 'classnames';\nimport React, { forwardRef, type Ref, type TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n    isFloatingLabelEnabled?: boolean;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, isFloatingLabelEnabled, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => {\n        return (\n            <textarea\n                {...rest}\n                className={\n                    className ||\n                    classNames(\n                        { 'floating-textarea': isFloatingLabelEnabled },\n                        'form-input',\n                        'optimizedCheckout-form-input',\n                        additionalClassName,\n                    )\n                }\n                data-test={testId}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default TextArea;\n","import React, { type FunctionComponent, type ReactNode, useCallback } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize } from '../button';\n\nimport Modal from './Modal';\nimport './ModalLink.scss';\nimport ModalTrigger, { type ModalTriggerModalProps } from './ModalTrigger';\n\nexport interface ModalLinkProps {\n    header: ReactNode;\n    body: ReactNode;\n    children?: ReactNode;\n}\n\nconst ModalLink: FunctionComponent<ModalLinkProps> = ({ children, body, header }) => {\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <Modal\n                {...props}\n                additionalBodyClassName=\"modal--withText\"\n                footer={\n                    <Button onClick={props.onRequestClose} size={ButtonSize.Small}>\n                        <TranslatedString id=\"common.ok_action\" />\n                    </Button>\n                }\n                header={header}\n                shouldShowCloseButton={true}\n            >\n                {body}\n            </Modal>\n        ),\n        [header, body],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            { }\n            {({ onClick }) => <a onClick={preventDefault(onClick)}>{children}</a>}\n        </ModalTrigger>\n    );\n};\n\nexport default ModalLink;\n","import React, { Fragment, type FunctionComponent } from 'react';\n\nconst MultiLineText: FunctionComponent<{ children: string }> = ({ children }) => (\n    <>\n        {children.split('\\n').map((line, key) => (\n            <Fragment key={key}>\n                {line}\n                <br />\n            </Fragment>\n        ))}\n    </>\n);\n\nexport default MultiLineText;\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { parseAnchor } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedHtml, TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField, Fieldset, FormField, Legend, TextArea } from '../ui/form';\nimport { ModalHeader, ModalLink } from '../ui/modal';\nimport { MultiLineText } from '../ui/text';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n    Modal = 'modal',\n}\n\nexport type TermsConditionsFieldProps =\n    | TermsConditionsLinkFieldProps\n    | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea | TermsConditionsType.Modal;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst BaseTermsConditionsModalCheckboxField: FunctionComponent<\n    TermsConditionsTextFieldProps & WithLanguageProps\n> = ({ language, name, terms }) => {\n    const translatedLabel = language.translate('terms_and_conditions.agreement_with_link_text', {\n        url: '',\n    });\n    const parsedLabel = parseAnchor(translatedLabel);\n\n    const labelContent = parsedLabel ? (\n        <>\n            {parsedLabel[0]}\n            <ModalLink\n                body={<MultiLineText>{terms}</MultiLineText>}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"terms_and_conditions.heading\" />\n                    </ModalHeader>\n                }\n            >\n                {parsedLabel[1]}\n            </ModalLink>\n            {parsedLabel[2]}\n        </>\n    ) : (\n        translatedLabel\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsModalCheckboxField = withLanguage(BaseTermsConditionsModalCheckboxField);\n\ninterface TermsConditionsCheckboxFieldProps {\n    name: string;\n    type: TermsConditionsType;\n    url?: string;\n}\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsCheckboxFieldProps> = ({\n    name,\n    url,\n}) => {\n    const labelContent = useMemo(\n        () =>\n            url ? (\n                <TranslatedHtml data={{ url }} id=\"terms_and_conditions.agreement_with_link_text\" />\n            ) : (\n                <TranslatedString id=\"terms_and_conditions.agreement_text\" />\n            ),\n        [url],\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsTextField: FunctionComponent<TermsConditionsTextFieldProps> = ({\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextArea defaultValue={terms} name={field.name} readOnly />,\n        [terms],\n    );\n\n    return <FormField input={renderInput} name={`${name}Text`} />;\n};\n\nconst TermsConditionsFieldset: FunctionComponent<TermsConditionsFieldProps> = (props) => {\n    const { type } = props;\n\n    return (\n        <Fieldset\n            additionalClassName=\"checkout-terms\"\n            legend={\n                <Legend>\n                    <TranslatedString id=\"terms_and_conditions.terms_and_conditions_heading\" />\n                </Legend>\n            }\n        >\n            {isTermsConditionsTextArea(props) && <TermsConditionsTextField {...props} />}\n            {isTermsConditionModal(props) && type === TermsConditionsType.Modal ? (\n                <TermsConditionsModalCheckboxField {...props} />\n            ) : (\n                <TermsConditionsCheckboxField {...props} />\n            )}\n        </Fieldset>\n    );\n};\n\nfunction isTermsConditionsTextArea(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nfunction isTermsConditionModal(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.Modal;\n}\n\nexport default memo(TermsConditionsFieldset);\n","import { type TranslationData } from '@bigcommerce/checkout-sdk';\nimport { includes } from 'lodash';\n\nexport default function mapSubmitOrderErrorMessage(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n    shouldLocalise: boolean,\n): string {\n    switch (error.type) {\n        case 'not_initialized':\n            return translate('payment.payment_error');\n\n        case 'custom_provider_execute_error':\n            return translate(error.subtype);\n\n        case 'payment_cancelled':\n            return translate('payment.payment_cancelled');\n\n        case 'payment_method_invalid':\n            return translate('payment.payment_method_disabled_error');\n\n        case 'tax_provider_unavailable':\n            return translate('payment.tax_provider_unavailable');\n\n        case 'cart_changed':\n            return translate('shipping.cart_change_error');\n\n        case 'cart_consistency':\n            return translate('cart.consistency_error');\n        \n        case 'empty_cart':\n            return translate('cart.empty_cart_error_message');\n\n        default:\n            if (\n                includes(\n                    [\n                        'order_could_not_be_finalized_error',\n                        'provider_fatal_error',\n                        'payment_invalid',\n                        'provider_error',\n                        'provider_widget_error',\n                        'user_payment_error',\n                    ],\n                    error.body && error.body.type,\n                )\n            ) {\n                return translate('payment.payment_method_error', { message: error.message });\n            }\n\n            if (shouldLocalise && error.body && error.body.errors && error.body.errors.length) {\n                const messages = error.body.errors.map((err: { code: any }) =>\n                    translate(`payment.errors.${err.code}`),\n                );\n\n                return messages.join(' ');\n            }\n\n            if (error.message) {\n                return error.message;\n            }\n\n            return error.type === 'unrecoverable'\n                ? translate('common.unavailable_error')\n                : translate('payment.place_order_error');\n    }\n}\n\nexport function mapSubmitOrderErrorTitle(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n): string {\n    if (error.type === 'unrecoverable') {\n        return translate('common.unavailable_heading');\n    }\n\n    if (error.type === 'missing_shipping_method') {\n        return translate('common.missing_shipping_method_heading');\n    }\n\n    if (error.type === 'invalid_shipping_address') {\n        return translate('common.invalid_shipping_address');\n    }\n\n    return translate('common.error_heading');\n}\n","export interface ExpiryDate {\n    month: string;\n    year: string;\n}\n\nexport default function unformatCreditCardExpiryDate(value: string): ExpiryDate {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n\n    if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n        return { month: '', year: '' };\n    }\n\n    return {\n        month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n        year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n    };\n}\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n\nexport function parseUniquePaymentMethodId(value: string): {\n    methodId: string;\n    gatewayId?: string;\n} {\n    const [gatewayId, methodId] = value.includes('-') ? value.split('-') : [undefined, value];\n\n    return { gatewayId, methodId };\n}\n","import { type CardInstrumentFieldsetValues } from '../storedInstrument';\n\nexport default interface CreditCardFieldsetValues {\n    ccCustomerCode?: string;\n    ccCvv?: string;\n    ccExpiry: string;\n    ccName: string;\n    ccNumber: string;\n    shouldSaveInstrument?: boolean;\n}\n\nexport interface CreditCardValidationValues extends CardInstrumentFieldsetValues {\n    ccCvv?: string;\n    ccNumber?: string;\n}\n\nexport function hasCreditCardNumber(values: unknown): values is { ccNumber: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccNumber' in values;\n}\n\nexport function hasCreditCardExpiry(values: unknown): values is { ccExpiry: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccExpiry' in values;\n}\n","import React, { type FunctionComponent } from 'react';\n\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        {termsConditionsUrl ? (\n            <TermsConditionsField\n                name=\"terms\"\n                type={TermsConditionsType.Link}\n                url={termsConditionsUrl}\n            />\n        ) : (\n            <TermsConditionsField\n                name=\"terms\"\n                terms={termsConditionsText}\n                type={TermsConditionsType.TextArea}\n            />\n        )}\n    </>\n);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, type ObjectSchema, string, type StringSchema } from 'yup';\n\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { getTermsConditionsValidationSchema } from '../termsConditions';\n\nexport interface PaymentValidationSchemaOptions {\n    additionalValidation?: ObjectSchema<Partial<PaymentFormValues>>;\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPaymentValidationSchema({\n    additionalValidation,\n    isTermsConditionsRequired,\n    language,\n}: PaymentValidationSchemaOptions): ObjectSchema<PaymentFormValues> {\n    const schemaFields: {\n        paymentProviderRadio: StringSchema;\n    } = {\n        paymentProviderRadio: string().required(),\n    };\n\n    const schemaFieldsWithTerms = object(schemaFields).concat(\n        getTermsConditionsValidationSchema({ isTermsConditionsRequired, language }),\n    );\n\n    return additionalValidation\n        ? schemaFieldsWithTerms.concat(additionalValidation as any)\n        : schemaFieldsWithTerms;\n}\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, type BooleanSchema, object, type ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean().oneOf(\n            [true],\n            language.translate('terms_and_conditions.agreement_required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import React, { type FunctionComponent, memo, type ReactNode } from 'react';\n\nexport interface CustomChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n}\n\nconst CustomChecklistItem: FunctionComponent<CustomChecklistItemProps> = ({\n    content,\n    htmlId,\n}) => {\n    return (\n        <li\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item custom-checklist-item\"\n            id={htmlId}\n        >\n            {content}\n        </li>\n    );\n};\n\nexport default memo(CustomChecklistItem);\n","import { createBigCommercePaymentsPayLaterPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/bigcommerce-payments';\nimport React, { type FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsPayLaterBanner: FunctionComponent<{\n    onUnhandledError?(error: Error): void\n}> = ({ onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n                integrations: [createBigCommercePaymentsPayLaterPaymentStrategy],\n                bigcommerce_payments_paylater: {\n                    bannerContainerId: 'bigcommerce-payments-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n    }, []);\n\n    return (\n        <div\n            data-test='bigcommerce-payments-banner-container'\n            id='bigcommerce-payments-banner-container'\n        />\n    );\n};\n\nexport default BigCommercePaymentsPayLaterBanner;\n","import { createBraintreePaypalPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\ninterface BraintreePaypalCreditBannerProps {\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst BraintreePaypalCreditBanner: FunctionComponent<BraintreePaypalCreditBannerProps> = ({\n    methodId,\n    containerId,\n    onUnhandledError,\n}) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                integrations: [createBraintreePaypalPaymentStrategy],\n                braintree: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n\n        return () => {\n            try {\n                void checkoutService.deinitializePayment({\n                    methodId,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError?.(error);\n                }\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default BraintreePaypalCreditBanner;\n","import {\n    createPayPalCommerceCreditPaymentStrategy,\n    createPayPalCommercePaymentStrategy,\n} from '@bigcommerce/checkout-sdk/integrations/paypal-commerce';\nimport React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst PaypalCommerceCreditBanner: FunctionComponent<{\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}> = ({ methodId, containerId, onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                integrations: [\n                    createPayPalCommerceCreditPaymentStrategy,\n                    createPayPalCommercePaymentStrategy,\n                ],\n                [methodId]: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default PaypalCommerceCreditBanner;\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { CreditCardIcon, filterInstrumentTypes } from './';\n\nexport interface CreditCardIconListProps {\n    selectedCardType?: string;\n    cardTypes: string[];\n}\n\nconst CreditCardIconList: FunctionComponent<CreditCardIconListProps> = ({\n    selectedCardType,\n    cardTypes,\n}) => {\n    const filteredCardTypes = filterInstrumentTypes(cardTypes);\n\n    if (!filteredCardTypes.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"creditCardTypes-list\">\n            {filteredCardTypes.map((type) => (\n                <li\n                    className={classNames(\n                        'creditCardTypes-list-item',\n                        { 'is-active': selectedCardType === type },\n                        { 'not-active': selectedCardType && selectedCardType !== type },\n                    )}\n                    data-test={`${type}-icon`}\n                    key={type}\n                >\n                    <span className=\"cardIcon\">\n                        <CreditCardIcon cardType={type} />\n                    </span>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(CreditCardIconList);\n","import { type CardInstrument, type CheckoutSettings, type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport classNames from 'classnames';\nimport { compact } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode } from 'react';\n\nimport { BigCommercePaymentsPayLaterBanner } from '@bigcommerce/checkout/bigcommerce-payments-utils'\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps , type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { BraintreePaypalCreditBanner, PaypalCommerceCreditBanner } from '@bigcommerce/checkout/paypal-utils';\nimport { CreditCardIconList, mapFromPaymentMethodCardType } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\n\nimport { hasCreditCardNumber } from './CreditCardFieldsetValues';\nimport getPaymentMethodDisplayName from './getPaymentMethodDisplayName';\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { isHostedCreditCardFieldsetValues } from './HostedCreditCardFieldsetValues';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodTitleProps {\n    method: PaymentMethod;\n    isSelected?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithPaymentTitleProps {\n    instruments: CardInstrument[];\n    checkoutSettings: CheckoutSettings;\n    storeCountryCode: string;\n    cdnBasePath: string;\n}\n\ninterface PaymentMethodSubtitleProps {\n    onUnhandledError?(error: Error): void;\n    methodId: string;\n}\n\ntype SubtitleType = ReactNode | ((subtitleProps?: PaymentMethodSubtitleProps) => ReactNode);\n\nexport function getPaymentMethodTitle(\n    language: LanguageService,\n    basePath: string,\n    checkoutSettings: CheckoutSettings,\n    storeCountryCode: string,\n): (method: PaymentMethod) => {\n    logoUrl: string;\n    titleText: string,\n    subtitle?: SubtitleType\n} {\n    const cdnPath = (path: string) => `${basePath}${path}`;\n\n    return (method) => {\n        const paymentWithLogo = method.initializationData?.methodsWithLogo\n            ? method.initializationData.methodsWithLogo\n            : [];\n        const methodName = getPaymentMethodName(language)(method);\n        const methodDisplayName = getPaymentMethodDisplayName(language)(method);\n        // TODO: API could provide the data below so UI can read simply read it.\n        // However, I'm not sure how we deal with translation yet. TBC.\n        const customTitles: { [key: string]: { logoUrl: string; titleText: string, subtitle?: ReactNode | ((props: any) => ReactNode) } } = {\n            [PaymentMethodType.CreditCard]: {\n                logoUrl: '',\n                titleText: methodName,\n            },\n            [PaymentMethodId.BraintreeVenmo]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.BraintreePaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps): ReactNode => (\n                    <BraintreePaypalCreditBanner containerId='braintree-credit-banner-container' {...props} />\n                ),\n            },\n            [PaymentMethodType.PaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeAch]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeLocalPaymentMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BigCommercePaymentsPayPal]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsPayLater]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.PaypalCommerce]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-credit-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodType.VisaCheckout]: {\n                logoUrl: cdnPath('/img/payment-providers/visa-checkout.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.Affirm]: {\n                logoUrl: cdnPath('/img/payment-providers/affirm-checkout-header.png'),\n                titleText: language.translate('payment.affirm_display_name_text'),\n            },\n            [PaymentMethodId.Afterpay]: {\n                logoUrl: isExperimentEnabled(checkoutSettings, 'PROJECT-6993.change_afterpay_logo_for_us_stores') && storeCountryCode === 'US' ? cdnPath('/img/payment-providers/afterpay-new-us.svg') : cdnPath('/img/payment-providers/afterpay-badge-blackonmint.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.AmazonPay]: {\n                logoUrl: cdnPath('/img/payment-providers/amazon-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.ApplePay]: {\n                logoUrl: cdnPath('/modules/checkout/applepay/images/applepay-header@2x.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Bolt]: {\n                logoUrl: '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Clearpay]: {\n                logoUrl: cdnPath('/img/payment-providers/clearpay-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.GooglePay]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.PayWithGoogle]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Humm]: {\n                logoUrl: cdnPath('/img/payment-providers/humm-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Klarna]: {\n                logoUrl: method.initializationData?.enableBillie\n                        ? cdnPath('/img/payment-providers/klarna-billie-header.png')\n                        : cdnPath('/img/payment-providers/klarna-header.png'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Laybuy]: {\n                logoUrl: cdnPath('/img/payment-providers/laybuy-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Masterpass]: {\n                logoUrl: 'https://masterpass.com/dyn/img/acc/global/mp_mark_hor_blk.svg',\n                titleText: '',\n            },\n            [PaymentMethodType.Paypal]: {\n                // TODO: method.id === PaymentMethodId.BraintreeVenmo should be removed after the PAYPAL-1380.checkout_button_strategies_update experiment removal\n                logoUrl:\n                    method.id === PaymentMethodId.BraintreeVenmo && method.logoUrl\n                        ? method.logoUrl\n                        : cdnPath('/img/payment-providers/paypalpaymentsprouk.png'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps): ReactNode => (\n                    <BraintreePaypalCreditBanner containerId='braintree-banner-container' {...props} />\n                ),\n            },\n            [PaymentMethodId.Quadpay]: {\n                logoUrl: cdnPath('/img/payment-providers/quadpay.png'),\n                titleText: language.translate('payment.quadpay_display_name_text'),\n            },\n            [PaymentMethodId.Sezzle]: {\n                logoUrl: cdnPath('/img/payment-providers/sezzle-checkout-header.png'),\n                titleText: language.translate('payment.sezzle_display_name_text'),\n            },\n            [PaymentMethodId.Zip]: {\n                logoUrl: cdnPath('/img/payment-providers/zip.png'),\n                titleText: language.translate('payment.zip_display_name_text'),\n            },\n            [PaymentMethodType.Barclaycard]: {\n                logoUrl: cdnPath(\n                    `/img/payment-providers/barclaycard_${method.id.toLowerCase()}.png`,\n                ),\n                titleText: '',\n            },\n            [PaymentMethodId.AdyenV2]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.AdyenV3]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Mollie]: {\n                logoUrl:\n                    method.method === 'credit_card'\n                        ? ''\n                        : cdnPath(`/img/payment-providers/mollie_${method.method}.svg`),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Checkoutcom]: {\n                logoUrl: ['credit_card', 'card', 'checkoutcom'].includes(method.id)\n                    ? ''\n                    : cdnPath(`/img/payment-providers/checkoutcom_${method.id.toLowerCase()}.svg`),\n                titleText: methodName,\n            },\n            [PaymentMethodId.StripeV3]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.StripeUPE]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.WorldpayAccess]: {\n                logoUrl: '',\n                titleText: language.translate('payment.credit_debit_card_text'),\n            },\n        };\n\n        if (method.gateway === PaymentMethodId.BlueSnapDirect) {\n            if (method.id === 'credit_card') {\n                return { logoUrl: '', titleText: language.translate('payment.credit_card_text') };\n            }\n\n            if (method.id === 'ecp') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_electronic_check_label') };\n            }\n\n            if (method.id === 'banktransfer') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_local_bank_transfer_label') };\n            }\n        }\n\n        if (method.id === PaymentMethodId.PaypalCommerceVenmo) {\n            return customTitles[PaymentMethodId.PaypalCommerceAlternativeMethod];\n        }\n\n        if (\n          method.gateway === PaymentMethodId.BigCommercePaymentsAlternativeMethod &&\n          method.id === PaymentMethodId.Klarna\n        ) {\n            return {\n                logoUrl: cdnPath('/img/payment-providers/klarna.png'),\n                titleText: methodDisplayName,\n            };\n        }\n\n        if (method.id === PaymentMethodId.BigCommercePaymentsVenmo) {\n            return customTitles[PaymentMethodId.BigCommercePaymentsAlternativeMethod];\n        }\n\n        // KLUDGE: 'paypal' is actually a credit card method. It is the only\n        // exception to the rule below. We should probably fix it on API level,\n        // but apparently it would break LCO if we are not careful.\n        if (\n            method.id === PaymentMethodId.PaypalPaymentsPro &&\n            method.method === PaymentMethodType.CreditCard\n        ) {\n            return customTitles[PaymentMethodType.CreditCard];\n        }\n\n        if (method.id === PaymentMethodId.Ratepay) {\n            return { logoUrl: method.logoUrl || '', titleText: language.translate('payment.ratepay.payment_method_title') };\n        }\n\n        return (\n            customTitles[method.gateway || ''] ||\n            customTitles[method.id] ||\n            customTitles[method.method] ||\n            customTitles[PaymentMethodType.CreditCard]\n        );\n    };\n}\n\nfunction getInstrumentForMethod(\n    instruments: CardInstrument[],\n    method: PaymentMethod,\n    values: PaymentFormValues\n): CardInstrument | undefined {\n    const instrumentsForMethod = instruments.filter(instrument => instrument.provider === method.id);\n    const selectedInstrument = instrumentsForMethod.find(instrument => instrument.bigpayToken === values.instrumentId);\n\n    return selectedInstrument;\n}\n\nconst PaymentMethodTitle: FunctionComponent<\n    PaymentMethodTitleProps &\n        WithLanguageProps &\n        WithPaymentTitleProps &\n        ConnectFormikProps<PaymentFormValues>\n> = ({ cdnBasePath, checkoutSettings, storeCountryCode, onUnhandledError, formik: { values }, instruments, isSelected, language, method }) => {\n    const methodName = getPaymentMethodName(language)(method);\n    const { logoUrl, titleText, subtitle } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(method);\n    const { themeV2 } = useThemeContext();\n\n    const getSelectedCardType = () => {\n        if (!isSelected) {\n            return;\n        }\n\n        const instrumentSelected = getInstrumentForMethod(instruments, method, values);\n\n        if (isHostedCreditCardFieldsetValues(values) && values.hostedForm.cardType) {\n            return values.hostedForm.cardType;\n        }\n\n        if (hasCreditCardNumber(values) && values.ccNumber) {\n            const { card } = number(values.ccNumber);\n\n            if (!card) {\n                return;\n            }\n\n            return card.type;\n        }\n\n        if (instrumentSelected) {\n            return instrumentSelected.brand;\n        }\n    };\n\n    const getSubtitle = () => {\n        const node = subtitle instanceof Function ? subtitle({ onUnhandledError, methodId: method.id }) : subtitle;\n\n        return node ? <div className=\"paymentProviderHeader-subtitleContainer\">\n            {node}\n        </div> : null\n    }\n\n    return (\n        <div className={\n            classNames(\n                'paymentProviderHeader-container',\n                { 'paymentProviderHeader-container-googlePay': method.id.includes('googlepay') },\n            )\n        }>\n            <div\n                className=\"paymentProviderHeader-nameContainer\"\n                data-test={`payment-method-${method.id}`}\n            >\n                {logoUrl && (\n                    <img\n                        alt={`${methodName} icon`}\n                        className={classNames(\n                            'paymentProviderHeader-img',\n                            { 'paymentProviderHeader-img-applePay': method.id === 'applepay' },\n                            { 'paymentProviderHeader-img-googlePay': method.id.includes('googlepay') },\n                        )}\n                        data-test=\"payment-method-logo\"\n                        src={logoUrl}\n                    />\n                )}\n\n                {titleText && (\n                    <div className={classNames('paymentProviderHeader-name',\n                        { 'sub-header': themeV2 })}\n                        data-test=\"payment-method-name\">\n                        {titleText}\n                    </div>\n                )}\n                {getSubtitle()}\n            </div>\n            <div className=\"paymentProviderHeader-cc\">\n                <CreditCardIconList\n                    cardTypes={compact(method.supportedCards.map(mapFromPaymentMethodCardType))}\n                    selectedCardType={getSelectedCardType()}\n                />\n            </div>\n        </div>\n    );\n};\n\nfunction mapToCheckoutProps({ checkoutState }: CheckoutContextProps): WithPaymentTitleProps | null {\n    const {\n        data: { getConfig, getInstruments },\n    } = checkoutState;\n    const config = getConfig();\n\n    const instruments = getInstruments() || [];\n\n    if (!config) {\n        return null;\n    }\n\n    const storeCountryCode = config.storeProfile.storeCountryCode\n\n    return {\n        instruments,\n        checkoutSettings: config.checkoutSettings,\n        storeCountryCode,\n        cdnBasePath: config.cdnPath,\n    };\n}\n\nexport default connectFormik(\n    withLanguage(withCheckout(mapToCheckoutProps)(memo(PaymentMethodTitle))),\n);\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport PaymentMethodId from './PaymentMethodId';\n\nexport default function getPaymentMethodDisplayName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        const { displayName } = method.config;\n\n        const isCreditCard = displayName?.toLowerCase() === 'credit card';\n\n        if (\n            method.id === PaymentMethodId.PaypalCommerceCredit ||\n            method.id === PaymentMethodId.BigCommercePaymentsPayLater ||\n            method.id === PaymentMethodId.BraintreePaypalCredit\n        ) {\n            const { payPalCreditProductBrandName } = method.initializationData;\n\n            if (payPalCreditProductBrandName) {\n                return payPalCreditProductBrandName.credit || payPalCreditProductBrandName;\n            }\n\n            return 'Pay Later';\n        }\n\n        if (\n            (isCreditCard && method.id === PaymentMethodId.AdyenV2) ||\n            method.id === PaymentMethodId.AdyenV3\n        ) {\n            return language.translate('payment.credit_debit_card_text');\n        }\n\n        if (isCreditCard) {\n            return language.translate('payment.credit_card_text');\n        }\n\n        return displayName || '';\n    };\n}\n","interface HostedCreditCardFieldsetValues {\n    hostedForm: {\n        cardType?: string;\n        errors?: {\n            cardCode?: string;\n            cardExpiry?: string;\n            cardName?: string;\n            cardNumber?: string;\n        };\n    };\n}\n\nexport function isHostedCreditCardFieldsetValues(\n    value: unknown,\n): value is HostedCreditCardFieldsetValues {\n    if (!(value instanceof Object)) {\n        return false;\n    }\n\n    if (!('hostedForm' in value)) {\n        return false;\n    }\n\n    return true;\n}\n","import React, { type ReactNode } from 'react';\n\nimport type PaymentFormService from '../../PaymentFormService';\n\nimport { PaymentFormContext } from './PaymentFormContext';\n\ninterface PaymentFormProviderProps {\n    children?: ReactNode;\n    paymentForm: PaymentFormService;\n}\n\nexport const PaymentFormProvider = ({ children, paymentForm }: PaymentFormProviderProps) => {\n    return (\n        <PaymentFormContext.Provider value={{ paymentForm }}>\n            {children}\n        </PaymentFormContext.Provider>\n    );\n};\n","import { lazy } from 'react';\n\nconst AdyenV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"adyen-v2-payment-method\" */'@bigcommerce/checkout/adyen-integration').then(module => ({ default: module.AdyenV2PaymentMethod })));\nconst AdyenV3PaymentMethod = lazy(() => import(/* webpackChunkName: \"adyen-v3-payment-method\" */'@bigcommerce/checkout/adyen-integration').then(module => ({ default: module.AdyenV3PaymentMethod })));\nconst AffirmPaymentMethod = lazy(() => import(/* webpackChunkName: \"affirm-payment-method\" */'@bigcommerce/checkout/affirm-integration').then(module => ({ default: module.AffirmPaymentMethod })));\nconst AmazonPayV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"amazon-pay-v2-payment-method\" */'@bigcommerce/checkout/amazon-pay-v2-integration').then(module => ({ default: module.AmazonPayV2PaymentMethod })));\nconst ApplePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"apple-pay-payment-method\" */'@bigcommerce/checkout/apple-pay-integration').then(module => ({ default: module.ApplePayPaymentMethod })));\nconst BarclaycardPaymentMethod = lazy(() => import(/* webpackChunkName: \"barclaycard-payment-method\" */'@bigcommerce/checkout/barclay-integration').then(module => ({ default: module.BarclaycardPaymentMethod })));\nconst BigCommercePaymentsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsPaymentMethod })));\nconst BigCommercePaymentsAPMsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-apms-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsAPMsPaymentMethod })));\nconst BigCommercePaymentsCreditCardsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-credit-cards-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsCreditCardsPaymentMethod })));\nconst BigCommercePaymentsFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-fastlane-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsFastlanePaymentMethod })));\nconst BigCommercePaymentsPayLaterPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-pay-later-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsPayLaterPaymentMethod })));\nconst BigCommercePaymentsVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-venmo-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsVenmoPaymentMethod })));\nconst BigCommercePaymentsRatePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-rate-pay-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsRatePayPaymentMethod })));\nconst BlueSnapDirectEcpPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-ecp-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectEcpPaymentMethod })));\nconst BlueSnapDirectAlternativePaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-alternative-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectAlternativePaymentMethod })));\nconst BlueSnapDirectSepaPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-sepa-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectSepaPaymentMethod })));\nconst BlueSnapDirectIdealPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-ideal-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectIdealPaymentMethod })));\nconst BlueSnapV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-v2-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapV2PaymentMethod })));\nconst BlueSnapDirectPayByBankPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-pay-by-bank-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectPayByBankPaymentMethod })));\nconst BoltClientPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-client-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltClientPaymentMethod })));\nconst BoltEmbeddedPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-embedded-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltEmbeddedPaymentMethod })));\nconst BoltPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltPaymentMethod })));\nconst BraintreeAchPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-ach-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeAchPaymentMethod })));\nconst BraintreeFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-fastlane-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeFastlanePaymentMethod })));\nconst BraintreeLocalPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-local-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeLocalPaymentMethod })));\nconst BraintreePaypalPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-paypal-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreePaypalPaymentMethod })));\nconst VisaCheckoutPaymentMethod = lazy(() => import(/* webpackChunkName: \"visa-checkout-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.VisaCheckoutPaymentMethod })));\nconst BraintreeVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-venmo-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeVenmoPaymentMethod })));\nconst CheckoutcomCustomPaymentMethod = lazy(() => import(/* webpackChunkName: \"checkoutcom-custom-payment-method\" */'@bigcommerce/checkout/checkoutcom-integration').then(module => ({ default: module.CheckoutcomCustomPaymentMethod })));\nconst ClearpayPaymentMethod = lazy(() => import(/* webpackChunkName: \"clearpay-payment-method\" */'@bigcommerce/checkout/clearpay-integration').then(module => ({ default: module.ClearpayPaymentMethod })));\nconst GooglePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"google-pay-payment-method\" */'@bigcommerce/checkout/google-pay-integration').then(module => ({ default: module.GooglePayPaymentMethod })));\nconst HostedCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-credit-card-payment-method\" */'@bigcommerce/checkout/hosted-credit-card-integration').then(module => ({ default: module.HostedCreditCardPaymentMethod })));\nconst HostedPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-payment-method\" */'@bigcommerce/checkout/hosted-payment-integration').then(module => ({ default: module.HostedPaymentMethod })));\nconst KlarnaPaymentMethod = lazy(() => import(/* webpackChunkName: \"klarna-payment-method\" */'@bigcommerce/checkout/klarna-integration').then(module => ({ default: module.KlarnaPaymentMethod })));\nconst KlarnaV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"klarna-v2-payment-method\" */'@bigcommerce/checkout/klarna-integration').then(module => ({ default: module.KlarnaV2PaymentMethod })));\nconst MolliePaymentMethod = lazy(() => import(/* webpackChunkName: \"mollie-payment-method\" */'@bigcommerce/checkout/mollie-integration').then(module => ({ default: module.MolliePaymentMethod })));\nconst MonerisPaymentMethod = lazy(() => import(/* webpackChunkName: \"moneris-payment-method\" */'@bigcommerce/checkout/moneris-integration').then(module => ({ default: module.MonerisPaymentMethod })));\nconst OfflinePaymentMethod = lazy(() => import(/* webpackChunkName: \"offline-payment-method\" */'@bigcommerce/checkout/offline-payment-integration').then(module => ({ default: module.OfflinePaymentMethod })));\nconst PayPalCommerceAPMsPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-apms-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceAPMsPaymentMethod })));\nconst PayPalCommerceCreditPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-credit-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceCreditPaymentMethod })));\nconst PayPalCommerceCreditCardsPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-credit-cards-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceCreditCardsPaymentMethod })));\nconst PayPalCommerceFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-fastlane-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceFastlanePaymentMethod })));\nconst PayPalCommercePaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommercePaymentMethod })));\nconst PayPalCommerceVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-venmo-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceVenmoPaymentMethod })));\nconst PaypalCommerceRatePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-commerce-rate-pay-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PaypalCommerceRatePayPaymentMethod })));\nconst PaypalExpressPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-express-payment-method\" */'@bigcommerce/checkout/paypal-express-integration').then(module => ({ default: module.PaypalExpressPaymentMethod })));\nconst PayPalPaymentsProPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-payments-pro-payment-method\" */'@bigcommerce/checkout/paypal-payments-pro-integration').then(module => ({ default: module.PayPalPaymentsProPaymentMethod })));\nconst PPSDKPaymentMethod = lazy(() => import(/* webpackChunkName: \"ppsdkpayment-method\" */'@bigcommerce/checkout/ppsdk-integration').then(module => ({ default: module.PPSDKPaymentMethod })));\nconst SquareV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"square-v2-payment-method\" */'@bigcommerce/checkout/squarev2-integration').then(module => ({ default: module.SquareV2PaymentMethod })));\nconst StripeOCSPaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-ocspayment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeOCSPaymentMethod })));\nconst StripeUPEPaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-upepayment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeUPEPaymentMethod })));\nconst StripeV3PaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-v3-payment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeV3PaymentMethod })));\nconst WorldpayCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"worldpay-credit-card-payment-method\" */'@bigcommerce/checkout/worldpay-access-integration').then(module => ({ default: module.WorldpayCreditCardPaymentMethod })));\n\nexport {\n  AdyenV2PaymentMethod,\n  AdyenV3PaymentMethod,\n  AffirmPaymentMethod,\n  AmazonPayV2PaymentMethod,\n  ApplePayPaymentMethod,\n  BarclaycardPaymentMethod,\n  BigCommercePaymentsPaymentMethod,\n  BigCommercePaymentsAPMsPaymentMethod,\n  BigCommercePaymentsCreditCardsPaymentMethod,\n  BigCommercePaymentsFastlanePaymentMethod,\n  BigCommercePaymentsPayLaterPaymentMethod,\n  BigCommercePaymentsVenmoPaymentMethod,\n  BigCommercePaymentsRatePayPaymentMethod,\n  BlueSnapDirectEcpPaymentMethod,\n  BlueSnapDirectAlternativePaymentMethod,\n  BlueSnapDirectSepaPaymentMethod,\n  BlueSnapDirectIdealPaymentMethod,\n  BlueSnapV2PaymentMethod,\n  BlueSnapDirectPayByBankPaymentMethod,\n  BoltClientPaymentMethod,\n  BoltEmbeddedPaymentMethod,\n  BoltPaymentMethod,\n  BraintreeAchPaymentMethod,\n  BraintreeFastlanePaymentMethod,\n  BraintreeLocalPaymentMethod,\n  BraintreePaypalPaymentMethod,\n  VisaCheckoutPaymentMethod,\n  BraintreeVenmoPaymentMethod,\n  CheckoutcomCustomPaymentMethod,\n  ClearpayPaymentMethod,\n  GooglePayPaymentMethod,\n  HostedCreditCardPaymentMethod,\n  HostedPaymentMethod,\n  KlarnaPaymentMethod,\n  KlarnaV2PaymentMethod,\n  MolliePaymentMethod,\n  MonerisPaymentMethod,\n  OfflinePaymentMethod,\n  PayPalCommerceAPMsPaymentMethod,\n  PayPalCommerceCreditPaymentMethod,\n  PayPalCommerceCreditCardsPaymentMethod,\n  PayPalCommerceFastlanePaymentMethod,\n  PayPalCommercePaymentMethod,\n  PayPalCommerceVenmoPaymentMethod,\n  PaypalCommerceRatePayPaymentMethod,\n  PaypalExpressPaymentMethod,\n  PayPalPaymentsProPaymentMethod,\n  PPSDKPaymentMethod,\n  SquareV2PaymentMethod,\n  StripeOCSPaymentMethod,\n  StripeUPEPaymentMethod,\n  StripeV3PaymentMethod,\n  WorldpayCreditCardPaymentMethod,\n};\n\nimport { PaymentMethodId } from '@bigcommerce/checkout/payment-integration-api';\n\nexport const ComponentRegistry = {\n  'AdyenV2PaymentMethod': [\n    { \"gateway\": \"adyenv2\" }\n  ],\n  'AdyenV3PaymentMethod': [\n    { \"gateway\": \"adyenv3\" }\n  ],\n  'AffirmPaymentMethod': [\n    { \"id\": \"affirm\" }\n  ],\n  'AmazonPayV2PaymentMethod': [\n    { \"id\": \"amazonpay\" }\n  ],\n  'ApplePayPaymentMethod': [\n    { \"id\": \"applepay\" }\n  ],\n  'BarclaycardPaymentMethod': [\n    { \"gateway\": \"barclaycard\" }\n  ],\n  'BigCommercePaymentsAPMsPaymentMethod': [\n    { \"gateway\": \"bigcommerce_payments_apms\" }\n  ],\n  'BigCommercePaymentsCreditCardsPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_creditcards\" }\n  ],\n  'BigCommercePaymentsFastlanePaymentMethod': [\n    { \"id\": \"bigcommerce_payments_fastlane\" }\n  ],\n  'BigCommercePaymentsPayLaterPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_paylater\" }\n  ],\n  'BigCommercePaymentsPaymentMethod': [\n    { \"id\": \"bigcommerce_payments\" }\n  ],\n  'BigCommercePaymentsRatePayPaymentMethod': [\n    { \"gateway\": \"bigcommerce_payments_apms\", \"id\": \"ratepay\" }\n  ],\n  'BigCommercePaymentsVenmoPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_venmo\" }\n  ],\n  'BlueSnapDirectAlternativePaymentMethod': [\n    { \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectEcpPaymentMethod': [\n    { \"id\": \"ecp\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectIdealPaymentMethod': [\n    { \"id\": \"ideal\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectPayByBankPaymentMethod': [\n    { \"id\": \"pay_by_bank\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectSepaPaymentMethod': [\n    { \"id\": \"sepa_direct_debit\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapV2PaymentMethod': [\n    { \"gateway\": \"bluesnapv2\" }\n  ],\n  'BoltPaymentMethod': [\n    { \"id\": \"bolt\" }\n  ],\n  'BraintreeAchPaymentMethod': [\n    { \"id\": \"braintreeach\" }\n  ],\n  'BraintreeFastlanePaymentMethod': [\n    { \"id\": \"braintreeacceleratedcheckout\" }\n  ],\n  'BraintreeLocalPaymentMethod': [\n    { \"gateway\": \"braintreelocalmethods\" }\n  ],\n  'BraintreePaypalPaymentMethod': [\n    { \"id\": \"braintreepaypal\" },\n    { \"id\": \"braintreepaypalcredit\" }\n  ],\n  'BraintreeVenmoPaymentMethod': [\n    { \"id\": \"braintreevenmo\" }\n  ],\n  'CheckoutcomCustomPaymentMethod': [\n    { \"gateway\": \"checkoutcom\" }\n  ],\n  'ClearpayPaymentMethod': [\n    { \"gateway\": \"clearpay\" }\n  ],\n  'GooglePayPaymentMethod': [\n    { \"id\": PaymentMethodId.AdyenV2GooglePay },\n    { \"id\": PaymentMethodId.AdyenV3GooglePay },\n    { \"id\": PaymentMethodId.AuthorizeNetGooglePay },\n    { \"id\": PaymentMethodId.BNZGooglePay },\n    { \"id\": PaymentMethodId.BraintreeGooglePay },\n    { \"id\": PaymentMethodId.PayPalCommerceGooglePay },\n    { \"id\": PaymentMethodId.BigCommercePaymentsGooglePay },\n    { \"id\": PaymentMethodId.CheckoutcomGooglePay },\n    { \"id\": PaymentMethodId.CybersourceV2GooglePay },\n    { \"id\": PaymentMethodId.OrbitalGooglePay },\n    { \"id\": PaymentMethodId.StripeGooglePay },\n    { \"id\": PaymentMethodId.StripeUPEGooglePay },\n    { \"id\": PaymentMethodId.WorldpayAccessGooglePay },\n    { \"id\": PaymentMethodId.TdOnlineMartGooglePay },\n    { \"id\": PaymentMethodId.StripeOCSGooglePay }\n  ],\n  'HostedCreditCardPaymentMethod': [\n    { \"id\": \"hosted-credit-card\" },\n    { \"id\": \"credit_card\", \"gateway\": \"bluesnapdirect\" },\n    { \"id\": \"credit_card\", \"gateway\": \"checkoutcom\" },\n    { \"id\": \"tdonlinemart\" }\n  ],\n  'HostedPaymentMethod': [\n    { \"gateway\": \"afterpay\" },\n    { \"id\": \"quadpay\" },\n    { \"id\": \"sezzle\" },\n    { \"id\": \"zip\" }\n  ],\n  'KlarnaPaymentMethod': [\n    { \"id\": \"klarna\" }\n  ],\n  'KlarnaV2PaymentMethod': [\n    { \"gateway\": \"klarna\" }\n  ],\n  'MolliePaymentMethod': [\n    { \"gateway\": \"mollie\" },\n    { \"gateway\": \"mollie\", \"id\": \"applepay\" }\n  ],\n  'MonerisPaymentMethod': [\n    { \"id\": \"moneris\" }\n  ],\n  'OfflinePaymentMethod': [\n    { \"type\": \"PAYMENT_TYPE_OFFLINE\" }\n  ],\n  'PayPalCommerceAPMsPaymentMethod': [\n    { \"gateway\": \"paypalcommercealternativemethods\" }\n  ],\n  'PayPalCommerceCreditCardsPaymentMethod': [\n    { \"id\": \"paypalcommercecreditcards\" }\n  ],\n  'PayPalCommerceCreditPaymentMethod': [\n    { \"id\": \"paypalcommercecredit\" }\n  ],\n  'PayPalCommerceFastlanePaymentMethod': [\n    { \"id\": \"paypalcommerceacceleratedcheckout\" }\n  ],\n  'PayPalCommercePaymentMethod': [\n    { \"id\": \"paypalcommerce\" }\n  ],\n  'PaypalCommerceRatePayPaymentMethod': [\n    { \"gateway\": \"paypalcommercealternativemethods\", \"id\": \"ratepay\" }\n  ],\n  'PayPalCommerceVenmoPaymentMethod': [\n    { \"id\": \"paypalcommercevenmo\" }\n  ],\n  'PaypalExpressPaymentMethod': [\n    { \"id\": \"paypalexpress\" }\n  ],\n  'PayPalPaymentsProPaymentMethod': [\n    { \"id\": \"paypal\" }\n  ],\n  'PPSDKPaymentMethod': [\n    { \"type\": \"PAYMENT_TYPE_SDK\" }\n  ],\n  'SquareV2PaymentMethod': [\n    { \"id\": \"squarev2\" }\n  ],\n  'StripeOCSPaymentMethod': [\n    { \"gateway\": \"stripeocs\", \"id\": \"optimized_checkout\" }\n  ],\n  'StripeUPEPaymentMethod': [\n    { \"gateway\": \"stripeupe\" },\n    { \"gateway\": \"stripeupe\", \"id\": \"klarna\" }\n  ],\n  'StripeV3PaymentMethod': [\n    { \"gateway\": \"stripev3\" }\n  ],\n  'VisaCheckoutPaymentMethod': [\n    { \"id\": PaymentMethodId.BraintreeVisaCheckout }\n  ],\n  'WorldpayCreditCardPaymentMethod': [\n    { \"id\": \"worldpayaccess\" }\n  ]\n} as const;\n\n    \n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ComponentType, lazy, Suspense } from 'react';\n\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { PaymentFormProvider, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LazyContainer } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout, type WithCheckoutProps } from '../../checkout';\nimport { connectFormik, type WithFormikProps } from '../../common/form';\nimport { withForm, type WithFormProps } from '../../ui/form';\nimport createPaymentFormService from '../createPaymentFormService';\nimport resolvePaymentMethod from '../resolvePaymentMethod';\nimport withPayment, { type WithPaymentProps } from '../withPayment';\n\nconst PaymentMethodV1 = lazy(() => import(/* webpackChunkName: \"payment-method-v1\" */'./PaymentMethod'));\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError(error: Error): void;\n}\n\nconst PaymentMethodContainer: ComponentType<\n    PaymentMethodProps &\n        WithCheckoutProps &\n        WithLanguageProps &\n        WithPaymentProps &\n        WithFormProps &\n        WithFormikProps<PaymentFormValues>\n> = ({\n    formik: formikContext,\n    checkoutService,\n    checkoutState,\n    disableSubmit,\n    hidePaymentSubmitButton,\n    isEmbedded,\n    isSubmitted,\n    isUsingMultiShipping,\n    language,\n    method,\n    onUnhandledError,\n    setSubmit,\n    setSubmitted,\n    setValidationSchema,\n}) => {\n    const formContext = {\n        isSubmitted,\n        setSubmitted,\n    };\n\n    const paymentContext = {\n        disableSubmit,\n        hidePaymentSubmitButton,\n        setSubmit,\n        setValidationSchema,\n    };\n\n    const ResolvedPaymentMethod = resolvePaymentMethod(\n        {\n            id: method.id,\n            gateway: method.gateway,\n            type: method.type,\n        },\n    );\n\n    if (!ResolvedPaymentMethod) {\n        return (\n            <LazyContainer>\n                <PaymentMethodV1\n                    isEmbedded={isEmbedded}\n                    isUsingMultiShipping={isUsingMultiShipping}\n                    method={method}\n                    onUnhandledError={onUnhandledError}\n                />\n            </LazyContainer>\n        );\n    }\n\n    const paymentForm = createPaymentFormService(formikContext, formContext, paymentContext);\n\n    return (\n        <PaymentFormProvider paymentForm={paymentForm}>\n            <Suspense>\n                <ResolvedPaymentMethod\n                    checkoutService={checkoutService}\n                    checkoutState={checkoutState}\n                    language={language}\n                    method={method}\n                    onUnhandledError={onUnhandledError}\n                    paymentForm={paymentForm}\n                />\n            </Suspense>\n        </PaymentFormProvider>\n    );\n};\n\nexport default withCheckout((props) => props)(\n    withLanguage(withPayment(withForm(connectFormik(PaymentMethodContainer)))),\n) as ComponentType<PaymentMethodProps>;\n","import { type ComponentType } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { resolveLazyComponent } from '../common/resolver';\nimport * as lazyPaymentMethods from '../generated/paymentIntegrations';\n\nexport default function resolvePaymentMethod(\n    query: PaymentMethodResolveId\n): ComponentType<PaymentMethodProps> | undefined {\n    const { ComponentRegistry, ...components } = lazyPaymentMethods;\n\n    return resolveLazyComponent<PaymentMethodResolveId, PaymentMethodProps>(\n        query, \n        components, \n        ComponentRegistry,\n    );\n}\n","import { type FormikContextType } from 'formik';\n\nimport {\n    type PaymentFormService,\n    type PaymentFormValues,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { type FormContextType } from '@bigcommerce/checkout/ui';\n\nimport { type PaymentContextProps } from './PaymentContext';\n\nexport default function createPaymentFormService(\n    formikContext: FormikContextType<PaymentFormValues>,\n    formContext: FormContextType,\n    paymentContext: PaymentContextProps,\n): PaymentFormService {\n    const {\n        setFieldTouched,\n        setFieldValue,\n        submitForm,\n        validateForm,\n        values,\n    } = formikContext;\n\n    const { isSubmitted, setSubmitted } = formContext;\n\n    const { disableSubmit, setSubmit, setValidationSchema, hidePaymentSubmitButton } =\n        paymentContext;\n\n    const getFieldValue = <T>(key: string): T | unknown => values[key];\n\n    return {\n        disableSubmit,\n        getFieldValue,\n        getFormValues: () => values,\n        hidePaymentSubmitButton,\n        isSubmitted: () => isSubmitted,\n        setFieldTouched: setFieldTouched as PaymentFormService['setFieldTouched'],\n        setFieldValue: setFieldValue as PaymentFormService['setFieldValue'],\n        setSubmit,\n        setSubmitted,\n        setValidationSchema,\n        submitForm,\n        validateForm,\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find, get, noop } from 'lodash';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport { isMobile } from '../../common/utility';\nimport { Checklist, ChecklistItem, CustomChecklistItem } from '../../ui/form';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport getUniquePaymentMethodId, { parseUniquePaymentMethodId } from './getUniquePaymentMethodId';\nimport PaymentMethodTitle, { getPaymentMethodTitle } from './PaymentMethodTitle';\nimport PaymentMethodV2 from './PaymentMethodV2';\n\nexport interface PaymentMethodListProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    onSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction getPaymentMethodFromListValue(methods: PaymentMethod[], value: string): PaymentMethod {\n    const { gatewayId: gateway, methodId: id } = parseUniquePaymentMethodId(value);\n    const method = gateway ? find(methods, { gateway, id }) : find(methods, { id });\n\n    if (!method) {\n        throw new Error(`Unable to find payment method with id: ${id}`);\n    }\n\n    return method;\n}\n\nconst PaymentMethodList: FunctionComponent<\n    PaymentMethodListProps & ConnectFormikProps<{ paymentProviderRadio?: string }>\n> = ({\n    formik: { values },\n    isEmbedded,\n    isInitializingPayment,\n    isUsingMultiShipping,\n    methods,\n    onSelect = noop,\n    onUnhandledError,\n}) => {\n    const { language } = useLocale();\n    const {\n        checkoutState: {\n            data: { getConfig }\n        }\n    } = useCheckout();\n\n    const config = getConfig();\n\n    const titleText = useMemo(() => {\n        if (config && values.paymentProviderRadio) {\n            const checkoutSettings = config.checkoutSettings;\n            const cdnBasePath = config.cdnPath;\n            const storeCountryCode = config.storeProfile.storeCountryCode;\n            const paymentMethod = getPaymentMethodFromListValue(methods, values.paymentProviderRadio);\n            const methodName = getPaymentMethodName(language)(paymentMethod);\n            const { titleText } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(paymentMethod);\n\n            return titleText || methodName;\n        }\n\n        return '';\n    }, [config, values.paymentProviderRadio])\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelect(getPaymentMethodFromListValue(methods, value));\n        },\n        [methods, onSelect],\n    );\n\n    return (\n        <>\n            <div aria-live=\"assertive\" className='is-srOnly' role=\"status\">{titleText}</div>\n            <Checklist\n                defaultSelectedItemId={values.paymentProviderRadio}\n                isDisabled={isInitializingPayment}\n                name=\"paymentProviderRadio\"\n                onSelect={handleSelect}\n            >\n                {methods.map((method) => {\n                    const value = getUniquePaymentMethodId(method.id, method.gateway);\n                    const showOnlyOnMobileDevices = get(\n                        method,\n                        'initializationData.showOnlyOnMobileDevices',\n                        false,\n                    );\n\n                    if (showOnlyOnMobileDevices && !isMobile()) {\n                        return;\n                    }\n\n                    return (\n                        <PaymentMethodListItem\n                            isDisabled={isInitializingPayment}\n                            isEmbedded={isEmbedded}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            key={value}\n                            method={method}\n                            onUnhandledError={onUnhandledError}\n                            value={value}\n                        />\n                    );\n                })}\n            </Checklist>\n        </>\n    );\n};\n\ninterface PaymentMethodListItemProps {\n    isDisabled?: boolean;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    value: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentMethodListItem: FunctionComponent<PaymentMethodListItemProps> = ({\n    isDisabled,\n    isEmbedded,\n    isUsingMultiShipping,\n    method,\n    onUnhandledError,\n    value,\n}) => {\n    const renderPaymentMethod = useMemo(() => {\n        return (\n            <PaymentMethodV2\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError || noop}\n            />\n        );\n    }, [isEmbedded, isUsingMultiShipping, method, onUnhandledError]);\n\n    const renderPaymentMethodTitle = useCallback(\n        (isSelected: boolean) => <PaymentMethodTitle isSelected={isSelected} method={method} onUnhandledError={onUnhandledError} />,\n        [method],\n    );\n\n    if (method.initializationData?.isCustomChecklistItem) {\n        return (\n            <CustomChecklistItem\n                content={renderPaymentMethod}\n                htmlId={`radio-${value}`}\n            />\n        );\n    }\n\n    return (\n        <ChecklistItem\n            content={renderPaymentMethod}\n            htmlId={`radio-${value}`}\n            isDisabled={isDisabled}\n            label={renderPaymentMethodTitle}\n            value={value}\n        />\n    );\n};\n\nexport default connectFormik(memo(PaymentMethodList));\n","export default function isMobile(): boolean {\n    return /Android|iPhone|iPad|iPod/i.test(window.navigator.userAgent);\n}\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { mapToRedeemableProps, Redeemable, type RedeemableProps } from '../cart';\nimport { withCheckout } from '../checkout';\nimport { Fieldset, Legend } from '../ui/form';\n\nconst PaymentRedeemables: FunctionComponent<RedeemableProps> = (redeemableProps) => (\n    <Fieldset \n        additionalClassName=\"redeemable-payments\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.redeemable_payments_text\" />\n            </Legend>\n        }\n    >\n        <Redeemable {...redeemableProps} showAppliedRedeemables={true} />\n    </Fieldset>\n);\n\nexport default withCheckout(mapToRedeemableProps)(memo(PaymentRedeemables));\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { withCheckout } from '../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { IconBolt } from '../ui/icon';\n\nimport { PaymentMethodId, PaymentMethodType } from './paymentMethod';\n\ninterface PaymentSubmitButtonTextProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodType?: string;\n    methodName?: string;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\nconst providersWithCustomClasses = [PaymentMethodId.Bolt];\n\nconst PaymentSubmitButtonText: FunctionComponent<PaymentSubmitButtonTextProps> = memo(\n    ({\n        methodId,\n        methodName,\n        methodType,\n        methodGateway,\n        initialisationStrategyType,\n        brandName,\n        isComplete,\n        isPaymentDataRequired,\n    }) => {\n        if (!isPaymentDataRequired) {\n            return <TranslatedString id=\"payment.place_order_action\" />;\n        }\n\n        if (methodName && initialisationStrategyType === 'none') {\n            return <TranslatedString data={{ methodName }} id=\"payment.ppsdk_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.AmazonPay) {\n            return <TranslatedString id=\"payment.amazonpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Bolt) {\n            return (\n                <>\n                    <IconBolt additionalClassName=\"payment-submit-button-bolt-icon\" />\n                    <TranslatedString id=\"payment.place_order_action\" />\n                </>\n            );\n        }\n\n        if (methodGateway === PaymentMethodId.Barclaycard) {\n            return <TranslatedString id=\"payment.barclaycard_continue_action\" />;\n        }\n\n        if (methodGateway === PaymentMethodId.BlueSnapV2) {\n            return <TranslatedString id=\"payment.bluesnap_v2_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.VisaCheckout) {\n            return <TranslatedString id=\"payment.visa_checkout_continue_action\" />;\n        }\n\n        if (\n            methodType === PaymentMethodType.PaypalVenmo ||\n            methodId === PaymentMethodId.BraintreeVenmo\n        ) {\n            return <TranslatedString id=\"payment.paypal_venmo_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.Paypal) {\n            const continueActionId = methodId === PaymentMethodId.PaypalCommerce\n                ? 'payment.place_order_action'\n                : 'payment.paypal_continue_action';\n\n            return <TranslatedString\n                data={{ isComplete }}\n                id={isComplete ? 'payment.paypal_complete_action' : continueActionId}\n            />;\n        }\n\n        if (methodType === PaymentMethodType.PaypalCredit) {\n            const continueTranslationId = brandName\n                ? 'payment.continue_with_brand'\n                : 'payment.paypal_pay_later_continue_action'\n            const completeTranslationId = brandName\n                ? 'payment.complete_with_brand'\n                : 'payment.paypal_pay_later_complete_action'\n\n            return (\n                <TranslatedString\n                    data={{ brandName, isComplete, continueTranslationId, completeTranslationId }}\n                    id={\n                        isComplete\n                            ? completeTranslationId\n                            : continueTranslationId\n                    }\n                />\n            );\n        }\n\n        if (methodId === PaymentMethodId.Quadpay) {\n            return <TranslatedString id=\"payment.quadpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Zip) {\n            return <TranslatedString id=\"payment.zip_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Klarna) {\n            return <TranslatedString id=\"payment.klarna_continue_action\" />;\n        }\n\n        return <TranslatedString id=\"payment.place_order_action\" />;\n    },\n);\n\nexport interface PaymentSubmitButtonProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodName?: string;\n    methodType?: string;\n    isDisabled?: boolean;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\ninterface WithCheckoutPaymentSubmitButtonProps {\n    isInitializing?: boolean;\n    isSubmitting?: boolean;\n}\n\nconst PaymentSubmitButton: FunctionComponent<\n    PaymentSubmitButtonProps & WithCheckoutPaymentSubmitButtonProps\n> = ({\n    isDisabled,\n    isInitializing,\n    isSubmitting,\n    isPaymentDataRequired,\n    methodGateway,\n    methodId,\n    methodName,\n    methodType,\n    initialisationStrategyType,\n    brandName,\n    isComplete,\n}) => (\n    <Button\n        className={\n            providersWithCustomClasses.includes(methodId as PaymentMethodId)\n                ? `payment-submit-button-${methodId}`\n                : undefined\n        }\n        data-test=\"payment-submit-button\"\n        disabled={isInitializing || isSubmitting || isDisabled}\n        id=\"checkout-payment-continue\"\n        isFullWidth\n        isLoading={isSubmitting}\n        size={ButtonSize.Large}\n        type=\"submit\"\n        variant={ButtonVariant.Action}\n    >\n        <PaymentSubmitButtonText\n            brandName={brandName}\n            initialisationStrategyType={initialisationStrategyType}\n            isComplete={isComplete}\n            isPaymentDataRequired={isPaymentDataRequired}\n            methodGateway={methodGateway}\n            methodId={methodId}\n            methodName={methodName}\n            methodType={methodType}\n        />\n    </Button>\n);\n\nexport default withCheckout(({ checkoutState }) => {\n    const {\n        data: { isPaymentDataRequired },\n        statuses: { isInitializingCustomer, isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    return {\n        isInitializing: isInitializingCustomer() || isInitializingPayment(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isSubmitting: isSubmittingOrder(),\n    };\n})(memo(PaymentSubmitButton));\n","import React, { type MouseEvent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isErrorWithType } from '../common/error';\n\ninterface SpamProtectionFieldProps {\n    didExceedSpamLimit?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\nconst SpamProtectionField = ({\n    didExceedSpamLimit,\n    onUnhandledError\n}: SpamProtectionFieldProps): JSX.Element => {\n    const [shouldShowRetryButton, setShouldShowRetryButton] = useState(false);\n\n    const {\n        checkoutService: { executeSpamCheck },\n        checkoutState: { statuses }\n    } = useCheckout();\n\n    const isExecutingSpamCheck = statuses.isExecutingSpamCheck();\n\n    const verify: () => void = async () => {\n        try {\n            await executeSpamCheck();\n        } catch (error) {\n            setShouldShowRetryButton(true);\n\n            // Notify the parent component if the user experiences a problem other than cancelling the reCaptcha challenge.\n            if (isErrorWithType(error) && error.type !== 'spam_protection_challenge_not_completed' && onUnhandledError) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (didExceedSpamLimit) {\n            return;\n        }\n\n        verify();\n    }, []);\n\n    const handleRetry = (event: MouseEvent) => {\n        event.preventDefault();\n\n        verify();\n    };\n\n    return (\n        <div className=\"spamProtection-container\">\n            <LoadingOverlay isLoading={isExecutingSpamCheck}>\n                {(didExceedSpamLimit || shouldShowRetryButton) && (\n                    <div className=\"spamProtection-panel optimizedCheckout-overlay\">\n                        <a\n                            className=\"spamProtection-panel-message optimizedCheckout-primaryContent\"\n                            data-test=\"spam-protection-verify-button\"\n                            onClick={handleRetry}\n                        >\n                            <TranslatedString id=\"spam_protection.verify_action\" />\n                        </a>\n                    </div>\n                )}\n            </LoadingOverlay >\n        </div >\n    );\n};\n\nexport default SpamProtectionField;\n","import { noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withCurrency, type WithCurrencyProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { CheckboxInput } from '../../ui/form';\nimport { Tooltip, TooltipTrigger } from '../../ui/tooltip';\n\nexport interface StoreCreditFieldProps {\n    availableStoreCredit: number;\n    name: string;\n    usableStoreCredit: number;\n    isStoreCreditApplied: boolean;\n    onChange?(value: boolean): void;\n}\n\nconst StoreCreditField: FunctionComponent<StoreCreditFieldProps & WithCurrencyProps> = ({\n    availableStoreCredit,\n    currency,\n    name,\n    onChange = noop,\n    usableStoreCredit,\n    isStoreCreditApplied,\n}) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n\n    const handleChange = useCallback((event: any) => onChange(event.target.checked), [onChange]);\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"redeemable.apply_store_credit_before_action\" />{' '}\n                <TooltipTrigger\n                    placement=\"top-start\"\n                    tooltip={\n                        <Tooltip testId=\"payment-store-credit-tooltip\">\n                            <TranslatedString\n                                data={{\n                                    storeCredit: currency.toCustomerCurrency(availableStoreCredit),\n                                }}\n                                id=\"redeemable.store_credit_available_text\"\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <a href=\"#\" onClick={preventDefault()}>\n                        {currency.toCustomerCurrency(usableStoreCredit)}\n                    </a>\n                </TooltipTrigger>{' '}\n                <TranslatedString id=\"redeemable.apply_store_credit_after_action\" />\n            </>\n        ),\n        [availableStoreCredit, currency, usableStoreCredit],\n    );\n\n    return (\n        <CheckboxInput\n            checked={isStoreCreditApplied}\n            disabled={isSubmittingOrder()}\n            id={name}\n            label={labelContent}\n            name={name}\n            onChange={handleChange}\n            value={name}\n        />\n    );\n};\n\nexport default withCurrency(StoreCreditField);\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst StoreCreditOverlay: FunctionComponent = () => (\n    <div className=\"storeCreditOverlay\" data-test=\"payment-store-credit-overlay\">\n        <p className=\"storeCreditOverlay-text\">\n            <TranslatedString id=\"payment.payment_not_required_text\" />\n        </p>\n    </div>\n);\n\nexport default StoreCreditOverlay;\n","import { ExtensionRegion, type PaymentMethod } from '@bigcommerce/checkout-sdk/essential';\nimport { type FormikProps, type FormikState, withFormik, type WithFormikConfig } from 'formik';\nimport { isNil, noop, omitBy } from 'lodash';\nimport React, { type FunctionComponent, memo, useCallback, useContext, useMemo } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { TermsConditions } from '../termsConditions';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getPaymentValidationSchema from './getPaymentValidationSchema';\nimport {\n    getPaymentMethodName,\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodList,\n} from './paymentMethod';\nimport PaymentRedeemables from './PaymentRedeemables';\nimport PaymentSubmitButton from './PaymentSubmitButton';\nimport SpamProtectionField from './SpamProtectionField';\nimport { StoreCreditField, StoreCreditOverlay } from './storeCredit';\n\nexport interface PaymentFormProps {\n    availableStoreCredit?: number;\n    defaultGatewayId?: string;\n    defaultMethodId: string;\n    didExceedSpamLimit?: boolean;\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isTermsConditionsRequired?: boolean;\n    isUsingMultiShipping?: boolean;\n    isStoreCreditApplied: boolean;\n    methods: PaymentMethod[];\n    selectedMethod?: PaymentMethod;\n    shouldShowStoreCredit?: boolean;\n    shouldDisableSubmit?: boolean;\n    shouldHidePaymentSubmitButton?: boolean;\n    shouldExecuteSpamCheck?: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit?: number;\n    validationSchema?: ObjectSchema<Partial<PaymentFormValues>>;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(values: PaymentFormValues): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentForm: FunctionComponent<\n    PaymentFormProps & FormikProps<PaymentFormValues> & WithLanguageProps\n> = ({\n    availableStoreCredit = 0,\n    didExceedSpamLimit,\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isTermsConditionsRequired,\n    isStoreCreditApplied,\n    isUsingMultiShipping,\n    language,\n    methods,\n    onMethodSelect,\n    onStoreCreditChange,\n    onUnhandledError,\n    resetForm,\n    selectedMethod,\n    shouldDisableSubmit,\n    shouldHidePaymentSubmitButton,\n    shouldExecuteSpamCheck,\n    termsConditionsText = '',\n    termsConditionsUrl,\n    usableStoreCredit = 0,\n    values,\n}) => {\n    const selectedMethodId = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        switch (selectedMethod.id) {\n            case PaymentMethodId.AmazonPay:\n                if (selectedMethod.initializationData.paymentToken) {\n                    return;\n                }\n\n                return selectedMethod.id;\n\n            default:\n                return selectedMethod.id;\n        }\n    }, [selectedMethod]);\n\n    const brandName = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        return (\n            selectedMethod.initializationData?.payPalCreditProductBrandName?.credit ||\n            selectedMethod.initializationData?.payPalCreditProductBrandName\n        );\n    }, [selectedMethod]);\n\n    if (shouldExecuteSpamCheck) {\n        return (\n            <SpamProtectionField\n                didExceedSpamLimit={didExceedSpamLimit}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    return (\n        <Form className=\"checkout-form\" testId=\"payment-form\">\n            {usableStoreCredit > 0 && (\n                <StoreCreditField\n                    availableStoreCredit={availableStoreCredit}\n                    isStoreCreditApplied={isStoreCreditApplied}\n                    name=\"useStoreCredit\"\n                    onChange={onStoreCreditChange}\n                    usableStoreCredit={usableStoreCredit}\n                />\n            )}\n\n            <PaymentMethodListFieldset\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isPaymentDataRequired={isPaymentDataRequired}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onMethodSelect={onMethodSelect}\n                onUnhandledError={onUnhandledError}\n                resetForm={resetForm}\n                values={values}\n            />\n\n            <PaymentRedeemables />\n\n            {isTermsConditionsRequired && (\n                <TermsConditions\n                    termsConditionsText={termsConditionsText}\n                    termsConditionsUrl={termsConditionsUrl}\n                />\n            )}\n\n            <div className=\"form-actions\">\n                {shouldHidePaymentSubmitButton ? (\n                    <PaymentMethodSubmitButtonContainer />\n                ) : (\n                    <PaymentSubmitButton\n                        brandName={brandName}\n                        initialisationStrategyType={\n                            selectedMethod && selectedMethod.initializationStrategy?.type\n                        }\n                        isComplete={!!selectedMethod?.initializationData?.isComplete}\n                        isDisabled={shouldDisableSubmit}\n                        methodGateway={selectedMethod && selectedMethod.gateway}\n                        methodId={selectedMethodId}\n                        methodName={\n                            selectedMethod && getPaymentMethodName(language)(selectedMethod)\n                        }\n                        methodType={selectedMethod && selectedMethod.method}\n                    />\n                )}\n            </div>\n        </Form>\n    );\n};\n\nconst PaymentMethodSubmitButtonContainer: FunctionComponent = () => {\n    return <div className=\"submitButtonContainer\" id=\"checkout-payment-continue\" />;\n};\n\ninterface PaymentMethodListFieldsetProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    values: PaymentFormValues;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n    resetForm(nextValues?: Partial<FormikState<PaymentFormValues>>): void;\n}\n\nconst PaymentMethodListFieldset: FunctionComponent<PaymentMethodListFieldsetProps> = ({\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect = noop,\n    onUnhandledError,\n    resetForm,\n    values,\n}) => {\n    const { setSubmitted } = useContext(FormContext);\n\n    const handlePaymentMethodSelect = useCallback(\n        (method: PaymentMethod) => {\n            const updatedValues = {\n                ...values,\n                ccCustomerCode: '',\n                ccCvv: '',\n                ccDocument: '',\n                customerEmail: '',\n                customerMobile: '',\n                ccExpiry: '',\n                ccName: '',\n                ccNumber: '',\n                instrumentId: '',\n                paymentProviderRadio: getUniquePaymentMethodId(method.id, method.gateway),\n                shouldCreateAccount: true,\n                shouldSaveInstrument: false,\n            };\n\n            resetForm({ values: updatedValues });\n            setSubmitted(false);\n            onMethodSelect(method);\n        },\n        [values, onMethodSelect, resetForm, setSubmitted],\n    );\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.payment_methods_text\" />\n                </Legend>\n            }\n        >\n            {!isPaymentDataRequired() && <StoreCreditOverlay />}\n\n            <Extension region={ExtensionRegion.PaymentPaymentMethodListBefore}/>\n\n            <PaymentMethodList\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onSelect={handlePaymentMethodSelect}\n                onUnhandledError={onUnhandledError}\n            />\n        </Fieldset>\n    );\n};\n\nconst paymentFormConfig: WithFormikConfig<PaymentFormProps & WithLanguageProps, PaymentFormValues> =\n    {\n        mapPropsToValues: ({ defaultGatewayId, defaultMethodId }) => ({\n            ccCustomerCode: '',\n            ccCvv: '',\n            ccDocument: '',\n            customerEmail: '',\n            customerMobile: '',\n            ccExpiry: '',\n            ccName: '',\n            ccNumber: '',\n            paymentProviderRadio: getUniquePaymentMethodId(defaultMethodId, defaultGatewayId),\n            instrumentId: '',\n            shouldCreateAccount: true,\n            shouldSaveInstrument: false,\n            terms: false,\n            hostedForm: {\n                cardType: '',\n                errors: {\n                    cardCode: '',\n                    cardCodeVerification: '',\n                    cardExpiry: '',\n                    cardName: '',\n                    cardNumber: '',\n                    cardNumberVerification: '',\n                },\n            },\n            accountNumber: '',\n            routingNumber: '',\n        }),\n\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(\n                omitBy(\n                    values,\n                    (value, key) => isNil(value) || value === '' || key === 'hostedForm',\n                ),\n            );\n        },\n\n        validationSchema: ({\n            language,\n            isTermsConditionsRequired = false,\n            validationSchema,\n        }: PaymentFormProps & WithLanguageProps) =>\n            getPaymentValidationSchema({\n                additionalValidation: validationSchema,\n                isTermsConditionsRequired,\n                language,\n            }),\n    };\n\nexport default withLanguage(withFormik(paymentFormConfig)(memo(PaymentForm)));\n","import {\n    type CartChangedError,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type CheckoutSettings,\n    type OrderRequestBody,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { compact, find, isEmpty, noop } from 'lodash';\nimport React, {\n  type ReactElement,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { type AnalyticsContextProps } from '@bigcommerce/checkout/contexts';\nimport { type ErrorLogger } from '@bigcommerce/checkout/error-handling-utils';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { withAnalytics } from '../analytics';\nimport { withCheckout } from '../checkout';\nimport {\n    ErrorModal,\n    type ErrorModalOnCloseProps,\n    isCartChangedError,\n    isErrorWithType,\n} from '../common/error';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TermsConditionsType } from '../termsConditions';\n\nimport mapSubmitOrderErrorMessage, { mapSubmitOrderErrorTitle } from './mapSubmitOrderErrorMessage';\nimport mapToOrderRequestBody from './mapToOrderRequestBody';\nimport PaymentContext from './PaymentContext';\nimport PaymentForm from './PaymentForm';\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodProviderType,\n} from './paymentMethod';\n\nexport interface PaymentProps {\n    errorLogger: ErrorLogger;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void; // TODO: We're currently doing this check in multiple places, perhaps we should move it up so this check get be done in a single place instead.\n    onCartChangedError?(error: CartChangedError): void;\n    onFinalize?(): void;\n    onFinalizeError?(error: Error): void;\n    onReady?(): void;\n    onSubmit?(): void;\n    onSubmitError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutPaymentProps {\n    availableStoreCredit: number;\n    cartUrl: string;\n    defaultMethod?: PaymentMethod;\n    finalizeOrderError?: Error;\n    isInitializingPayment: boolean;\n    isSubmittingOrder: boolean;\n    isStoreCreditApplied: boolean;\n    isTermsConditionsRequired: boolean;\n    methods: PaymentMethod[];\n    shouldExecuteSpamCheck: boolean;\n    shouldLocaliseErrorMessages: boolean;\n    submitOrderError?: Error;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit: number;\n    applyStoreCredit(useStoreCredit: boolean): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n    finalizeOrderIfNeeded(): Promise<CheckoutSelectors>;\n    isPaymentDataRequired(): boolean;\n    loadCheckout(): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n    submitOrder(values: OrderRequestBody): Promise<CheckoutSelectors>;\n    checkoutServiceSubscribe: CheckoutService['subscribe'];\n}\n\ninterface PaymentState {\n    didExceedSpamLimit: boolean;\n    isReady: boolean;\n    selectedMethod?: PaymentMethod;\n    shouldDisableSubmit: { [key: string]: boolean };\n    shouldHidePaymentSubmitButton: { [key: string]: boolean };\n    submitFunctions: { [key: string]: ((values: PaymentFormValues) => void) | null };\n}\n\ninterface validationSchemas {\n    [key: string]: ObjectSchema<Partial<PaymentFormValues>> | null;\n}\n\nconst Payment= (props: PaymentProps & WithCheckoutPaymentProps & WithLanguageProps & AnalyticsContextProps): ReactElement  => {\n    const [state, setState] = useState<PaymentState>({\n        didExceedSpamLimit: false,\n        isReady: false,\n        shouldDisableSubmit: {},\n        shouldHidePaymentSubmitButton: {},\n        submitFunctions: {},\n    });\n\n    const isReadyRef = useRef(state.isReady);\n    const grandTotalChangeUnsubscribe = useRef<() => void>();\n    const validationSchemasRef = useRef<validationSchemas>({});\n\n    const renderOrderErrorModal = (): ReactNode => {\n            const { finalizeOrderError, language, shouldLocaliseErrorMessages, submitOrderError } =\n                props;\n\n            // FIXME: Export correct TS interface\n            const error: any = submitOrderError || finalizeOrderError;\n\n            if (\n                !error ||\n                error.type === 'order_finalization_not_required' ||\n                error.type === 'payment_cancelled' ||\n                error.type === 'payment_invalid_form' ||\n                error.type === 'spam_protection_not_completed' ||\n                error.type === 'invalid_hosted_form_value'\n            ) {\n                return null;\n            }\n\n            return (\n                <ErrorModal\n                    error={error}\n                    message={mapSubmitOrderErrorMessage(\n                        error,\n                        language.translate.bind(language),\n                        shouldLocaliseErrorMessages,\n                    )}\n                    onClose={handleCloseModal}\n                    title={mapSubmitOrderErrorTitle(error, language.translate.bind(language))}\n                />\n            );\n        }\n\n    const renderEmbeddedSupportErrorModal =(): ReactNode => {\n            const { checkEmbeddedSupport = noop, methods } = props;\n\n            try {\n                checkEmbeddedSupport(methods.map(({ id }) => id));\n            } catch (error) {\n                if (error instanceof Error) {\n                    return <ErrorModal error={error} onClose={handleCloseModal} />;\n                }\n            }\n\n            return null;\n        }\n\n    const disableSubmit = (method: PaymentMethod, disabled = true) : void => {\n            const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n            const { shouldDisableSubmit } = state;\n\n            if (shouldDisableSubmit[uniqueId] === disabled) {\n                return;\n            }\n\n            setState(prevState => ({ ...prevState,\n                shouldDisableSubmit: {\n                    ...shouldDisableSubmit,\n                    [uniqueId]: disabled,\n                },\n            }));\n        };\n\n    const hidePaymentSubmitButton = (method: PaymentMethod, disabled = true): void => {\n            const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n            const { shouldHidePaymentSubmitButton } = state;\n\n            if (shouldHidePaymentSubmitButton[uniqueId] === disabled) {\n                return;\n            }\n\n            setState(prevState => ({ ...prevState,\n                shouldHidePaymentSubmitButton: {\n                    ...shouldHidePaymentSubmitButton,\n                    [uniqueId]: disabled,\n                },\n            }));\n        };\n\n    const handleBeforeUnload = (event: BeforeUnloadEvent) : string | undefined => {\n            const { defaultMethod, isSubmittingOrder, language } = props;\n            const { selectedMethod = defaultMethod } = state;\n\n            if (\n                !isSubmittingOrder ||\n                !selectedMethod ||\n                selectedMethod.type === PaymentMethodProviderType.Hosted ||\n                selectedMethod.type === PaymentMethodProviderType.PPSDK ||\n                selectedMethod.skipRedirectConfirmationAlert\n            ) {\n                return;\n            }\n\n            const message = language.translate('common.leave_warning');\n\n            event.returnValue = message;\n\n            return message;\n        };\n\n    const handleCloseModal = async (_: Event, { error }: ErrorModalOnCloseProps) : Promise<void> => {\n                if (!error) {\n                    return;\n                }\n\n                const { cartUrl, clearError, loadCheckout } = props;\n                const { type: errorType } = error as any; // FIXME: Export correct TS interface\n\n                if (\n                    errorType === 'provider_fatal_error' ||\n                    errorType === 'order_could_not_be_finalized_error'\n                ) {\n                    window.location.replace(cartUrl || '/');\n                }\n\n                if (errorType === 'tax_provider_unavailable') {\n                    window.location.reload();\n                }\n\n                if (errorType === 'cart_consistency') {\n                    await loadCheckout();\n                }\n\n                if (isErrorWithType(error) && error.body) {\n                    const { body, headers, status } = error;\n\n                    if (body.type === 'provider_error' && headers.location) {\n                        window.top?.location.assign(headers.location);\n                    }\n\n                    // Reload the checkout object to get the latest `shouldExecuteSpamCheck` value,\n                    // which will in turn make `SpamProtectionField` visible again.\n                    // NOTE: As a temporary fix, we're checking the status code instead of the error\n                    // type because of an issue with Nginx config, which causes the server to return\n                    // HTML page instead of JSON response when there is a 429 error.\n                    if (\n                        status === 429 ||\n                        body.type === 'spam_protection_expired' ||\n                        body.type === 'spam_protection_failed'\n                    ) {\n                        setState(prevState => ({ ...prevState, didExceedSpamLimit: true }));\n\n                        await loadCheckout();\n                    }\n                }\n\n                clearError(error);\n            };\n\n    const handleStoreCreditChange = useCallback(async (useStoreCredit: boolean) : Promise<void> => {\n        const { applyStoreCredit, onUnhandledError = noop } = props;\n\n        try {\n            await applyStoreCredit(useStoreCredit);\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }, []);\n\n    const handleError = useCallback((error: Error) : void => {\n        const { onUnhandledError = noop, errorLogger } = props;\n\n        const { type } = error as any;\n\n        if (type === 'unexpected_detachment') {\n            errorLogger.log(error);\n\n            return;\n        }\n\n        return onUnhandledError(error);\n    }, []);\n\n    const handleSubmit = useCallback(async (values: PaymentFormValues) => {\n        const {\n            defaultMethod,\n            loadPaymentMethods,\n            isPaymentDataRequired,\n            onCartChangedError = noop,\n            onSubmit = noop,\n            onSubmitError = noop,\n            submitOrder,\n            analyticsTracker\n        } = props;\n\n        const { selectedMethod = defaultMethod, submitFunctions } = state;\n\n        analyticsTracker.clickPayButton({ shouldCreateAccount: values.shouldCreateAccount });\n\n        const customSubmit =\n            selectedMethod &&\n            submitFunctions[getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway)];\n\n        if (customSubmit) {\n            return customSubmit(values);\n        }\n\n        try {\n            const state = await submitOrder(mapToOrderRequestBody(values, isPaymentDataRequired()));\n            const order = state.data.getOrder();\n\n            analyticsTracker.paymentComplete();\n\n            onSubmit(order?.orderId);\n        } catch (error) {\n            analyticsTracker.paymentRejected();\n\n            if (isErrorWithType(error) && error.type === 'payment_method_invalid') {\n                return loadPaymentMethods();\n            }\n\n            if (isCartChangedError(error)) {\n                return onCartChangedError(error);\n            }\n\n            onSubmitError(error);\n        }\n    }, [props.defaultMethod, state.selectedMethod, props.isPaymentDataRequired()]);\n\n    const trackSelectedPaymentMethod = (method: PaymentMethod) => {\n        const { analyticsTracker } = props;\n\n        const methodName = method.config.displayName || method.id;\n        const methodId = method.id;\n\n        analyticsTracker.selectedPaymentMethod(methodName, methodId);\n    }\n\n    const setSelectedMethod = useCallback((method?: PaymentMethod) : void => {\n        const { selectedMethod } = state;\n\n        if (selectedMethod === method) {\n            return;\n        }\n\n        if (method) {\n            trackSelectedPaymentMethod(method);\n        }\n\n        setState(prevState => ({ ...prevState, selectedMethod: method }));\n    }, []);\n\n    const setSubmit = (\n        method: PaymentMethod,\n        fn: (values: PaymentFormValues) => void | null,\n    ): void => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { submitFunctions } = state;\n\n        if (submitFunctions[uniqueId] === fn) {\n            return;\n        }\n\n        setState(prevState => ({ ...prevState,\n            submitFunctions: {\n                ...submitFunctions,\n                [uniqueId]: fn,\n            },\n        }));\n    };\n\n    const setValidationSchema = (\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n\n        if (validationSchemasRef.current[uniqueId] === schema) {\n            return;\n        }\n\n        validationSchemasRef.current[uniqueId] = schema;\n    };\n\n    const loadPaymentMethodsOrThrow = async (): Promise<void> => {\n        const {\n            loadPaymentMethods,\n            onUnhandledError = noop,\n        } = props;\n\n        try {\n            await loadPaymentMethods();\n\n            const selectedMethod = state.selectedMethod || props.defaultMethod;\n\n            if (selectedMethod) {\n                trackSelectedPaymentMethod(selectedMethod);\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    const handleCartTotalChange = async (): Promise<void> => {\n        const isReady = isReadyRef.current;\n\n        if (!isReady) {\n            return;\n        }\n\n        setState(prevState => ({ ...prevState, isReady: false }));\n\n        await loadPaymentMethodsOrThrow();\n\n        setState(prevState => ({ ...prevState,  isReady: true }));\n    }\n\n    const getContextValue = memoizeOne(() => {\n        return {\n            disableSubmit,\n            setSubmit,\n            setValidationSchema,\n            hidePaymentSubmitButton,\n        };\n    });\n\n    useEffect(() => {\n        isReadyRef.current = state.isReady;\n    }, [state.isReady]);\n\n    useEffect(() => {\n        const init = async () => {\n            const {\n                finalizeOrderIfNeeded,\n                onFinalize = noop,\n                onFinalizeError = noop,\n                onReady = noop,\n                usableStoreCredit,\n                checkoutServiceSubscribe,\n            } = props;\n\n            if (usableStoreCredit) {\n                await handleStoreCreditChange(true);\n            }\n\n            await loadPaymentMethodsOrThrow();\n\n            try {\n                const state = await finalizeOrderIfNeeded();\n                const order = state.data.getOrder();\n\n                onFinalize(order?.orderId);\n            } catch (error) {\n                if (isErrorWithType(error) && error.type !== 'order_finalization_not_required') {\n                    onFinalizeError(error);\n                }\n            }\n\n            grandTotalChangeUnsubscribe.current = checkoutServiceSubscribe(\n                () => handleCartTotalChange(),\n                ({ data }) => data.getCheckout()?.grandTotal,\n                ({ data }) => data.getCheckout()?.outstandingBalance,\n            );\n\n            window.addEventListener('beforeunload', handleBeforeUnload);\n            setState(prevState => ({ ...prevState, isReady: true }));\n            onReady();\n        }\n\n        void init();\n\n        return () => {\n            const deInit = () => {\n                if (grandTotalChangeUnsubscribe.current) {\n                    grandTotalChangeUnsubscribe.current();\n                    grandTotalChangeUnsubscribe.current = undefined;\n                }\n\n                window.removeEventListener('beforeunload', handleBeforeUnload);\n            }\n\n            deInit();\n        }\n    }, []);\n\n    useEffect(() => {\n        const { checkEmbeddedSupport = noop, methods } = props;\n\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    }, [props.methods]);\n\n    const { selectedMethod = props.defaultMethod } = state;\n    const uniqueSelectedMethodId =\n        selectedMethod && getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway);\n\n    return (\n        <PaymentContext.Provider value={getContextValue()}>\n            <ChecklistSkeleton isLoading={!state.isReady}>\n                {!isEmpty(props.methods) && props.defaultMethod && (\n                    <PaymentForm\n                        availableStoreCredit={props.availableStoreCredit}\n                        defaultGatewayId={props.defaultMethod.gateway}\n                        defaultMethodId={props.defaultMethod.id}\n                        didExceedSpamLimit={state.didExceedSpamLimit}\n                        isEmbedded={props.isEmbedded}\n                        isInitializingPayment={props.isInitializingPayment}\n                        isPaymentDataRequired={props.isPaymentDataRequired}\n                        isStoreCreditApplied = {props.isStoreCreditApplied}\n                        isTermsConditionsRequired={props.isTermsConditionsRequired}\n                        isUsingMultiShipping={props.isUsingMultiShipping}\n                        methods={props.methods}\n                        onMethodSelect={setSelectedMethod}\n                        onStoreCreditChange={handleStoreCreditChange}\n                        onSubmit={handleSubmit}\n                        onUnhandledError={handleError}\n                        selectedMethod={state.selectedMethod}\n                        shouldDisableSubmit={(uniqueSelectedMethodId && state.shouldDisableSubmit[uniqueSelectedMethodId]) || undefined}\n                        shouldExecuteSpamCheck = {props.shouldExecuteSpamCheck}\n                        shouldHidePaymentSubmitButton={(uniqueSelectedMethodId && props.isPaymentDataRequired() && state.shouldHidePaymentSubmitButton[uniqueSelectedMethodId]) || undefined}\n                        termsConditionsText={props.termsConditionsText}\n                        termsConditionsUrl={props.termsConditionsUrl}\n                        usableStoreCredit={props.usableStoreCredit}\n                        validationSchema={(uniqueSelectedMethodId && validationSchemasRef.current[uniqueSelectedMethodId]) || undefined}\n                    />\n                )}\n            </ChecklistSkeleton>\n\n            {renderOrderErrorModal()}\n            {renderEmbeddedSupportErrorModal()}\n        </PaymentContext.Provider>\n    );\n}\n\nexport function mapToPaymentProps({\n        checkoutService,\n        checkoutState,\n}: CheckoutContextProps): WithCheckoutPaymentProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getOrder,\n            getPaymentMethod,\n            getPaymentMethods,\n            isPaymentDataRequired,\n            getPaymentProviderCustomer,\n        },\n        errors: { getFinalizeOrderError, getSubmitOrderError },\n        statuses: { isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const customer = getCustomer();\n    const consignments = getConsignments();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n\n    const { isComplete = false } = getOrder() || {};\n    let methods = getPaymentMethods() || EMPTY_ARRAY;\n\n    // TODO: In accordance with the checkout team, this functionality is temporary and will be implemented in the backend instead.\n    if (paymentProviderCustomer?.stripeLinkAuthenticationState) {\n        const stripeUpePaymentMethod = methods.filter(method =>\n            method.id === 'card' && method.gateway === PaymentMethodId.StripeUPE\n        );\n\n        methods = stripeUpePaymentMethod.length ? stripeUpePaymentMethod : methods;\n    }\n\n    if (!checkout || !config || !customer || isComplete) {\n        return null;\n    }\n\n    const {\n        enableTermsAndConditions: isTermsConditionsEnabled,\n        features,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditions: termsCondtitionsText,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n\n    const isTermsConditionsRequired = isTermsConditionsEnabled;\n    const selectedPayment = find(checkout.payments, {\n        providerType: PaymentMethodProviderType.Hosted,\n    });\n\n    const { isStoreCreditApplied } = checkout;\n\n    let selectedPaymentMethod;\n    let filteredMethods;\n\n    filteredMethods = methods.filter((method: PaymentMethod) => {\n        if (method.id === PaymentMethodId.Bolt && method.initializationData) {\n            return Boolean(method.initializationData.showInCheckout);\n        }\n\n        return method.id !== PaymentMethodId.BraintreeLocalPaymentMethod;\n    });\n\n    if (consignments && consignments.length > 1) {\n        const multiShippingIncompatibleMethodIds: string[] = [\n            PaymentMethodId.AmazonPay,\n        ];\n\n        filteredMethods = methods.filter((method: PaymentMethod) => {\n            return !multiShippingIncompatibleMethodIds.includes(method.id);\n        });\n    }\n\n    if (selectedPayment) {\n        selectedPaymentMethod = getPaymentMethod(\n            selectedPayment.providerId,\n            selectedPayment.gatewayId,\n        );\n        filteredMethods = selectedPaymentMethod\n            ? compact([selectedPaymentMethod])\n            : filteredMethods;\n    } else {\n        selectedPaymentMethod = find(filteredMethods, {\n            config: { hasDefaultStoredInstrument: true },\n        });\n        // eslint-disable-next-line no-self-assign\n        filteredMethods = filteredMethods;\n    }\n\n    return {\n        applyStoreCredit: checkoutService.applyStoreCredit,\n        availableStoreCredit: customer.storeCredit,\n        cartUrl: config.links.cartLink,\n        clearError: checkoutService.clearError,\n        defaultMethod: selectedPaymentMethod || filteredMethods[0],\n        finalizeOrderError: getFinalizeOrderError(),\n        finalizeOrderIfNeeded: checkoutService.finalizeOrderIfNeeded,\n        loadCheckout: checkoutService.loadCheckout,\n        isInitializingPayment: isInitializingPayment(),\n        isPaymentDataRequired,\n        isStoreCreditApplied,\n        isSubmittingOrder: isSubmittingOrder(),\n        isTermsConditionsRequired,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        methods: filteredMethods,\n        shouldExecuteSpamCheck: checkout.shouldExecuteSpamCheck,\n        shouldLocaliseErrorMessages:\n            features['PAYMENTS-6799.localise_checkout_payment_error_messages'],\n        submitOrder: checkoutService.submitOrder,\n        submitOrderError: getSubmitOrderError(),\n        checkoutServiceSubscribe: checkoutService.subscribe,\n        termsConditionsText:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea\n                ? termsCondtitionsText\n                : undefined,\n        termsConditionsUrl:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link\n                ? termsCondtitionsUrl\n                : undefined,\n        usableStoreCredit:\n            checkout.grandTotal > 0 ? Math.min(checkout.grandTotal, customer.storeCredit || 0) : 0,\n    };\n}\n\nexport default withAnalytics(withLanguage(withCheckout(mapToPaymentProps)(Payment)));\n","import { type OrderPaymentRequestBody, type OrderRequestBody } from '@bigcommerce/checkout-sdk';\nimport { isEmpty, isNil, omitBy } from 'lodash';\n\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { unformatCreditCardExpiryDate, unformatCreditCardNumber } from './creditCard';\nimport {\n    hasCreditCardExpiry,\n    hasCreditCardNumber,\n    parseUniquePaymentMethodId,\n} from './paymentMethod';\n\nexport default function mapToOrderRequestBody(\n    values: PaymentFormValues,\n    isPaymentDataRequired: boolean,\n): OrderRequestBody {\n    if (!isPaymentDataRequired) {\n        return {};\n    }\n\n    const { paymentProviderRadio, ...rest } = values;\n    const { methodId, gatewayId } = parseUniquePaymentMethodId(paymentProviderRadio);\n    const payload: OrderRequestBody = {\n        payment: { gatewayId, methodId },\n    };\n    const paymentData = omitBy(\n        {\n            ...rest,\n            ccExpiry: hasCreditCardExpiry(values)\n                ? unformatCreditCardExpiryDate(values.ccExpiry)\n                : null,\n            ccNumber: hasCreditCardNumber(values)\n                ? unformatCreditCardNumber(values.ccNumber)\n                : null,\n        },\n        isNil,\n    ) as OrderPaymentRequestBody['paymentData'];\n\n    if (payload.payment && !isEmpty(paymentData)) {\n        payload.payment.paymentData = paymentData;\n    }\n\n    return payload;\n}\n","import { type CartChangedError } from '@bigcommerce/checkout-sdk';\n\nexport default function isCartChangedError(error: unknown): error is CartChangedError {\n    const requestError = error as CartChangedError;\n\n    return requestError.type === 'cart_changed';\n}\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [anchorSiblings[0], anchor.text, anchorSiblings[1]];\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { type ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children?: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children?: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    useEffect(() => {\n        return () => {\n            setFieldValue(name, '');\n        };\n    }, []);\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { connect } from 'formik';\nimport React, { type ComponentType, type FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport type ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import React, { type FunctionComponent, memo, Suspense } from 'react';\n\nimport { getPaymentMethodIconComponent } from './mapFromPaymentMethodCardType';\nimport { IconSize } from './withIconContainer';\n\nexport interface CreditCardIconProps {\n    cardType?: string;\n}\n\nconst CreditCardIcon: FunctionComponent<CreditCardIconProps> = ({ cardType }) => {\n    const iconProps = {\n        additionalClassName: 'cardIcon-icon',\n        size: IconSize.Medium,\n        testId: `credit-card-icon-${cardType || 'default'}`,\n    };\n\n    const IconComponent = getPaymentMethodIconComponent(cardType);\n\n    return IconComponent ? (\n        <Suspense>\n            <IconComponent {...iconProps} />\n        </Suspense>\n    ) : (\n        <div className=\"cardIcon-icon cardIcon-icon--default icon icon--medium\" />\n    );\n};\n\nexport default memo(CreditCardIcon);\n","import React, {\n    type KeyboardEvent,\n    type KeyboardEventHandler,\n    type MouseEventHandler,\n    type ReactElement,\n    type ReactNode,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nconst ModalTrigger = ({ children, modal }: ModalTriggerProps): ReactElement => {\n    const [isOpen, setIsOpen] = useState(false);\n    const canHandleEventRef = useRef(false);\n\n    useEffect(() => {\n        canHandleEventRef.current = true;\n\n        return () => {\n            canHandleEventRef.current = false;\n        };\n    }, []);\n\n    const handleOpen = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(true);\n    };\n\n    const handleClose = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(false);\n    };\n\n    const handleKeyOpen = (keyboardEvent: KeyboardEvent<HTMLElement>): void => {\n        if (keyboardEvent.key === 'Enter') {\n            handleOpen();\n        }\n    };\n\n    return (\n        <>\n            {children({\n                onClick: handleOpen,\n                onKeyPress: handleKeyOpen,\n            })}\n\n            {modal({\n                isOpen,\n                onRequestClose: handleClose,\n            })}\n        </>\n    );\n};\n\nexport default ModalTrigger;\n","import { type ComponentType, lazy } from 'react';\n\nimport { type IconProps } from './';\n\ninterface InstrumentComponent {\n    instrument: string;\n    component: ComponentType<IconProps>;\n}\n\nconst instrumentTypeMap: Record<string, InstrumentComponent> = {\n    AMEX: {\n        instrument: 'american-express',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-amex\" */ './IconCardAmex')),\n    },\n    BITCOIN: {\n        instrument: 'bitcoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-bitcoin\" */ './IconBitCoin')),\n    },\n    BITCOIN_CASH: {\n        instrument: 'bitcoin-cash',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-bitcoin-cash\" */ './IconBitCoinCash'),\n        ),\n    },\n    BANCONTACT: {\n        instrument: 'bancontact',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-bancontact\" */ './IconCardBancontact'),\n        ),\n    },\n    CARNET: {\n        instrument: 'carnet',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-carnet\" */ './IconCardCarnet'),\n        ),\n    },\n    CB: {\n        instrument: 'cb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-cb\" */ './IconCardCB')),\n    },\n    DINERS: {\n        instrument: 'diners-club',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-diners-club\" */ './IconCardDinersClub'),\n        ),\n    },\n    DANKORT: {\n        instrument: 'dankort',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-dankort\" */ './IconCardDankort'),\n        ),\n    },\n    DISCOVER: {\n        instrument: 'discover',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-discover\" */ './IconCardDiscover'),\n        ),\n    },\n    DOGECOIN: {\n        instrument: 'dogecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-dogecoin\" */ './IconDogeCoin')),\n    },\n    ELECTRON: {\n        instrument: 'electron',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-electron\" */ './IconCardElectron'),\n        ),\n    },\n    ELO: {\n        instrument: 'elo',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-elo\" */ './IconCardElo')),\n    },\n    ETHEREUM: {\n        instrument: 'ethereum',\n        component: lazy(() => import(/* webpackChunkName: \"icon-ethereum\" */ './IconEthereum')),\n    },\n    HIPER: {\n        instrument: 'hiper',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-hipercard\" */ './IconCardHipercard'),\n        ),\n    },\n    JCB: {\n        instrument: 'jcb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-jcb\" */ './IconCardJCB')),\n    },\n    LITECOIN: {\n        instrument: 'litecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-litecoin\" */ './IconLiteCoin')),\n    },\n    MADA: {\n        instrument: 'mada',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-mada\" */ './IconCardMada')),\n    },\n    MAESTRO: {\n        instrument: 'maestro',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-maestro\" */ './IconCardMaestro'),\n        ),\n    },\n    MC: {\n        instrument: 'mastercard',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-mastercard\" */ './IconCardMastercard'),\n        ),\n    },\n    SHIBA_INU: {\n        instrument: 'shiba-inu',\n        component: lazy(() => import(/* webpackChunkName: \"icon-shiba-inu\" */ './IconShibaInu')),\n    },\n    TROY: {\n        instrument: 'troy',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-troy\" */ './IconCardTroy')),\n    },\n    CUP: {\n        instrument: 'unionpay',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-unionpay\" */ './IconCardUnionPay'),\n        ),\n    },\n    USD_COIN: {\n        instrument: 'usd-coin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-usd-coin\" */ './IconUsdCoin')),\n    },\n    VISA: {\n        instrument: 'visa',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-visa\" */ './IconCardVisa')),\n    },\n};\n\nexport default function mapFromPaymentMethodCardType(type: string): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return instrumentTypeMap[type]?.instrument || undefined;\n}\n\nexport function getPaymentMethodIconComponent(type?: string): ComponentType<IconProps> | undefined {\n    if (!type) {\n        return undefined;\n    }\n\n    const instrumentType = Object.values(instrumentTypeMap).find(\n        (record) => record.instrument === type,\n    );\n\n    return instrumentType ? instrumentType.component : undefined;\n}\n\nfunction getSupportedInstrumentTypes() {\n    return Object.values(instrumentTypeMap).map((record) => record.instrument);\n}\n\nexport function filterInstrumentTypes(instrumentTypes: string[]) {\n    const supportedInstrumentTypes = getSupportedInstrumentTypes();\n\n    return instrumentTypes.filter((type) => supportedInstrumentTypes.includes(type));\n}\n"],"names":["memo","bodyClassName","children","className","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","onToggle","selectedItemId","useContext","AccordionContext","A","isSelected","transitionEndListener","useCallback","node","done","addEventListener","target","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","id","props","Input","checked","type","Label","htmlFor","isDisabled","value","content","htmlId","kebabCase","label","rest","name","Checklist","C","renderInput","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","render","placement","tooltip","shouldShow","setShouldShow","useState","handleShow","handleHide","ref","onBlur","onFocus","onMouseEnter","onMouseLeave","modifiers","enabled","style","PaymentMethodType","coupon","displayName","TranslatedString","code","giftCertificate","ShopperCurrency","amount","used","remaining","height","viewBox","width","xmlns","d","isRemoving","onRemove","onClick","AppliedCouponChecklistItem","onRemoved","handleRemove","AppliedGiftCertificateChecklistItem","coupons","giftCertificates","isRemovingCoupon","isRemovingGiftCertificate","onRemovedCoupon","onRemovedGiftCertificate","length","map","key","RedeemableForm","appliedRedeemableError","isApplyingRedeemable","clearError","noop","submitForm","language","checkoutState","statuses","isSubmittingOrder","themeV2","handleSubmitForm","setSubmitted","handleKeyDown","event","keyCode","preventDefault","handleSubmit","renderLabel","hidden","renderErrorMessage","errorCode","errorMessage","errors","Alert","Error","message","TextInput","translate","onKeyDown","testId","Button","isLoading","variant","Secondary","renderContent","FormField","input","withLanguage","mapPropsToValues","redeemableCode","applyCoupon","applyGiftCertificate","trim","error","validationSchema","required","shouldCollapseCouponCode","showAppliedRedeemables","formProps","Toggle","openByDefault","toggle","isOpen","href","createContext","forwardRef","additionalClassName","labelContent","renderField","errorId","undefined","unformatCreditCardNumber","separator","card","number","replace","RegExp","PaymentMethodProviderType","displayNamePrefix","mapToRedeemableProps","context","checkoutService","data","getConfig","getCoupons","getGiftCertificates","isApplyingCoupon","isApplyingGiftCertificate","getApplyCouponError","getApplyGiftCertificateError","getRemoveCouponError","getRemoveGiftCertificateError","config","removeCoupon","removeGiftCertificate","removedRedeemableError","checkoutSettings","isCouponCodeCollapsed","PaymentFormContext","usePaymentFormContext","isFloatingLabelEnabled","body","header","renderModal","Modal","additionalBodyClassName","footer","onRequestClose","size","Small","shouldShowCloseButton","ModalTrigger","modal","split","line","Fragment","TermsConditionsType","TermsConditionsModalCheckboxField","terms","translatedLabel","url","parsedLabel","parseAnchor","ModalHeader","CheckboxFormField","TermsConditionsCheckboxField","useMemo","TranslatedHtml","TermsConditionsTextField","defaultValue","readOnly","Fieldset","legend","Legend","TextArea","isTermsConditionsTextArea","isTermsConditionModal","mapSubmitOrderErrorMessage","shouldLocalise","subtype","includes","err","join","mapSubmitOrderErrorTitle","unformatCreditCardExpiryDate","month","year","test","slice","getUniquePaymentMethodId","methodId","gatewayId","compact","parseUniquePaymentMethodId","hasCreditCardNumber","values","Object","hasCreditCardExpiry","TermsConditions","termsConditionsUrl","termsConditionsText","TermsConditionsField","Link","getPaymentValidationSchema","additionalValidation","isTermsConditionsRequired","schemaFields","paymentProviderRadio","schemaFieldsWithTerms","concat","oneOf","getTermsConditionsValidationSchema","getPaymentMethodName","method","translations","PaymentMethodId","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","capitalize","get","onUnhandledError","useEffect","initializePayment","BigCommercePaymentsPayLater","integrations","bigcommerce_payments_paylater","bannerContainerId","deinitializePayment","containerId","braintree","selectedCardType","cardTypes","filteredCardTypes","CreditCardIcon","cardType","getPaymentMethodTitle","basePath","storeCountryCode","cdnPath","path","paymentWithLogo","initializationData","methodsWithLogo","methodName","methodDisplayName","isCreditCard","toLowerCase","PaypalCommerceCredit","BraintreePaypalCredit","payPalCreditProductBrandName","credit","AdyenV2","AdyenV3","getPaymentMethodDisplayName","customTitles","CreditCard","logoUrl","titleText","BraintreeVenmo","subtitle","BraintreeAch","BraintreeLocalPaymentMethod","BigCommercePaymentsPayPal","BigCommercePaymentsAlternativeMethod","PaypalCommerce","PaypalCommerceAlternativeMethod","isExperimentEnabled","ApplePay","PayWithGoogle","Humm","enableBillie","Laybuy","Masterpass","Quadpay","Sezzle","Zip","Barclaycard","Mollie","Checkoutcom","StripeV3","StripeUPE","WorldpayAccess","gateway","BlueSnapDirect","PaypalCommerceVenmo","BigCommercePaymentsVenmo","PaypalPaymentsPro","Ratepay","connectFormik","withCheckout","getInstruments","instruments","storeProfile","cdnBasePath","formik","alt","src","getSubtitle","supportedCards","mapFromPaymentMethodCardType","instrumentSelected","filter","instrument","provider","find","bigpayToken","instrumentId","getInstrumentForMethod","hostedForm","ccNumber","brand","getSelectedCardType","PaymentFormProvider","paymentForm","Provider","AdyenV2PaymentMethod","lazy","then","module","default","AdyenV3PaymentMethod","AffirmPaymentMethod","AmazonPayV2PaymentMethod","ApplePayPaymentMethod","BarclaycardPaymentMethod","BigCommercePaymentsPaymentMethod","BigCommercePaymentsAPMsPaymentMethod","BigCommercePaymentsCreditCardsPaymentMethod","BigCommercePaymentsFastlanePaymentMethod","BigCommercePaymentsPayLaterPaymentMethod","BigCommercePaymentsVenmoPaymentMethod","BigCommercePaymentsRatePayPaymentMethod","BlueSnapDirectEcpPaymentMethod","BlueSnapDirectAlternativePaymentMethod","BlueSnapDirectSepaPaymentMethod","BlueSnapDirectIdealPaymentMethod","BlueSnapV2PaymentMethod","BlueSnapDirectPayByBankPaymentMethod","BoltClientPaymentMethod","BoltEmbeddedPaymentMethod","BoltPaymentMethod","BraintreeAchPaymentMethod","BraintreeFastlanePaymentMethod","BraintreePaypalPaymentMethod","VisaCheckoutPaymentMethod","BraintreeVenmoPaymentMethod","CheckoutcomCustomPaymentMethod","ClearpayPaymentMethod","GooglePayPaymentMethod","HostedCreditCardPaymentMethod","HostedPaymentMethod","KlarnaPaymentMethod","KlarnaV2PaymentMethod","MolliePaymentMethod","MonerisPaymentMethod","OfflinePaymentMethod","PayPalCommerceAPMsPaymentMethod","PayPalCommerceCreditPaymentMethod","PayPalCommerceCreditCardsPaymentMethod","PayPalCommerceFastlanePaymentMethod","PayPalCommercePaymentMethod","PayPalCommerceVenmoPaymentMethod","PaypalCommerceRatePayPaymentMethod","PaypalExpressPaymentMethod","PayPalPaymentsProPaymentMethod","PPSDKPaymentMethod","SquareV2PaymentMethod","StripeOCSPaymentMethod","StripeUPEPaymentMethod","StripeV3PaymentMethod","WorldpayCreditCardPaymentMethod","ComponentRegistry","AdyenV2GooglePay","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","BigCommercePaymentsGooglePay","CheckoutcomGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","StripeGooglePay","StripeUPEGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","BraintreeVisaCheckout","PaymentMethodV1","withPayment","withForm","formikContext","disableSubmit","hidePaymentSubmitButton","isEmbedded","isSubmitted","isUsingMultiShipping","setSubmit","setValidationSchema","formContext","paymentContext","ResolvedPaymentMethod","query","components","resolveLazyComponent","resolvePaymentMethod","LazyContainer","setFieldTouched","setFieldValue","validateForm","getFieldValue","getFormValues","createPaymentFormService","Suspense","getPaymentMethodFromListValue","methods","PaymentMethodListItem","renderPaymentMethod","PaymentMethodV2","renderPaymentMethodTitle","isCustomChecklistItem","ChecklistItem","isInitializingPayment","onSelect","paymentMethod","handleSelect","role","defaultSelectedItemId","window","navigator","userAgent","redeemableProps","Redeemable","providersWithCustomClasses","PaymentSubmitButtonText","methodType","methodGateway","initialisationStrategyType","brandName","isComplete","isPaymentDataRequired","IconBolt","BlueSnapV2","PaypalVenmo","continueActionId","continueTranslationId","completeTranslationId","isInitializingCustomer","isInitializing","isSubmitting","isFullWidth","Large","Action","didExceedSpamLimit","shouldShowRetryButton","setShouldShowRetryButton","executeSpamCheck","isExecutingSpamCheck","verify","isErrorWithType","LoadingOverlay","withCurrency","availableStoreCredit","currency","usableStoreCredit","isStoreCreditApplied","TooltipTrigger","Tooltip","storeCredit","toCustomerCurrency","CheckboxInput","PaymentMethodSubmitButtonContainer","PaymentMethodListFieldset","onMethodSelect","resetForm","FormContext","handlePaymentMethodSelect","updatedValues","ccCustomerCode","ccCvv","ccDocument","customerEmail","customerMobile","ccExpiry","ccName","shouldCreateAccount","shouldSaveInstrument","Extension","region","paymentFormConfig","defaultGatewayId","defaultMethodId","cardCode","cardCodeVerification","cardExpiry","cardName","cardNumber","cardNumberVerification","accountNumber","routingNumber","onSubmit","omitBy","isNil","onStoreCreditChange","selectedMethod","shouldDisableSubmit","shouldHidePaymentSubmitButton","shouldExecuteSpamCheck","selectedMethodId","paymentToken","Form","initializationStrategy","mapToPaymentProps","getCheckout","getCustomer","getConsignments","getOrder","getPaymentMethod","getPaymentMethods","getPaymentProviderCustomer","getFinalizeOrderError","getSubmitOrderError","checkout","customer","consignments","paymentProviderCustomer","stripeLinkAuthenticationState","stripeUpePaymentMethod","enableTermsAndConditions","isTermsConditionsEnabled","features","orderTermsAndConditionsType","termsConditionsType","orderTermsAndConditions","termsCondtitionsText","orderTermsAndConditionsLink","termsCondtitionsUrl","selectedPayment","payments","providerType","Hosted","selectedPaymentMethod","filteredMethods","Boolean","showInCheckout","multiShippingIncompatibleMethodIds","providerId","hasDefaultStoredInstrument","applyStoreCredit","cartUrl","links","cartLink","defaultMethod","finalizeOrderError","finalizeOrderIfNeeded","loadCheckout","loadPaymentMethods","shouldLocaliseErrorMessages","submitOrder","submitOrderError","checkoutServiceSubscribe","subscribe","grandTotal","Math","min","withAnalytics","state","setState","isReady","submitFunctions","isReadyRef","useRef","grandTotalChangeUnsubscribe","validationSchemasRef","uniqueId","prevState","handleBeforeUnload","PPSDK","skipRedirectConfirmationAlert","returnValue","handleCloseModal","_","errorType","location","reload","headers","status","top","assign","handleStoreCreditChange","useStoreCredit","e","handleError","errorLogger","log","onCartChangedError","onSubmitError","analyticsTracker","clickPayButton","customSubmit","payload","payment","paymentData","isEmpty","mapToOrderRequestBody","order","paymentComplete","orderId","paymentRejected","isCartChangedError","trackSelectedPaymentMethod","setSelectedMethod","fn","schema","current","loadPaymentMethodsOrThrow","getContextValue","onFinalize","onFinalizeError","onReady","outstandingBalance","removeEventListener","checkEmbeddedSupport","uniqueSelectedMethodId","PaymentContext","ChecklistSkeleton","ErrorModal","bind","onClose","title","renderOrderErrorModal","renderEmbeddedSupportErrorModal","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","outerHTML","setSelectedItemId","handleToggleItem","newSelectedItemId","ChecklistContext","contextValue","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","iconProps","Medium","IconComponent","setIsOpen","canHandleEventRef","handleOpen","onKeyPress","keyboardEvent","instrumentTypeMap","AMEX","component","BITCOIN","BITCOIN_CASH","BANCONTACT","CARNET","CB","DINERS","DANKORT","DISCOVER","DOGECOIN","ELECTRON","ELO","ETHEREUM","HIPER","JCB","LITECOIN","MADA","MAESTRO","MC","SHIBA_INU","TROY","CUP","USD_COIN","VISA","getPaymentMethodIconComponent","instrumentType","record","filterInstrumentTypes","instrumentTypes","supportedInstrumentTypes"],"sourceRoot":""}