{"version":3,"file":"9783-3b339309.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-upe/StripeUPEPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3CustomCardForm.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3PaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/getStripeOCSStyles.ts","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/StripeOCSPaymentMethod.tsx"],"sourcesContent":["import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst StripeUPEPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const containerId = `stripe-${method.id}-component-field`;\n    const paymentContext = paymentForm;\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getPaymentProviderCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const isStripeLinkAuthenticated = paymentProviderCustomer?.stripeLinkAuthenticationState;\n    const isGuestCustomer = customer?.isGuest;\n    const shouldSavingCardsBeEnabled = useMemo((): boolean => {\n        if (!isGuestCustomer && isStripeLinkAuthenticated) {\n            return false;\n        }\n\n        return true;\n    }, [isGuestCustomer, isStripeLinkAuthenticated]);\n    const isInstrumentFeatureAvailable =\n        shouldSavingCardsBeEnabled && !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (!parentContainer) {\n            throw new Error(\n                'Unable to retrieve input styles as the provided container ID is not valid.',\n            );\n        }\n\n        return getAppliedStyles(parentContainer, properties);\n    };\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            const formInput = getStylesFromElement(`${containerId}--input`, [\n                'color',\n                'background-color',\n                'border-color',\n                'box-shadow',\n            ]);\n            const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n            const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n            paymentContext.hidePaymentSubmitButton(method, true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeupe: {\n                    containerId,\n                    style: {\n                        labelText: formLabel.color,\n                        fieldText: formInput.color,\n                        fieldPlaceholderText: formInput.color,\n                        fieldErrorText: formError.color,\n                        fieldBackground: formInput['background-color'],\n                        fieldInnerShadow: formInput['box-shadow'],\n                        fieldBorder: formInput['border-color'],\n                    },\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            onUnhandledError,\n            method,\n            paymentContext,\n            renderSubmitButton,\n        ],\n    );\n\n    const renderCheckoutThemeStylesForStripeUPE = () => {\n        return (\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutThemeStylesForStripeUPE()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeUPEPaymentMethod,\n    [{ gateway: 'stripeupe' }, { gateway: 'stripeupe', id: 'klarna' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    LanguageService,\n    LegacyHostedFormOptions,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import {\n    AccountInstrument,\n    CardInstrument,\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, IconLock, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nexport interface StripeV3CustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n    };\n}\n\nconst StripeV3CustomCardForm: React.FunctionComponent<StripeV3CustomCardFormProps> = ({\n    options,\n}) => (\n    <div className=\"form-ccFields\">\n        <div className={classNames('form-field', 'form-field--stripe-ccNumber')}>\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardNumberElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_number_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"CardNumber\"\n                id={options.cardNumberElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n        <div className=\"form-field form-field--ccExpiry\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardExpiryElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_expiration_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"ExpiryDate\"\n                id={options.cardExpiryElementOptions.containerId}\n            />\n        </div>\n        <div className=\"form-field form-ccFields-field--ccCvv\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardCvcElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"SecurityCode\"\n                id={options.cardCvcElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n    </div>\n);\n\nexport default StripeV3CustomCardForm;\n","import {\n    CardInstrument,\n    CustomError,\n    PaymentInitializeOptions,\n    StripeElementOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { useHostedCreditCard } from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport StripeV3CustomCardForm from './StripeV3CustomCardForm';\n\nexport interface StripeOptions {\n    alipay?: StripeElementOptions;\n    card: StripeElementOptions;\n    cardCvc: StripeElementOptions;\n    cardExpiry: StripeElementOptions;\n    cardNumber: StripeElementOptions;\n    iban: StripeElementOptions;\n    idealBank: StripeElementOptions;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    Card = 'card',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    Iban = 'iban',\n    IdealBank = 'idealBank',\n}\n\nconst StripeV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const { useIndividualCardFields } = method.initializationData;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const paymentMethodType = method.id as StripeElementType;\n    const additionalStripeV3Classes =\n        paymentMethodType !== StripeElementType.Alipay\n            ? 'optimizedCheckout-form-input widget--stripev3'\n            : '';\n    const containerId = `stripe-${paymentMethodType}-component-field`;\n    const stripeOptions: StripeOptions = useMemo(() => {\n        const classes = {\n            base: 'form-input optimizedCheckout-form-input',\n        };\n\n        return {\n            [StripeElementType.Card]: {\n                classes,\n            },\n            [StripeElementType.CardCvc]: {\n                classes,\n                placeholder: '',\n            },\n            [StripeElementType.CardExpiry]: {\n                classes,\n            },\n            [StripeElementType.CardNumber]: {\n                classes,\n                showIcon: true,\n                placeholder: '',\n            },\n            [StripeElementType.Iban]: {\n                classes,\n                supportedCountries: ['SEPA'],\n            },\n            [StripeElementType.IdealBank]: {\n                classes,\n            },\n        };\n    }, []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer, getConfig },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const storeUrl = useMemo(() => {\n        if (!config) {\n            return null;\n        }\n\n        return config.links.siteLink;\n    }, [config]);\n\n    const onUnhandledStripeV3Error = useCallback(\n        (error: CustomError) => {\n            if (error.type === 'stripev3_error' && error.subtype === 'auth_failure') {\n                error.message = language.translate('payment.stripev3_auth_3ds_fail');\n            }\n\n            onUnhandledError(error);\n        },\n        [language, onUnhandledError],\n    );\n\n    const getIndividualCardElementOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            return {\n                cardNumberElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardNumber],\n                    containerId: 'stripe-card-number-component-field',\n                },\n                cardExpiryElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardExpiry],\n                    containerId: 'stripe-expiry-component-field',\n                },\n                cardCvcElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardCvc],\n                    containerId: 'stripe-cvc-component-field',\n                },\n            };\n        },\n        [],\n    );\n\n    const getStripeOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            if (useIndividualCardFields) {\n                return getIndividualCardElementOptions(stripeInitializeOptions);\n            }\n\n            return stripeInitializeOptions[paymentMethodType];\n        },\n        [paymentMethodType, getIndividualCardElementOptions, useIndividualCardFields],\n    );\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                stripev3: {\n                    containerId,\n                    options: getStripeOptions(stripeOptions),\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [containerId, getStripeOptions, stripeOptions, checkoutService, getHostedFormOptions],\n    );\n\n    const renderCustomPaymentForm = () => {\n        const optionsCustomForm = getIndividualCardElementOptions(stripeOptions);\n\n        return <StripeV3CustomCardForm options={optionsCustomForm} />;\n    };\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                additionalContainerClassName={additionalStripeV3Classes}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledStripeV3Error}\n                renderCustomPaymentForm={renderCustomPaymentForm}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldRenderCustomInstrument={useIndividualCardFields}\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            {method.id === 'iban' && (\n                <p className=\"stripe-sepa-mandate-disclaimer\">\n                    <TranslatedString\n                        data={{ storeUrl }}\n                        id=\"payment.stripe_sepa_mandate_disclaimer\"\n                    />\n                </p>\n            )}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeV3PaymentMethod,\n    [{ gateway: 'stripev3' }],\n);\n","import { StripeAppearanceOptions, StripeCustomFont } from '@bigcommerce/checkout-sdk';\nimport { isEmpty } from 'lodash';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nconst getStylesFromElement = (\n    selector: string,\n    properties: string[],\n    pseudoElementSelector?: string,\n) => {\n    const element = document.querySelector<HTMLElement>(selector);\n\n    return element ? getAppliedStyles(element, properties, pseudoElementSelector) : {};\n};\n\nconst parseRadioIconSize = (size: string | number = 0): number =>\n    typeof size !== 'number' ? parseInt(size, 10) : size;\n\nconst getRadioIconSizes = (sizes?: Record<string, string | number | undefined>) => {\n    const {\n        radioIconOuterWidth = 26,\n        radioIconOuterStrokeWidth = 1,\n        radioIconInnerWidth = 17,\n    } = sizes || {};\n    const stripeSVGSizeCoefficient = 0.88; // Provided by Stripe team for scaling SVGs.\n\n    const percentageCoefficient = stripeSVGSizeCoefficient * 100;\n    const outerWidth = parseRadioIconSize(radioIconOuterWidth);\n    const outerStrokeWidth = parseRadioIconSize(radioIconOuterStrokeWidth);\n    const innerWidth = parseRadioIconSize(radioIconInnerWidth);\n\n    const stripeEqualOuterWidth = (outerWidth / stripeSVGSizeCoefficient).toFixed(2);\n    const stripeEqualOuterStrokeWidth = (\n        (outerStrokeWidth / outerWidth) *\n        percentageCoefficient\n    ).toFixed(2);\n    const stripeEqualInnerRadius = (\n        ((innerWidth / outerWidth) * percentageCoefficient) /\n        2\n    ).toFixed(2);\n\n    return {\n        outerWidth: `${stripeEqualOuterWidth}px`,\n        outerStrokeWidth: `${stripeEqualOuterStrokeWidth}px`,\n        innerRadius: stripeEqualInnerRadius,\n    };\n};\n\nexport const getFonts = (selector = 'link[href*=\"font\"]'): StripeCustomFont[] => {\n    const elementsList: NodeListOf<Element> = document.querySelectorAll(selector);\n    const fonts: StripeCustomFont[] = [];\n\n    elementsList.forEach((element: Element | null) => {\n        const fontSrc = element?.getAttribute('href');\n\n        if (fontSrc) {\n            fonts.push({ cssSrc: fontSrc });\n        }\n    });\n\n    return fonts;\n};\n\nexport const getAppearanceForOCSElement = (containerId: string): StripeAppearanceOptions => {\n    const defaultAccordionPaddingHorizontal = '18px';\n    const defaultAccordionPaddingVertical = '13px';\n    const defaultRadioIconInnerScale = 0.66;\n\n    const formInputStyles = getStylesFromElement(`#${containerId}--input`, [\n        'color',\n        'background-color',\n        'border-color',\n        'box-shadow',\n        'font-family',\n    ]);\n    const formLabelStyles = getStylesFromElement(`#${containerId}--label`, ['color']);\n    const formErrorStyles = getStylesFromElement(`#${containerId}--error`, ['color']);\n    const accordionHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        [\n            'color',\n            'font-size',\n            'font-family',\n            'font-weight',\n            'padding-top',\n            'padding-right',\n            'padding-bottom',\n        ],\n    );\n    const accordionSelectedHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header-selected`,\n        ['background-color'],\n    );\n    const formChecklistStyles = getStylesFromElement(\n        `#${containerId}--accordion-header.optimizedCheckout-form-checklist-item`,\n        ['border-bottom', 'border-color'],\n    );\n    const {\n        color: accordionHeaderColor,\n        'font-size': accordionItemTitleFontSize,\n        'font-family': accordionHeaderFontFamily,\n        'font-weight': accordionItemTitleFontWeight,\n        'padding-top': accordionPaddingTop = defaultAccordionPaddingVertical,\n        'padding-right': accordionPaddingRight = defaultAccordionPaddingHorizontal,\n        'padding-bottom': accordionPaddingBottom = defaultAccordionPaddingVertical,\n    } = accordionHeaderStyles;\n    const accordionHeaderPadding = !isEmpty(accordionHeaderStyles)\n        ? `${accordionPaddingTop} ${accordionPaddingRight} ${accordionPaddingBottom} ${defaultAccordionPaddingHorizontal}`\n        : undefined;\n    const radioOuter = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        ['border-color', 'border-width', 'width'],\n        '::before',\n    );\n    const radioOuterChecked = getStylesFromElement(\n        `#${containerId}--accordion-header-selected .form-label`,\n        ['border-color'],\n        '::before',\n    );\n    const radioIconSize = getRadioIconSizes({\n        radioIconOuterWidth: radioOuter.width,\n        radioIconOuterStrokeWidth: radioOuter['border-width'],\n        radioIconInnerWidth:\n            radioOuter.width && parseRadioIconSize(radioOuter.width) * defaultRadioIconInnerScale,\n    });\n    const radioIconColor = radioOuter['border-color'];\n    const radioIconFocusColor = radioOuterChecked['border-color'];\n\n    return {\n        variables: {\n            colorPrimary: formInputStyles['box-shadow'],\n            colorBackground: formInputStyles['background-color'],\n            colorText: formLabelStyles.color,\n            colorDanger: formErrorStyles.color,\n            colorTextSecondary: formLabelStyles.color,\n            colorTextPlaceholder: formInputStyles.color,\n            colorIcon: formInputStyles.color,\n            fontFamily: accordionHeaderFontFamily || formInputStyles['font-family'],\n        },\n        rules: {\n            '.Input': {\n                borderColor: formInputStyles['border-color'],\n                color: formInputStyles.color,\n                boxShadow: formInputStyles['box-shadow'],\n            },\n            '.AccordionItem': {\n                borderRadius: 0,\n                borderWidth: 0,\n                borderBottom: formChecklistStyles['border-bottom'],\n                borderColor: formChecklistStyles['border-color'],\n                boxShadow: 'none',\n                fontSize: accordionItemTitleFontSize,\n                fontWeight: accordionItemTitleFontWeight,\n                color: accordionHeaderColor,\n                padding: accordionHeaderPadding,\n            },\n            '.AccordionItem:hover': {\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n                color: accordionHeaderColor,\n            },\n            '.AccordionItem--selected': {\n                fontWeight: 'bold',\n                color: accordionHeaderColor,\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n            },\n            '.TabLabel': {\n                color: accordionHeaderColor,\n            },\n            '.RadioIcon': {\n                width: radioIconSize.outerWidth,\n            },\n            '.RadioIconInner': {\n                r: radioIconSize.innerRadius,\n                fill: radioIconFocusColor,\n            },\n            '.RadioIconOuter': {\n                strokeWidth: radioIconSize.outerStrokeWidth,\n                stroke: radioIconColor,\n            },\n            '.RadioIconOuter--checked': {\n                stroke: radioIconFocusColor,\n            },\n        },\n    };\n};\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, {\n    FunctionComponent,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { AccordionContext, ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { getAppearanceForOCSElement, getFonts } from './getStripeOCSStyles';\n\nconst StripeOCSPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const collapseStripeElement = useRef<() => void>();\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const [isOCSLoading, setIsOCSLoading] = useState(false);\n    const methodSelector = `${method.gateway}-${method.id}`;\n    const containerId = `${methodSelector}-component-field`;\n    const paymentContext = paymentForm;\n\n    useEffect(() => {\n        if (selectedItemId?.includes(`${method.gateway}-`)) {\n            return;\n        }\n\n        collapseStripeElement.current?.();\n    }, [selectedItemId, method.gateway]);\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            setIsOCSLoading(true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeocs: {\n                    containerId,\n                    layout: {\n                        type: 'accordion',\n                        defaultCollapsed: selectedItemId !== methodSelector,\n                        radios: true,\n                        linkInAccordion: true,\n                        spacedAccordionItems: false,\n                        visibleAccordionItemsCount: 0,\n                    },\n                    appearance: getAppearanceForOCSElement(containerId),\n                    fonts: getFonts(),\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                    paymentMethodSelect: onToggle,\n                    handleClosePaymentMethod: (collapseElement: () => void) => {\n                        collapseStripeElement.current = collapseElement;\n                    },\n                    togglePreloader: setIsOCSLoading,\n                },\n            });\n        },\n        [\n            containerId,\n            selectedItemId,\n            methodSelector,\n            checkoutService,\n            onUnhandledError,\n            renderSubmitButton,\n            onToggle,\n            setIsOCSLoading,\n        ],\n    );\n\n    const renderCustomOCSSectionStyles = () => (\n        <style>\n            {`\n                .custom-checklist-item#radio-${methodSelector} {\n                    border-bottom: none;\n                }\n                .custom-checklist-item#radio-${methodSelector}:last-of-type {\n                    margin-bottom: -1px;\n                }\n            `}\n        </style>\n    );\n\n    const renderCheckoutElementsForStripeOCSStyling = () => (\n        <div style={{ display: 'none' }}>\n            <div\n                className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n                id={`${containerId}--accordion-header`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    id={`${containerId}-radio-input`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div\n                className=\"form-checklist-header--selected\"\n                id={`${containerId}--accordion-header-selected`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    defaultChecked\n                    id={`${containerId}-radio-input-selected`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        </div>\n    );\n\n    const renderPreloader = () => (\n        <div data-test=\"stripe-accordion-skeleton\" style={{ padding: '10px 18px' }}>\n            <ChecklistSkeleton />\n        </div>\n    );\n\n    return (\n        <>\n            {isOCSLoading ? renderPreloader() : renderCustomOCSSectionStyles()}\n\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={false}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutElementsForStripeOCSStyling()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeOCSPaymentMethod,\n    [{ gateway: 'stripeocs', id: 'optimized_checkout' }],\n);\n"],"names":["createContext","onToggle","noop","paymentForm","checkoutState","checkoutService","method","onUnhandledError","rest","containerId","id","paymentContext","renderSubmitButton","useCallback","hidePaymentSubmitButton","disableSubmit","setFieldValue","setSubmit","setValidationSchema","instruments","data","getInstruments","getCheckout","isPaymentDataRequired","getPaymentProviderCustomer","statuses","isLoadingInstruments","checkout","customer","getCustomer","paymentProviderCustomer","isStripeLinkAuthenticated","stripeLinkAuthenticationState","isGuestCustomer","isGuest","isInstrumentFeatureAvailable","useMemo","Boolean","config","isVaultingEnabled","getStylesFromElement","properties","parentContainer","document","getElementById","Error","initializeStripePayment","options","formInput","formLabel","formError","initializePayment","stripeupe","style","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","onError","render","deinitializePayment","hideContentWhenSignedOut","isInstrumentCardCodeRequired","isInstrumentCardNumberRequired","isSignedIn","some","payments","providerId","loadInstruments","signOut","signOutCustomer","className","gateway","useHostedCreditCard","language","setFieldTouched","setSubmitted","submitForm","cardCode","requireCardCode","isCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","getHostedFieldId","name","compact","join","focusedFieldType","setFocusedFieldType","useState","getHostedStoredCardValidationFieldset","selectedInstrument","cardCodeId","undefined","cardNumberId","getHostedFormOptions","styleProps","styleContainerId","fields","cardCodeVerification","accessibilityLabel","translate","instrumentId","bigpayToken","cardNumberVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","type","HostedWidgetPaymentComponent","Component","state","isAddingNewCard","handleDeleteInstrument","this","props","selectedInstrumentId","length","setState","getDefaultInstrumentId","handleUseNewCard","gatewayId","methodId","handleSelectInstrument","componentDidMount","isInstrumentFeatureAvailableProp","getValidationSchema","initializeMethod","componentDidUpdate","prevProps","prevState","componentWillUnmount","deinitializeCustomer","hideWidget","isInitializing","isAccountInstrument","shouldHideInstrumentExpiryDate","shouldShow","find","instrument","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","isLoading","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","A","onSelectInstrument","onUseNewInstrument","onDeleteInstrument","shouldHideExpiryDate","validateInstrument","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","renderEditButtonIfAvailable","hideVerificationFields","shouldShowNumberField","isSignInRequired","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","display","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","onClick","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","defaultInstrument","htmlFor","cardNumberElementOptions","TranslatedString","IconLock","cardExpiryElementOptions","cardCvcElementOptions","TooltipTrigger","placement","tooltip","CreditCardCodeTooltip","IconHelp","StripeElementType","toResolvableComponent","useIndividualCardFields","initializationData","paymentMethodType","additionalStripeV3Classes","Alipay","stripeOptions","classes","base","Card","CardCvc","CardExpiry","CardNumber","showIcon","Iban","supportedCountries","IdealBank","getConfig","storeUrl","links","siteLink","onUnhandledStripeV3Error","subtype","message","getIndividualCardElementOptions","stripeInitializeOptions","getStripeOptions","stripev3","form","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","optionsCustomForm","_shouldShowNumber","selector","pseudoElementSelector","element","querySelector","getAppliedStyles","parseRadioIconSize","size","parseInt","getFonts","elementsList","querySelectorAll","fonts","forEach","fontSrc","getAttribute","push","cssSrc","getAppearanceForOCSElement","defaultAccordionPaddingHorizontal","defaultAccordionPaddingVertical","formInputStyles","formLabelStyles","formErrorStyles","accordionHeaderStyles","accordionSelectedHeaderStyles","formChecklistStyles","accordionHeaderColor","accordionItemTitleFontSize","accordionHeaderFontFamily","accordionItemTitleFontWeight","accordionPaddingTop","accordionPaddingRight","accordionPaddingBottom","accordionHeaderPadding","isEmpty","radioOuter","radioOuterChecked","radioIconSize","sizes","radioIconOuterWidth","radioIconOuterStrokeWidth","radioIconInnerWidth","outerWidth","outerStrokeWidth","innerWidth","toFixed","stripeSVGSizeCoefficient","innerRadius","getRadioIconSizes","width","radioIconColor","radioIconFocusColor","variables","colorPrimary","colorBackground","colorText","colorDanger","colorTextSecondary","colorTextPlaceholder","colorIcon","fontFamily","rules","borderColor","boxShadow","borderRadius","borderWidth","borderBottom","fontSize","fontWeight","padding","backgroundColor","r","fill","strokeWidth","stroke","collapseStripeElement","useRef","selectedItemId","useContext","AccordionContext","isOCSLoading","setIsOCSLoading","methodSelector","useEffect","includes","current","stripeocs","layout","defaultCollapsed","radios","linkInAccordion","spacedAccordionItems","visibleAccordionItemsCount","appearance","paymentMethodSelect","handleClosePaymentMethod","collapseElement","togglePreloader","ChecklistSkeleton","defaultChecked"],"sourceRoot":""}