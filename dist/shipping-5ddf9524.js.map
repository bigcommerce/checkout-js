{"version":3,"sources":["webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./src/app/shipping/getShippingMethodId.ts","webpack://checkout/./src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./src/app/shipping/findConsignment.ts","webpack://checkout/./src/app/shipping/getShippableLineItems.ts","webpack://checkout/./src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./src/app/shipping/updateShippableItems.ts","webpack://checkout/./src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./src/app/shipping/ShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingHeader.tsx","webpack://checkout/./src/app/shipping/Shipping.tsx"],"names":["AccordionContext","onToggle","state","getContextValue","selectedItemId","handleToggleItem","id","props","isDisabled","onSelect","setState","render","this","children","className","defaultSelectedItemId","Provider","value","ChecklistContext","undefined","connectFormik","setFieldValue","name","handleSelect","contextValue","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","isSelected","transitionEndListener","node","done","addEventListener","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","type","Label","htmlFor","content","htmlId","label","rest","Checklist","renderInput","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","data","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","consignment","lineItemIds","getShippableLineItems","cart","lineItems","physicalItems","result","item","i","addedByPromotion","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","address","handleSelectAddress","alt","src","map","optionName","nameId","AddressSelect","selectedAddress","shippingAddress","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","inputName","isLoading","shippingOptions","selectedShippingOptionId","onSelectedOption","length","LoadingOverlay","selectDefaultShippingOptions","selectShippingOption","getConsignments","find","selectedShippingOption","availableShippingOptions","recommendedOption","getRecommendedShippingOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentWillUnmount","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","slice","sort","a","b","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","TranslatedString","StaticAddress","StaticConsignmentItemList","handleSubmit","mapPropsToValues","shippingOptionIds","forEach","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","Error","ShippingOptions","OrderComments","Button","variant","Primary","items","itemKey","assignItem","onUnhandledError","getFields","isValidAddress","countryCode","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItemIds","filter","includes","findNewItemId","updatedItems","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","createAccountUrl","href","onClick","preventDefault","TranslatedHtml","url","Form","hasUnassignedLineItems","withLanguage","values","onSubmit","orderComment","enableReinitialize","labelContent","CheckboxFormField","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","formFields","tabIndex","AddressFormField","parentFieldName","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleAutocompleteToggle","isOpen","inputValue","onAddressSelect","shouldShowSaveAddress","countries","countriesWithAutocomplete","googleMapsApiKey","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","AddressForm","onAutocompleteToggle","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","Tiny","testId","Secondary","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","initializeShipping","defaultOptions","amazon","container","onError","amazonpay","editAddressButtonId","SHIPPING_ADDRESS_FIELDS","SHIPPING_AUTOSAVE_DELAY","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","autoComplete","updatedShippingAddress","mapAddressFromFormValues","contextType","billingSameAsShipping","isInitialValid","language","getAddressValidationSchema","isValidSync","validationSchema","formValues","getAddressCustomFieldsValidationSchema","customerMessage","onMultiShippingSubmit","onSingleShippingSubmit","signOut","onMultiShippingChange","shouldShowMultiShipping","handleSingleShippingSubmit","addressValues","updateCheckout","updateShippingAddress","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","isInitializing","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","onToggleMultiShipping","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","links","shippableItemsCount","assignItemsToAddress","createAccountLink","deinitializeShipping","signOutCustomer","unassignItemsToAddress"],"mappings":"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","file":"shipping-5ddf9524.js","sourcesContent":["import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            disabled={ isDisabled }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        isDisabled,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string);\n    }, [\n        id,\n        onUseNewAddress,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h5 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h5>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => (\n                    <ShippingOptionListItem\n                        consignmentId={ consignmentId }\n                        key={ shippingOption.id }\n                        shippingOption={ shippingOption }\n                    />\n                )) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={ isLoading() }>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={ methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text' }\n                        />\n                    ) }\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            { consignments\n                .slice(0, isMultiShippingMode ? undefined : 1)\n                .sort((a, b) => (a.id > b.id ? -1 : 1))\n                .map(consignment => (\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\n\n                        <ShippingOptionsList\n                            consignmentId={ consignment.id }\n                            inputName={ getRadioInputName(consignment.id) }\n                            isLoading={ isLoading(consignment.id) }\n                            onSelectedOption={ selectShippingOption }\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\n                            shippingOptions={ consignment.availableShippingOptions }\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\n                            </LoadingOverlay> }\n                    </div>\n                )) }\n        </>;\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(({\n            selectedShippingOption,\n            availableShippingOptions: shippingOptions,\n        }) => !selectedShippingOption && shippingOptions);\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    { message }\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={ consignment.shippingAddress } />\n\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nfunction mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n        } = this.props;\n\n        return <>\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                />\n            </Fieldset>\n\n            { shouldShowOrderComments &&\n                <OrderComments /> }\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ shouldDisableSubmit }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    createAccountUrl: string;\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onUseNewAddress,\n            onSignIn,\n            createAccountUrl,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n        } = this.props;\n\n        const { items } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedHtml\n                        data={ { url: createAccountUrl } }\n                        id=\"shipping.multishipping_guest_create\"\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Form>\n                <ul className=\"consignmentList\">\n                    { items.map(item => (\n                        <li key={ item.key }>\n                            <ItemAddressSelect\n                                addresses={ addresses }\n                                item={ item }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ onUseNewAddress }\n                            />\n                        </li>\n                    )) }\n                </ul>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading }\n                    isMultiShippingMode={ true }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                />\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n    const updatedItems: ShippableItem[] = [];\n\n    items.forEach((item, i) => {\n        const id = newId && (i === updatedItemIndex || !cartItemIds.includes(item.id)) ?\n            newId : item.id;\n\n        updatedItems[i] = {\n            ...item,\n            id,\n            consignment: findConsignment(consignments || [], id  as string),\n        };\n    });\n\n    return updatedItems;\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps>  = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"billing.use_shipping_address_label\" />\n    ), []);\n\n    return <CheckboxFormField\n        id=\"sameAsBilling\"\n        labelContent={ labelContent }\n        name=\"billingSameAsShipping\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(BillingSameAsShippingField);\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AddressFormField } from '../address/';\nimport { Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            formFields,\n            methodId,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n                <Fieldset>\n                {\n                    formFields.filter(({ custom }) => custom).map(field => (\n                        <AddressFormField\n                            field={ field }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleFieldValueChange(field.name) }\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))\n                }\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={ isLoading }>\n                            <AddressSelect\n                                addresses={ addresses }\n                                onSelectAddress={ onAddressSelect }\n                                onUseNewAddress={ onUseNewAddress }\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset> }\n\n                { !hasValidCustomerAddress &&\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\n                        <AddressForm\n                            countries={ countries }\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\n                            countryCode={ formAddress && formAddress.countryCode }\n                            fieldName={ addressFieldName }\n                            formFields={ formFields }\n                            googleMapsApiKey={ googleMapsApiKey }\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\n                            onChange={ this.handleChange }\n                            setFieldValue={ this.setFieldValue }\n                            shouldShowSaveAddress={ shouldShowSaveAddress }\n                        />\n                    </LoadingOverlay> }\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AddressFormField, StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            address,\n            buttonId,\n            formFields,\n            isLoading,\n        } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={ isLoading }>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress\n                            address={ address }\n                        />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={ buttonId }\n                            onClick={ preventDefault() }\n                            size={ ButtonSize.Tiny }\n                            testId=\"step-edit-button\"\n                            variant={ ButtonVariant.Secondary }\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\n                    {\n                        customFormFields.map(field => (\n                            <AddressFormField\n                                field={ field }\n                                key={ `${field.id}-${field.name}` }\n                                onChange={ this.handleFieldValueChange(field.name) }\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))\n                    }\n                </Fieldset> }\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default StaticAddressEditable;\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={ containerId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={ shippingAddress }\n                    buttonId={ editAddressButtonId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    isLoading={ isShippingStepPending }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ handleFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n            shouldShowSaveAddress={ shouldShowSaveAddress }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressCustomFieldsValidationSchema, getAddressValidationSchema, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1000;\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n            hasRequestedShippingOptions,\n        } = this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(method => method === methodId);\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={ addresses }\n                        consignments={ consignments }\n                        countries={ countries }\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\n                        deinitialize={ deinitialize }\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\n                        googleMapsApiKey={ googleMapsApiKey }\n                        hasRequestedShippingOptions={ hasRequestedShippingOptions }\n                        initialize={ initialize }\n                        isLoading={ isResettingAddress }\n                        isShippingStepPending={ isShippingStepPending }\n                        methodId={ methodId }\n                        onAddressSelect={ this.handleAddressSelect }\n                        onFieldChange={ this.handleFieldChange }\n                        onUnhandledError={ onUnhandledError }\n                        onUseNewAddress={ this.onUseNewAddress }\n                        shippingAddress={ shippingAddress }\n                        shouldShowSaveAddress={ shouldShowSaveAddress }\n                    />\n                    {\n                        shouldShowBillingSameAsShipping && <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    }\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress,  customerMessage }) => ({\n        billingSameAsShipping: true,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressCustomFieldsValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }) :\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    createAccountUrl: string;\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            createAccountUrl,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                createAccountUrl={ createAccountUrl }\n                customerMessage={ customerMessage }\n                getFields={ getFields }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n            /> :\n            <SingleShippingForm\n                addresses={ addresses }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(billingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    createAccountUrl: string;\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={ isGuest }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    onMultiShippingChange={ onToggleMultiShipping }\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\n                />\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        { ...shippingFormProps }\n                        addresses={ customer.addresses }\n                        deinitialize={ deinitializeShippingMethod }\n                        initialize={ initializeShippingMethod }\n                        isGuest={ isGuest }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\n                        onUseNewAddress={ this.handleUseNewAddress }\n                        shouldShowSaveAddress={ !isGuest }\n                        updateAddress={ updateShippingAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n        links,\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        createAccountUrl: links.createAccountLink,\n        customer,\n        customerMessage: checkout.customerMessage,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress: getShippingAddress(),\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"sourceRoot":""}