{"version":3,"file":"3095-52fb7bd0.js","mappings":"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","sources":["webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceVenmo/PayPalCommerceVenmoPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCredit/PayPalCommerceCreditPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCreditCards/PayPalCommerceCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/hooks/usePaypalCommerceInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/PayPalCommercePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/components/PayPalCommercePaymentMethodComponent.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/hooks/usePayPalCommerceFastlaneInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneCreditCardForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/PayPalCommerceFastlanePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/index.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/is-error-with-translation-key.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/validation-schema/getPaypalCommerceRatePayValidationSchema.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/PaypalCommerceRatePayPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceAPMs/PayPalCommerceAPMsPaymentMethod.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent providerOptionsKey=\"paypalcommercevenmo\" {...props} />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceVenmoPaymentMethod,\n    [{ id: 'paypalcommercevenmo' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceCreditPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsKey=\"paypalcommercecredit\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditPaymentMethod,\n    [{ id: 'paypalcommercecredit' }],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst PayPalCommerceCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializePayPalCommerceCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    paypalcommercecreditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching PayPal Commerce Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditCardPaymentMethod,\n    [{ id: 'paypalcommercecreditcards' }],\n);\n","import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst usePaypalCommerceInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default usePaypalCommerceInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nimport usePaypalCommerceInstrument from './hooks/usePaypalCommerceInstruments';\n\nconst PayPalCommercePaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = usePaypalCommerceInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <PayPalCommercePaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"paypalcommerce\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </PayPalCommercePaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommercePaymentMethod,\n    [{ id: 'paypalcommerce' }],\n);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    PayPalCommerceAlternativeMethodsPaymentOptions,\n    PayPalCommerceCreditPaymentInitializeOptions,\n    PayPalCommercePaymentInitializeOptions,\n    PayPalCommerceVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype PayPalCommerceProvidersPaymentInitializeOptions =\n    PayPalCommerceAlternativeMethodsPaymentOptions &\n        PayPalCommerceCreditPaymentInitializeOptions &\n        PayPalCommercePaymentInitializeOptions &\n        PayPalCommerceVenmoPaymentInitializeOptions;\n\ninterface PayPalCommercePaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<PayPalCommerceProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst PayPalCommercePaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & PayPalCommercePaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default PayPalCommercePaymentMethodComponent;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const usePayPalCommerceFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneCreditCardForm.scss';\n\ninterface PayPalCommerceFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst PayPalCommerceFastlaneCreditCardForm: FunctionComponent<\n    PayPalCommerceFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#paypal-commerce-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-cc-form-container\"\n            data-test=\"paypal-commerce-fastlane-cc-form-container\"\n            id=\"paypal-commerce-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default PayPalCommerceFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface PayPalCommerceFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst PayPalCommerceFastlaneInstrumentsForm: FunctionComponent<\n    PayPalCommerceFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-instrument\"\n            data-test=\"paypal-commerce-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"paypal-commerce-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"paypal-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"paypal-commerce-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"paypal-commerce-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"paypal-commerce-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { usePayPalCommerceFastlaneInstruments } from '../hooks/usePayPalCommerceFastlaneInstruments';\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport PayPalCommerceFastlaneCreditCardForm from './PayPalCommerceFastlaneCreditCardForm';\nimport PayPalCommerceFastlaneInstrumentsForm from './PayPalCommerceFastlaneInstrumentsForm';\n\ninterface PayPalCommerceFastlaneFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst PayPalCommerceFastlaneForm: FunctionComponent<PayPalCommerceFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        usePayPalCommerceFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommerceFastlaneForm from './components/PayPalCommerceFastlaneForm';\n\nimport './PayPalCommerceFastlanePaymentMethod.scss';\nimport isErrorWithTranslationKey from './is-error-with-translation-key';\n\nexport interface PayPalFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst PayPalCommerceFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<PayPalFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                paypalcommercefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <PayPalCommerceFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceFastlanePaymentMethod,\n    [{ id: 'paypalcommerceacceleratedcheckout' }],\n);\n","import PayPalCommerceFastlanePaymentMethod from './PayPalCommerceFastlanePaymentMethod';\n\nexport default PayPalCommerceFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getPaypalCommerceRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    CountryData,\n    CustomError,\n    getCountryData,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    SpecificError,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getPaypalCommerceRatePayValidationSchema from './validation-schema/getPaypalCommerceRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst PaypalCommerceRatePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    const getCountryInfo = (): CountryData | undefined => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        if (billing && !billing.country) {\n            return getCountryData(billing.country)[0];\n        }\n    };\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                paypalcommerceratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => {\n                        // TODO: update PPCP Ratepay initialization data with getFieldsValues optional return data in checkout-sdk\n                        const defaultFieldValues = {\n                            ratepayBirthDate: {\n                                getDate: () => 0,\n                                getMonth: () => 0,\n                                getFullYear: () => 0,\n                            },\n                            ratepayPhoneCountryCode: '',\n                            ratepayPhoneNumber: '',\n                        };\n\n                        return {\n                            ...defaultFieldValues,\n                            ...fieldsValues.current,\n                        };\n                    },\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }): void => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    const validationSchema = useMemo(\n        () =>\n            getPaypalCommerceRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    useEffect(() => {\n        const countryInfo = getCountryInfo();\n\n        if (countryInfo) {\n            setFieldValue('ratepayPhoneCountryCode', countryInfo.dialCode);\n        }\n    }, []);\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const formContextProps = {\n        isSubmitted: isSubmitted(),\n        setSubmitted,\n    };\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={formContextProps}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalCommerceRatePayPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods', id: 'ratepay' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const { id } = method;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"paypalcommercealternativemethods\"\n            {...props}\n        >\n            <div className={`widget widget--${id} payment-widget`} id={widgetContainerId} />\n        </PayPalCommercePaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceAPMsPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods' }],\n);\n"],"names":["props","checkoutState","isPaymentDataRequired","data","providerOptionsKey","id","checkoutService","paymentForm","language","method","cardCode","showCardHolderName","isHostedFormEnabled","requireCustomerCode","config","focusedFieldType","setFocusedFieldType","useState","setFieldTouched","setFieldValue","setSubmitted","submitForm","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","isCardCodeRequired","isCardHolderNameRequired","getHostedFieldId","useCallback","name","compact","gateway","join","getHostedFormOptions","selectedInstrument","styleProps","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","shouldRenderHostedFields","styleContainerId","fields","cardCodeVerification","accessibilityLabel","translate","containerId","instrumentId","bigpayToken","undefined","cardNumberVerification","cardExpiryVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","type","getHostedStoredCardValidationFieldset","cardCodeId","cardExpiryId","cardNumberId","initializePayment","initializePayPalCommerceCreditCardPayment","options","paypalcommercecreditcards","form","cardFieldset","additionalFields","cardNameId","cardValidationSchema","deinitializePayment","getStoredCardValidationFieldset","storedCardValidationSchema","isCardExpiryRequired","currentInstrument","setCurrentInstrument","customer","getCustomer","instruments","getInstruments","accountInstruments","useMemo","filter","isAccountInstrument","trustedAccountInstruments","instrument","trustedShippingAddress","hasAccountInstruments","length","isInstrumentFeatureAvailable","isGuest","Boolean","isVaultingEnabled","initializationData","isComplete","shouldShowInstrumentFieldset","shouldCreateNewInstrument","shouldConfirmInstrument","useEffect","defaultInstrument","getDefaultInstrument","handleSelectInstrument","find","handleUseNewInstrument","toResolvableComponent","statuses","isLoadingInstruments","isLoadingPaymentMethod","onUnhandledError","loadInstruments","isLoading","allInstruments","LoadingOverlay","hideContentWhenLoading","PayPalCommercePaymentMethodComponent","AccountInstrumentFieldset","A","onSelectInstrument","onUseNewInstrument","TranslatedHtml","StoreInstrumentFieldset","providerOptionsData","children","buttonActionsRef","useRef","fieldsValuesRef","renderButtonRef","hasPayPalButton","termsValue","getFieldValue","shouldSaveInstrument","validateForm","validationErrors","Object","keys","validateButton","current","disable","enable","togglePaypalButton","hidePaymentSubmitButton","setTimeout","gatewayId","methodId","container","shouldRenderPayPalButtonOnInitialization","onRenderButton","onInit","onError","disableSubmit","message","resolve","reject","keysValidation","forEach","key","onInitButton","actions","getFieldsValues","renderPayPalCardComponent","className","onChange","toLowerCase","mapFromInstrumentCardType","brand","CreditCardIcon","last4","PoweredByPayPalFastlaneLabel","Button","onClick","result","size","Tiny","testId","variant","Secondary","TranslatedString","showPayPalCardSelector","setSelectedInstrument","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","usePayPalCommerceFastlaneInstruments","shouldShowInstrumentsForm","paypalCardComponentRef","isInitializingPayment","paypalcommercefastlane","finalError","isErrorWithTranslationKey","translationKey","formContextProps","isSubmitted","FormContext","Provider","value","CheckoutContext","LocaleProvider","PaymentFormContext","formFieldData","requiredFieldErrorTranslationIds","ratepayPhoneCountryCode","ratepayPhoneNumber","ratepayBirthDate","reduce","schema","required","nullable","fieldName","matches","ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE","custom","label","DynamicFormFieldType","DATE","inputDateFormat","TEXT","setValidationSchema","fieldsValues","paypalcommerceratepay","legalTextContainer","loadingContainerId","getDate","getMonth","getFullYear","ratepaySpecificError","e","provider_error","translationCode","ratepayError","ratepaySpecificErrorCode","code","CustomError","shouldBeTranslatedAsHtml","handleChange","fieldId","field","validationSchema","getPaypalCommerceRatePayValidationSchema","countryInfo","billing","getBillingAddress","country","getCountryInfo","dialCode","style","marginBottom","map","DynamicFormField","extraClass","widgetContainerId","extraOptions","apmFieldsContainer","apmFieldsStyles","variables","fontFamily","colorBackground","textColor","fontSizeBase","spacingUnit","borderColor","borderRadius","borderWidth","rules","backgroundColor","color","fontSize"],"sourceRoot":""}