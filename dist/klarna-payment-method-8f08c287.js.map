{"version":3,"file":"klarna-payment-method-8f08c287.js","mappings":"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","sources":["webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarna-supported-countries.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarna/klarna-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarna/klarna-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarna/create-klarna-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarnav2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarnav2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarnav2-token-updater.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/create-klarnav2-payment-strategy.ts","webpack://checkout/./packages/klarna-integration/src/klarna/KlarnaPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarnav2/KlarnaV2PaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx"],"sourcesContent":["export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","// The require scope\nvar __webpack_require__ = {};\n\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","export const supportedCountries = [\n    'AT',\n    'BE',\n    'CA',\n    'CH',\n    'CZ',\n    'DE',\n    'DK',\n    'ES',\n    'FI',\n    'FR',\n    'GB',\n    'GR',\n    'IE',\n    'IT',\n    'NL',\n    'NO',\n    'NZ',\n    'PL',\n    'PT',\n    'SE',\n];\nexport const supportedCountriesRequiringStates = ['AU'];\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { includes } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    supportedCountries,\n    supportedCountriesRequiringStates,\n} from '../klarnav2/klarna-supported-countries';\n\nimport KlarnaCredit, {\n    KlarnaAddress,\n    KlarnaAuthorizationResponse,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-credit';\nimport { WithKlarnaPaymentInitializeOptions } from './klarna-payment-initialize-options';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy {\n    private klarnaCredit?: KlarnaCredit;\n    private unsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private klarnaScriptLoader: KlarnaScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithKlarnaPaymentInitializeOptions,\n    ): Promise<void> {\n        this.klarnaCredit = await this.klarnaScriptLoader.load();\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        this.unsubscribe = this.paymentIntegrationService.subscribe(\n            (state) => {\n                if (\n                    state.isPaymentMethodInitialized({\n                        methodId: options.methodId,\n                        gatewayId: options.gatewayId,\n                    })\n                ) {\n                    void this.loadWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        await this.loadWidget(options);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { paymentData, ...paymentPayload },\n        } = payload;\n\n        const { authorization_token: authorizationToken } = await this.authorize();\n\n        await this.paymentIntegrationService.initializePayment(paymentPayload.methodId, {\n            authorizationToken,\n        });\n\n        await this.paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: paymentPayload,\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async loadWidget(\n        options: PaymentInitializeOptions & WithKlarnaPaymentInitializeOptions,\n    ): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarna\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            klarna: { container, onLoad },\n        } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        return new Promise<KlarnaLoadResponse>((resolve) => {\n            const paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethod(methodId);\n\n            if (!paymentMethod) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (!this.klarnaCredit || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this.klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n            this.klarnaCredit.load({ container }, (response) => {\n                if (onLoad) {\n                    onLoad(response);\n                }\n\n                resolve(response);\n            });\n        });\n    }\n\n    private getUpdateSessionData(\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this.mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this.mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this.needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private authorize(): Promise<KlarnaAuthorizationResponse> {\n        return new Promise((resolve, reject) => {\n            const state = this.paymentIntegrationService.getState();\n            const billingAddress = state.getBillingAddress();\n            const shippingAddress = state.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this.klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this.getUpdateSessionData(billingAddress, shippingAddress);\n\n            this.klarnaCredit.authorize(updateSessionData, (res) => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(private scriptLoader: ScriptLoader, private klarnaWindow: KlarnaWindow = window) {}\n\n    async load(): Promise<KlarnaCredit> {\n        if (!this.klarnaWindow.Klarna?.Credit) {\n            await this.scriptLoader.loadScript(SDK_URL);\n        }\n\n        if (!this.klarnaWindow.Klarna?.Credit) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.klarnaWindow.Klarna.Credit;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaPaymentStrategy from './klarna-payment-strategy';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nconst createKlarnaPaymentStrategy: PaymentStrategyFactory<KlarnaPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new KlarnaPaymentStrategy(\n        paymentIntegrationService,\n        new KlarnaScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createKlarnaPaymentStrategy, [{ id: 'klarna' }]);\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { includes } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport KlarnaPayments, {\n    KlarnaAddress,\n    KlarnaAuthorizationResponse,\n    KlarnaInitializationData,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-payments';\nimport {\n    supportedCountries,\n    supportedCountriesRequiringStates,\n} from './klarna-supported-countries';\nimport { WithKlarnaV2PaymentInitializeOptions } from './klarnav2-payment-initialize-options';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\nimport KlarnaV2TokenUpdater from './klarnav2-token-updater';\n\nexport default class KlarnaV2PaymentStrategy {\n    private klarnaPayments?: KlarnaPayments;\n    private unsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private klarnav2ScriptLoader: KlarnaV2ScriptLoader,\n        private klarnav2TokenUpdater: KlarnaV2TokenUpdater,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithKlarnaV2PaymentInitializeOptions,\n    ): Promise<void> {\n        this.klarnaPayments = await this.klarnav2ScriptLoader.load();\n\n        this.unsubscribe = this.paymentIntegrationService.subscribe(\n            (state) => {\n                if (\n                    state.isPaymentMethodInitialized({\n                        methodId: options.methodId,\n                        gatewayId: options.gatewayId,\n                    })\n                ) {\n                    void this.loadPaymentsWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        await this.loadPaymentsWidget(options);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { ...paymentPayload },\n        } = payload;\n        const { gatewayId, methodId } = paymentPayload;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { id: cartId } = state.getCartOrThrow();\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n\n        await this.klarnav2TokenUpdater.klarnaOrderInitialization(cartId, clientToken);\n\n        const paymentMethodСategory = this.isKlarnaSingleRadioButtonEnabled()\n            ? gatewayId\n            : methodId;\n        const { authorization_token: authorizationToken } = await this.authorizeOrThrow(\n            paymentMethodСategory,\n            methodId,\n        );\n\n        await this.paymentIntegrationService.initializePayment(gatewayId, {\n            authorizationToken,\n        });\n\n        await this.paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: paymentPayload,\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async loadPaymentsWidget(\n        options: PaymentInitializeOptions & WithKlarnaV2PaymentInitializeOptions,\n    ): Promise<KlarnaLoadResponse> {\n        if (!options.klarnav2) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarnav2\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            gatewayId,\n            klarnav2: { container, onLoad },\n        } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const params = { params: cartId };\n\n        await this.klarnav2TokenUpdater.updateClientToken(gatewayId, { params }).catch(() => {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        });\n\n        return new Promise<KlarnaLoadResponse>((resolve) => {\n            const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n            if (!this.klarnaPayments || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this.klarnaPayments.init({ client_token: paymentMethod.clientToken });\n            this.klarnaPayments.load(\n                {\n                    container,\n                    payment_method_category: this.isKlarnaSingleRadioButtonEnabled()\n                        ? paymentMethod.gateway\n                        : methodId,\n                },\n                (response) => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    resolve(response);\n                },\n            );\n        });\n    }\n\n    private getUpdateSessionData(\n        methodId: string,\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this.mapToKlarnaAddress(\n                methodId,\n                billingAddress,\n                billingAddress.email,\n            ),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this.mapToKlarnaAddress(\n                methodId,\n                shippingAddress,\n                billingAddress.email,\n            );\n        }\n\n        return data;\n    }\n\n    private needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private mapToKlarnaAddress(methodId: string, address: Address, email?: string): KlarnaAddress {\n        const state = this.paymentIntegrationService.getState();\n        const { checkoutSettings } = state.getStoreConfigOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow<KlarnaInitializationData>(methodId);\n        const { enableBillie } = paymentMethod.initializationData || {};\n\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this.needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        if (\n            address.company &&\n            enableBillie &&\n            isExperimentEnabled(checkoutSettings.features, 'PI-3915.b2b_payment_session_for_klarna')\n        ) {\n            klarnaAddress.organization_name = address.company;\n        }\n\n        return klarnaAddress;\n    }\n\n    private async authorizeOrThrow(\n        paymentMethodСategory: string,\n        methodId: string,\n    ): Promise<KlarnaAuthorizationResponse> {\n        await this.paymentIntegrationService.loadCheckout();\n\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n\n        const updateSessionData = this.getUpdateSessionData(\n            methodId,\n            billingAddress,\n            shippingAddress,\n        );\n\n        return new Promise<KlarnaAuthorizationResponse>((resolve, reject) => {\n            if (!this.klarnaPayments) {\n                return reject(\n                    new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                );\n            }\n\n            this.klarnaPayments.authorize(\n                {\n                    payment_method_category: paymentMethodСategory,\n                },\n                updateSessionData,\n                (res) => {\n                    if (res.approved) {\n                        return resolve(res);\n                    }\n\n                    if (res.show_form) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n            );\n        });\n    }\n\n    private isKlarnaSingleRadioButtonEnabled(): boolean {\n        const { features } = this.paymentIntegrationService\n            .getState()\n            .getStoreConfigOrThrow().checkoutSettings;\n\n        return features['PI-4025.klarna_single_radio_button'];\n    }\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaPayments from './klarna-payments';\nimport KlarnaV2Window from './klarnav2-window';\n\nconst SDK_URL = 'https://x.klarnacdn.net/kp/lib/v1/api.js';\n\nexport default class KlarnaV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private klarnaWindow: KlarnaV2Window = window,\n    ) {}\n\n    async load(): Promise<KlarnaPayments> {\n        if (!this.klarnaWindow.Klarna?.Payments) {\n            await this.scriptLoader.loadScript(SDK_URL);\n        }\n\n        if (!this.klarnaWindow.Klarna?.Payments) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.klarnaWindow.Klarna.Payments;\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    PaymentMethod,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class KlarnaV2TokenUpdater {\n    constructor(private requestSender: RequestSender) {}\n\n    updateClientToken(\n        gatewayId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${gatewayId}`;\n\n        return this.requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    async klarnaOrderInitialization(\n        cartId: string,\n        clientToken: string | undefined,\n    ): Promise<void> {\n        const url = `/api/storefront/initialization/klarna`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                cartId,\n                clientToken,\n            },\n        };\n\n        await this.requestSender.put(url, options);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaV2PaymentStrategy from './klarnav2-payment-strategy';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\nimport KlarnaV2TokenUpdater from './klarnav2-token-updater';\n\nconst createKlarnaV2PaymentStrategy: PaymentStrategyFactory<KlarnaV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n\n    return new KlarnaV2PaymentStrategy(\n        paymentIntegrationService,\n        new KlarnaV2ScriptLoader(getScriptLoader()),\n        new KlarnaV2TokenUpdater(requestSender),\n    );\n};\n\nexport default toResolvableModule(createKlarnaV2PaymentStrategy, [{ gateway: 'klarna' }]);\n","import { createKlarnaPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/klarna';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                integrations: [createKlarnaPaymentStrategy],\n                klarna: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaPaymentMethod,\n    [{ id: 'klarna' }],\n);\n","import { createKlarnaV2PaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/klarna';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaV2Payment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                integrations: [createKlarnaV2PaymentStrategy],\n                klarnav2: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaV2PaymentMethod,\n    [{ gateway: 'klarna' }],\n);\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => updateFieldValue(selectedInstrumentId));\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n"],"names":["mapFromInstrumentCardType","type","data","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","isInstrumentCardNumberRequired","PROVIDERS_WITHOUT_CARD_CODE","method","config","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","isInstrumentCardCodeRequired","MissingDataErrorType","NotInitializedErrorType","__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","OrderFinalizationNotRequiredError","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","subtype","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","PaymentMethodCancelledError","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","PaymentMethodInvalidError","supportedCountries","supportedCountriesRequiringStates","KlarnaPaymentStrategy","paymentIntegrationService","klarnaScriptLoader","initialize","options","klarnaCredit","load","unsubscribe","subscribe","state","isPaymentMethodInitialized","methodId","gatewayId","loadWidget","checkout","getCheckout","outstandingBalance","coupons","deinitialize","Promise","resolve","execute","payload","payment","paymentData","paymentPayload","authorization_token","authorizationToken","authorize","initializePayment","submitOrder","useStoreCredit","finalize","reject","klarna","container","onLoad","loadPaymentMethod","getState","getPaymentMethod","clientToken","init","client_token","getUpdateSessionData","billingAddress","shippingAddress","countryCode","billing_address","mapToKlarnaAddress","email","shipping_address","needsStateCode","address","klarnaAddress","street_address","address1","city","country","given_name","firstName","family_name","lastName","postal_code","postalCode","region","stateOrProvinceCode","stateOrProvince","address2","street_address2","phone","getBillingAddress","getShippingAddress","updateSessionData","res","approved","show_form","PaymentMethodClientUnavailableError","KlarnaScriptLoader","scriptLoader","klarnaWindow","window","Klarna","Credit","loadScript","t","getScriptLoader","id","ContentType","KlarnaV2PaymentStrategy","klarnav2ScriptLoader","klarnav2TokenUpdater","klarnaPayments","loadPaymentsWidget","cartId","getCartOrThrow","getPaymentMethodOrThrow","klarnaOrderInitialization","isKlarnaSingleRadioButtonEnabled","authorizeOrThrow","klarnav2","params","updateClientToken","catch","payment_method_category","gateway","checkoutSettings","getStoreConfigOrThrow","enableBillie","company","features","experimentName","fallbackValue","organization_name","loadCheckout","getBillingAddressOrThrow","KlarnaV2ScriptLoader","Payments","Json","JsonV1","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","KlarnaV2TokenUpdater","requestSender","timeout","url","Accept","put","getHost","createRequestSender","host","toResolvableComponent","checkoutService","checkoutState","paymentForm","rest","initializeKlarnaPayment","useCallback","integrations","hidePaymentSubmitButton","disableSubmit","setFieldValue","setSubmit","setValidationSchema","instruments","getInstruments","isPaymentDataRequired","statuses","isLoadingInstruments","customer","getCustomer","isInstrumentFeatureAvailable","isGuest","Boolean","isVaultingEnabled","HostedWidgetPaymentComponent","containerId","deinitializePayment","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","isSignedIn","some","payments","providerId","loadInstruments","signOut","signOutCustomer","initializeKlarnaV2Payment","InstrumentMenuItem","className","testId","shouldHideExpiryDate","onClick","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","cardTitle","niceType","endingIn","last4","expiryDate","InstrumentOption","noop","handleClick","bigpayToken","InstrumentUseNewButton","InstrumentMenu","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","map","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","instrumentId","useEffect","setTimeout","value","undefined","current","selectedInstrument","find","DropdownTrigger","dropdown","memo","onDeleteInstrument","validateInstrument","renderInput","renderModal","props","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","render","style","display","EditButton","buttonId","shouldShowEditButton","translatedString","preventDefault","PaymentDescriptor","shouldShowDescriptor","paymentDescriptor","PaymentWidget","additionalContainerClassName","hideContentWhenSignedOut","hideWidget","isSignInRequired","renderCustomPaymentForm","shouldRenderCustomInstrument","shouldShowCreditCardFieldset","tabIndex","isInitializing","isAccountInstrument","isInstrumentFeatureAvailableProp","shouldHideInstrumentExpiryDate","shouldShow","hideVerificationFields","storedCardValidationSchema","onUnhandledError","deinitializeCustomer","initializeCustomer","signInCustomer","isAddingNewCard","setIsAddingNewCard","useState","setSelectedInstrumentId","instrumentsRef","getDefaultInstrumentId","defaultInstrument","getSelectedInstrument","currentSelectedId","getValidationSchema","currentSelectedInstrument","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","nextId","handleUseNewCard","handleSelectInstrument","getValidateInstrument","shouldShowNumberField","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","filter","accountInstruments","shouldShowInstrumentFieldset","isLoading","selectedAccountInstrument","shouldShowAccountInstrument","error","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","LoadingOverlay","hideContentWhenLoading","AccountInstrumentFieldset","A","CardInstrumentFieldset","StoreInstrumentFieldset"],"sourceRoot":""}