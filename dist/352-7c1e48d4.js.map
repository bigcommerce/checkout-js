{"version":3,"file":"352-7c1e48d4.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/icon/IconError.tsx","webpack://checkout/./packages/ui/src/icon/IconSuccess.tsx","webpack://checkout/./packages/ui/src/icon/IconInfo.tsx","webpack://checkout/./packages/ui/src/alert/Alert.tsx","webpack://checkout/./packages/ui/src/form/FormFieldContainer/FormFieldContainer.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/ui/src/icon/IconHelp.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/ui/src/form/TextInput/TextInput.tsx","webpack://checkout/./packages/ui/src/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/ui/src/icon/IconChevronDown.tsx","webpack://checkout/./packages/ui/src/form/TextArea/TextArea.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicInput.tsx","webpack://checkout/./packages/ui/src/form/BasicFormField/BasicFormField.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/ui/src/form/Input/Input.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/ui/src/form/FormFieldError/FormFieldError.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/ui/src/form/Label/Label.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormFieldType.ts","webpack://checkout/./packages/ui/src/form/FormField/FormField.tsx","webpack://checkout/./packages/ui/src/form/RadioInput/RadioInput.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/MultiCheckboxControl.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/CheckboxGroupFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormField.tsx","webpack://checkout/./packages/ui/src/form/CheckboxInput/CheckboxInput.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconError: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconError);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSuccess: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconSuccess);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconInfo: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconInfo);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { IconError, IconInfo, IconSuccess } from '../icon';\n\nexport interface AlertProps {\n    additionalClassName?: string;\n    icon?: ReactNode;\n    testId?: string;\n    type?: AlertType;\n}\n\nexport enum AlertType {\n    Error = 'error',\n    Info = 'info',\n    Success = 'success',\n    Warning = 'warning',\n}\n\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\n    switch (type) {\n        case AlertType.Error:\n        case AlertType.Warning:\n            return <IconError />;\n\n        case AlertType.Success:\n            return <IconSuccess />;\n\n        case AlertType.Info:\n        default:\n            return <IconInfo />;\n    }\n}\n\nconst Alert: FunctionComponent<AlertProps> = ({\n    additionalClassName,\n    children,\n    icon,\n    testId,\n    type,\n}) => (\n    <div\n        className={classNames(\n            'alertBox',\n            additionalClassName,\n            { 'alertBox--info': type === AlertType.Info || !type },\n            { 'alertBox--error': type === AlertType.Error },\n            { 'alertBox--success': type === AlertType.Success },\n            { 'alertBox--warning': type === AlertType.Warning },\n        )}\n        data-test={testId}\n    >\n        <div className=\"alertBox-column alertBox-icon\">{icon || renderDefaultIcon(type)}</div>\n\n        <div aria-live=\"assertive\" className=\"alertBox-column alertBox-message\" role=\"alert\">\n            {children}\n        </div>\n    </div>\n);\n\nexport default Alert;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldContainerProps {\n    additionalClassName?: string;\n    children: ReactNode;\n    className?: string;\n    hasError?: boolean;\n    testId?: string;\n}\n\nconst FormFieldContainer: FunctionComponent<FormFieldContainerProps> = ({\n    additionalClassName,\n    children,\n    className,\n    hasError,\n    testId,\n}) => (\n    <FormContext.Consumer>\n        {({ isSubmitted }) => (\n            <div\n                className={\n                    className ||\n                    classNames('form-field', additionalClassName, {\n                        'form-field--error': hasError && isSubmitted,\n                    })\n                }\n                data-test={testId}\n            >\n                {children}\n            </div>\n        )}\n    </FormContext.Consumer>\n);\n\nexport default memo(FormFieldContainer);\n","import React, { FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","import classNames from 'classnames';\nimport React, { FieldsetHTMLAttributes, forwardRef, ReactNode, Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef(\n    (\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\n        ref: Ref<HTMLFieldSetElement>,\n    ) => (\n        <fieldset\n            {...rest}\n            className={className || classNames('form-fieldset', additionalClassName)}\n            data-test={testId}\n            ref={ref}\n        >\n            {legend}\n\n            <div className=\"form-body\">{children}</div>\n        </fieldset>\n    ),\n);\n\nexport default Fieldset;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\n\nexport interface TextInputProps extends InputProps {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\n}\n\nconst TextInput = forwardRef(\n    (\n        { additionalClassName, appearFocused, type = 'text', ...rest }: TextInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <Input\n            {...rest}\n            className={classNames(\n                'form-input',\n                'optimizedCheckout-form-input',\n                { 'form-input--focus': appearFocused },\n                { 'optimizedCheckout-form-input--focus': appearFocused },\n                additionalClassName,\n            )}\n            ref={ref}\n            type={type}\n        />\n    ),\n);\n\nexport default TextInput;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from 'popper.js';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <span\n                            onBlur={this.handleHide}\n                            onFocus={this.handleShow}\n                            onMouseEnter={this.handleShow}\n                            onMouseLeave={this.handleHide}\n                            ref={ref}\n                        >\n                            {children}\n                        </span>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={{\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    }}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        shouldShow && (\n                            <div ref={ref} style={style}>\n                                {tooltip}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => (\n        <textarea\n            {...rest}\n            className={\n                className ||\n                classNames('form-input', 'optimizedCheckout-form-input', additionalClassName)\n            }\n            data-test={testId}\n            ref={ref}\n        />\n    ),\n);\n\nexport default TextArea;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { isDate, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate } from '@bigcommerce/checkout/locale';\n\nimport { IconChevronDown } from '../../icon';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { InputProps } from '../Input';\nimport { RadioInput } from '../RadioInput';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n    isFloatingLabelEnabled?: boolean;\n    inputDateFormat?: string;\n    date?: {\n        inputFormat: string;\n    };\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    isFloatingLabelEnabled,\n    date,\n    inputDateFormat,\n    ...rest\n}) => {\n    const inputFormat = inputDateFormat || date?.inputFormat || '';\n\n    const handleDateChange = useCallback(\n        (dateValue: string, event) =>\n            onChange({\n                ...event,\n                target: {\n                    name,\n                    value: dateValue,\n                },\n            }),\n        [onChange, name],\n    );\n\n    switch (fieldType) {\n        case DynamicFormFieldType.DROPDOWM:\n            return (\n                <>\n                    <div\n                        className={classNames(\n                            { 'dropdown-chevron': !isFloatingLabelEnabled },\n                            { 'floating-select-chevron': isFloatingLabelEnabled },\n                        )}\n                    >\n                        <IconChevronDown />\n                    </div>\n                    <select\n                        {...(rest as any)}\n                        className={classNames(\n                            { 'floating-select': isFloatingLabelEnabled },\n                            'form-select optimizedCheckout-form-select',\n                        )}\n                        data-test={`${id}-select`}\n                        id={id}\n                        name={name}\n                        onChange={onChange}\n                        value={value ?? ''}\n                    >\n                        {!!placeholder && <option value=\"\">{placeholder}</option>}\n                        {options &&\n                            options.map(({ label, value: optionValue }) => (\n                                <option key={optionValue} value={optionValue}>\n                                    {label}\n                                </option>\n                            ))}\n                    </select>\n                </>\n            );\n\n        case DynamicFormFieldType.RADIO:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <RadioInput\n                            {...rest}\n                            checked={optionValue === value}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-radio`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.CHECKBOX:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <CheckboxInput\n                            {...rest}\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-checkbox`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.DATE:\n            return (\n                <ReactDatePicker\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    autoComplete=\"off\"\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                    // onChangeRaw={ rest.onChange }\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\n                    className=\"form-input optimizedCheckout-form-input\"\n                    dateFormat={inputFormat}\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\n                    name={name}\n                    onChange={handleDateChange}\n                    placeholderText={inputFormat.toUpperCase()}\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\n                    selected={isDate(value) ? value : undefined}\n                />\n            );\n\n        case DynamicFormFieldType.MULTILINE:\n            return (\n                <TextArea\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    testId={`${id}-text`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n\n        default:\n            return (\n                <TextInput\n                    {...rest}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    placeholder={placeholder}\n                    testId={`${id}-${\n                        fieldType === DynamicFormFieldType.PASSWORD ? 'password' : 'text'\n                    }`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import { Field, FieldConfig, FieldProps, getIn } from 'formik';\nimport { isDate, noop } from 'lodash';\nimport React, {\n    Component,\n    createElement,\n    FunctionComponent,\n    memo,\n    useCallback,\n    useMemo,\n} from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\n\nexport interface BasicFormFieldProps extends FieldConfig {\n    additionalClassName?: string;\n    className?: string;\n    testId?: string;\n    onChange?(value: unknown): void;\n}\n\ntype InnerFieldInputProps = FieldProps &\n    Pick<FieldConfig, 'component' | 'render'> & {\n        onChange?(value: string): void;\n    };\n\ntype InnerFieldProps = Omit<BasicFormFieldProps, keyof FieldConfig> & InnerFieldInputProps;\n\nclass InnerFieldInput extends Component<InnerFieldInputProps> {\n    componentDidUpdate({ field: prevField }: InnerFieldInputProps) {\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            field: { value },\n            onChange = noop,\n        } = this.props;\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparableValue = isDate(value) ? value.getTime() : value;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparablePrevValue = isDate(prevField.value)\n            ? prevField.value.getTime()\n            : prevField.value;\n\n        if (comparableValue !== comparablePrevValue) {\n            onChange(value);\n        }\n    }\n\n    render() {\n        const { component = 'input', field, render } = this.props;\n\n        if (render) {\n            return render(this.props);\n        }\n\n        if (typeof component === 'string') {\n            return createElement(component, field);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        return createElement(component as any, this.props);\n    }\n}\n\nconst InnerField: FunctionComponent<InnerFieldProps> = memo(\n    ({ additionalClassName, component, field, form, onChange, render, testId }) => {\n        const input = useMemo(\n            () => (\n                <InnerFieldInput\n                    component={component}\n                    field={field}\n                    form={form}\n                    meta={form.getFieldMeta(field.name)}\n                    onChange={onChange}\n                    render={render}\n                />\n            ),\n            [field, form, onChange, component, render],\n        );\n\n        return (\n            <FormFieldContainer\n                additionalClassName={additionalClassName}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                hasError={getIn(form.errors, field.name)}\n                testId={testId}\n            >\n                {input}\n            </FormFieldContainer>\n        );\n    },\n    (\n        { form: prevForm, field: prevField, ...prevProps },\n        { form: nextForm, field: nextField, ...nextProps },\n    ) =>\n        shallowEqual(prevProps, nextProps) &&\n        shallowEqual(prevForm, nextForm) &&\n        shallowEqual(prevField, nextField),\n);\n\nconst BasicFormField: FunctionComponent<BasicFormFieldProps> = ({\n    additionalClassName,\n    className,\n    component,\n    render,\n    testId,\n    onChange,\n    ...rest\n}) => {\n    const renderInnerField = useCallback(\n        (props: FieldProps) => (\n            <InnerField\n                {...props}\n                additionalClassName={additionalClassName}\n                className={className}\n                component={component}\n                onChange={onChange}\n                render={render}\n                testId={testId}\n            />\n        ),\n        [additionalClassName, className, component, render, testId, onChange],\n    );\n\n    return <Field {...rest}>{renderInnerField}</Field>;\n};\n\nexport default memo(BasicFormField);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    testId?: string;\n}\n\nconst Input = forwardRef(({ testId, ...rest }: InputProps, ref: Ref<HTMLInputElement>) => (\n    <input {...rest} data-test={testId} ref={ref} />\n));\n\nexport default Input;\n","import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import { ErrorMessage } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldErrorProps {\n    name: string;\n    testId?: string;\n    errorId: string;\n}\n\nconst FormFieldError: FunctionComponent<FormFieldErrorProps> = ({ name, testId, errorId }) => {\n    const renderMessage = useCallback(\n        (message: string) => (\n            <ul className=\"form-field-errors\" data-test={testId}>\n                <li className=\"form-field-error\">\n                    <label\n                        aria-live=\"polite\"\n                        className=\"form-inlineMessage\"\n                        htmlFor={name}\n                        id={errorId}\n                        role=\"alert\"\n                    >\n                        {message}\n                    </label>\n                </li>\n            </ul>\n        ),\n        [errorId, name, testId],\n    );\n\n    return (\n        <FormContext.Consumer>\n            {({ isSubmitted }) =>\n                isSubmitted && <ErrorMessage name={name} render={renderMessage} />\n            }\n        </FormContext.Consumer>\n    );\n};\n\nexport default memo(FormFieldError);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, LabelHTMLAttributes } from 'react';\n\nexport interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n    testId?: string;\n    hidden?: boolean;\n}\n\nconst Label: FunctionComponent<LabelProps> = ({ children, className, hidden, testId, ...rest }) => (\n    <label\n        {...rest}\n        className={classNames(\n            className || 'form-label',\n            { 'is-srOnly': hidden },\n            'optimizedCheckout-form-label',\n        )}\n        data-test={testId}\n    >\n        {children}\n    </label>\n);\n\nexport default Label;\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","enum DynamicFormFieldType {\n    TELEPHONE = 'tel',\n    DROPDOWM = 'dropdown',\n    NUMBER = 'number',\n    PASSWORD = 'password',\n    CHECKBOX = 'checkbox',\n    MULTILINE = 'multiline',\n    DATE = 'date',\n    RADIO = 'radio',\n    TEXT = 'text',\n}\n\nexport default DynamicFormFieldType;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { FormFieldError } from '../FormFieldError';\nimport { Label } from '../Label';\n\nexport interface FormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    label?: ReactNode | ((fieldName: string) => ReactNode);\n    labelContent?: ReactNode;\n    footer?: ReactNode;\n    id?: string;\n    input(field: FieldProps<string>): ReactNode;\n    onChange?(value: string): void;\n}\n\nconst FormField: FunctionComponent<FormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    label,\n    onChange,\n    footer,\n    input,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        (props: FieldProps<string>) => (\n            <>\n                {Boolean(label) && (typeof label === 'function' ? label(name) : label)}\n\n                {Boolean(labelContent && !label) && (\n                    <Label htmlFor={name} id={`${id ?? name}-label`}>\n                        {labelContent}\n                    </Label>\n                )}\n\n                {input(props)}\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n\n                {footer}\n            </>\n        ),\n        [label, labelContent, id, input, name, footer],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(FormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from '../Input/Input';\nimport Label from '../Label/Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef(\n    (\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                checked={checked}\n                className={classNames(\n                    'form-radio',\n                    'optimizedCheckout-form-radio',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"radio\"\n                value={value}\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default RadioInput;\n","/* istanbul ignore file */\n\nimport React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedAll();\n        },\n        [onSelectedAll],\n    );\n\n    const handleSelectNoneClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedNone();\n        },\n        [onSelectedNone],\n    );\n\n    return (\n        <ul className=\"multiCheckbox--controls\">\n            <li className=\"multiCheckbox--control\">\n                <TranslatedString id=\"address.select\" />\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-all-button`}\n                    href=\"#\"\n                    onClick={handleSelectAllClick}\n                >\n                    <TranslatedString id=\"address.select_all\" />\n                </a>\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-none-button`}\n                    href=\"#\"\n                    onClick={handleSelectNoneClick}\n                >\n                    <TranslatedString id=\"address.select_none\" />\n                </a>\n            </li>\n        </ul>\n    );\n};\n\nexport default memo(MultiCheckboxControl);\n","/* istanbul ignore file */\n\nimport { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\nimport { FormFieldError } from '../FormFieldError';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(\n            options.map(({ value }) => value),\n            checkedValues,\n        ).forEach((val) => push(val));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, options, push, values]);\n\n    const handleSelectNone = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, remove, values]);\n\n    const handleInputChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const checkedValues: string[] = getIn(values, name) || [];\n            const { value, checked } = event.target;\n\n            if (checked) {\n                push(value);\n            } else {\n                remove(checkedValues.indexOf(value));\n            }\n\n            onChange(getIn(values, name));\n        },\n        [name, onChange, push, remove, values],\n    );\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\n            {label}\n\n            {options.length > 1 && (\n                <MultiCheckboxControl\n                    onSelectedAll={handleSelectAll}\n                    onSelectedNone={handleSelectNone}\n                    testId={id}\n                />\n            )}\n\n            <DynamicInput\n                fieldType={DynamicFormFieldType.CHECKBOX}\n                id={id}\n                name={name}\n                onChange={handleInputChange}\n                options={options}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                value={getIn(values, name) || []}\n            />\n\n            <FormFieldError\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                errorId={`${id ?? name}-field-error-message`}\n                name={name}\n                testId={`${kebabCase(name)}-field-error-message`}\n            />\n        </FormFieldContainer>\n    );\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback(\n        (renderProps: FieldArrayRenderProps) => (\n            <MultiCheckboxFormField\n                id={id}\n                label={label}\n                name={name}\n                onChange={onChange}\n                options={options}\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\n            />\n        ),\n        [id, label, name, onChange, options],\n    );\n\n    return <FieldArray name={name} render={renderField} />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport { includes } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField } from '../FormField';\nimport { Label } from '../Label';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n        inputDateFormat,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(\n        () => (\n            <Label htmlFor={fieldInputId} id={`${fieldInputId}-label`}>\n                {label || fieldLabel}\n                {!required && (\n                    <>\n                        {' '}\n                        <small className=\"optimizedCheckout-contentSecondary\">\n                            <TranslatedString id=\"common.optional_text\" />\n                        </small>\n                    </>\n                )}\n            </Label>\n        ),\n        [fieldInputId, fieldLabel, required, label],\n    );\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.NUMBER;\n            }\n\n            if (includes(name, 'phone') || includes(name, 'tel')) {\n                return DynamicFormFieldType.TELEPHONE;\n            }\n\n            return secret ? DynamicFormFieldType.PASSWORD : DynamicFormFieldType.TEXT;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, name, secret]);\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\n                autoComplete={autocomplete}\n                fieldType={dynamicFormFieldType}\n                id={fieldInputId}\n                inputDateFormat={inputDateFormat}\n                max={max}\n                maxLength={maxLength || undefined}\n                min={min}\n                options={options && options.items}\n                placeholder={placeholder || (options && options.helperLabel)}\n                rows={options && options.rows}\n            />\n        ),\n        [\n            inputDateFormat,\n            fieldInputId,\n            autocomplete,\n            dynamicFormFieldType,\n            max,\n            maxLength,\n            min,\n            options,\n            placeholder,\n        ],\n    );\n\n    return (\n        <div className={`dynamic-form-field ${extraClass || ''}`}>\n            {fieldType === DynamicFormFieldType.CHECKBOX ? (\n                <CheckboxGroupFormField\n                    id={fieldInputId}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                    options={(options && options.items) || []}\n                />\n            ) : (\n                <FormField\n                    id={fieldInputId}\n                    input={renderInput}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\nimport { Label } from '../Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef(\n    (\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                className={classNames(\n                    'form-checkbox',\n                    'optimizedCheckout-form-checkbox',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"checkbox\"\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default CheckboxInput;\n"],"names":["withIconContainer","height","viewBox","width","xmlns","d","AlertType","additionalClassName","children","icon","testId","type","className","Info","Error","Success","Warning","renderDefaultIcon","role","memo","hasError","Consumer","isSubmitted","forwardRef","ref","legend","rest","appearFocused","state","shouldShow","handleShow","setState","handleHide","render","this","props","placement","tooltip","onBlur","onFocus","onMouseEnter","onMouseLeave","modifiers","hide","enabled","flip","preventOverflow","style","defaultProps","Component","withDate","fieldType","id","name","onChange","noop","options","placeholder","value","isFloatingLabelEnabled","date","inputDateFormat","inputFormat","handleDateChange","useCallback","dateValue","event","target","DynamicFormFieldType","DROPDOWM","map","label","optionValue","key","RADIO","length","RadioInput","checked","CHECKBOX","CheckboxInput","Array","isArray","includes","DATE","autoComplete","calendarClassName","dateFormat","maxDate","max","Date","undefined","minDate","min","placeholderText","toUpperCase","popperClassName","selected","isDate","MULTILINE","TextInput","PASSWORD","componentDidUpdate","prevField","getTime","component","field","createElement","InnerField","form","input","useMemo","InnerFieldInput","meta","getFieldMeta","errors","prevForm","prevProps","nextForm","nextField","nextProps","renderInnerField","defaultSelectedItemId","isDisabled","onSelect","useState","selectedItemId","setSelectedItemId","handleToggleItem","getContextValue","memoizeOne","newSelectedItemId","onToggle","AccordionContext","A","Provider","ChecklistContext","createContext","connectFormik","setFieldValue","handleSelect","contextValue","OriginalComponent","InnerComponent","prevFormik","nextFormik","DecoratedComponent","displayName","errorId","renderMessage","message","htmlFor","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","useContext","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","Label","content","htmlId","kebabCase","Checklist","C","renderInput","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","hidden","labelContent","footer","renderField","Boolean","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","TranslatedString","href","onClick","MultiCheckboxFormField","values","push","remove","handleSelectAll","checkedValues","difference","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","DynamicInput","FormFieldError","renderProps","pick","secret","fieldLabel","required","maxLength","parentFieldName","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","dynamicFormFieldType","NUMBER","TELEPHONE","TEXT","items","helperLabel","rows","FormField"],"sourceRoot":""}