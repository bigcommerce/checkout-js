{"version":3,"file":"100-38ae2d43.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/order/OrderSummaryHeader.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/services/LambdaService.ts","webpack://checkout/./packages/core/src/app/avalara-certificates/stateAbbreviations.ts","webpack://checkout/./packages/core/src/app/avalara-certificates/stateReasons.ts","webpack://checkout/./packages/core/src/app/avalara-certificates/CertificateForm.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/CreateCertificate.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummary.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst OrderSummaryHeader: FunctionComponent = ({ children }) => (\n    <header className=\"cart-header\">\n        <h3 className=\"cart-title optimizedCheckout-headingSecondary\">\n            <TranslatedString id=\"cart.cart_heading\" />\n        </h3>\n        {children}\n    </header>\n);\n\nexport default OrderSummaryHeader;\n","import axios from 'axios';\nimport { Address } from '@bigcommerce/checkout-sdk';\nconst API_URL = 'https://61oz9fx2d9.execute-api.us-east-2.amazonaws.com/Prod/';\n\nexport const fetchToken = async (): Promise<string | null> => {\n    try {\n        const response = await fetch('/customer/current.jwt?app_client_id=npqb1dowfj7yeh7d1fqwhcod7wqs6al', {\n            method: 'GET',\n            headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n        });\n\n        const data = await response.json();\n        return data.token;\n    } catch (error) {\n        console.error('Error fetching token:', error);\n        return null;\n    }\n};\nexport const getHeaders = (token: string) => {\n    return {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'X-Current-Customer': token,\n    };\n};\n\nexport const fetchCertificateDetails = async (certId: number) => {\n    try {\n        const token = await fetchToken();\n        if (!token) {\n            throw new Error('Token not available');\n        }\n\n        const headers = getHeaders(token);\n        const response = await axios.get(`${API_URL}query/${certId}`, { headers });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching certificate details:', error);\n        throw error;\n    }\n};\nexport const validateTaxesWithAvalara = async (taxRequest: any) => {\n    try {\n        const token = await fetchToken();\n        if (!token) {\n            throw new Error('Token not available');\n        }\n        const headers = getHeaders(token);\n        const response = await axios.post(`${API_URL}createTransaction`, taxRequest, { headers });\n        return response.data;\n    } catch (error) {\n        console.error('Error validating with avalara:', error);\n        throw error;\n    }\n};\nexport const createCertificate = async (formData: any) => {\n    try {\n        const token = await fetchToken();\n        if (!token) {\n            throw new Error('Token not available');\n        }\n        const headers = {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            'X-Current-Customer': token,\n        };\n        const response = await axios.post(`${API_URL}create`, formData, { headers });\n\n        if (response.status !== 200) {\n            throw new Error(`Error submitting the form: ${response.statusText}`);\n        }\n        return response.data;\n    } catch (error) {\n        console.error('Error creating certificate:', error);\n        throw error;\n    }\n};\n\nexport const getFormData = (\n    region: string,\n    exemptionReason: string,\n    effectiveDate: string,\n    entityUseCode: string,\n    exemptionDescription: string,\n    customer: {\n        id: number;\n        fullName: string;\n        email: string;\n        isGuest: boolean;\n    },\n    shippingAddress: Address\n) => {\n    const formData  = {\n        signedDate: effectiveDate,\n        expirationDate: '9999-12-31',\n        exposureZone: { name: region },\n        exemptionReason: { name: exemptionReason },\n        valid: true,\n        CertificateCustomFields: {\n            1: entityUseCode,\n            2: exemptionDescription,\n        },\n        customers: [\n            {\n                customerCode: customer.id,\n                name: customer.fullName,\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                postalCode: shippingAddress.postalCode,\n                phoneNumber: shippingAddress.phone,\n                emailAddress: customer.email,\n                country: shippingAddress.countryCode,\n                region: shippingAddress.stateOrProvinceCode ,\n            },\n        ],\n    };\n\n    return formData;\n};\n","const stateAbbreviations = {\n    \"Alabama\": \"AL\",\n    \"Alaska\": \"AK\",\n    \"Arizona\": \"AZ\",\n    \"Arkansas\": \"AR\",\n    \"California\": \"CA\",\n    \"Colorado\": \"CO\",\n    \"Connecticut\": \"CT\",\n    \"Delaware\": \"DE\",\n    \"Florida\": \"FL\",\n    \"Georgia\": \"GA\",\n    \"Hawaii\": \"HI\",\n    \"Idaho\": \"ID\",\n    \"Illinois\": \"IL\",\n    \"Indiana\": \"IN\",\n    \"Iowa\": \"IA\",\n    \"Kansas\": \"KS\",\n    \"Kentucky\": \"KY\",\n    \"Louisiana\": \"LA\",\n    \"Maine\": \"ME\",\n    \"Maryland\": \"MD\",\n    \"Massachusetts\": \"MA\",\n    \"Michigan\": \"MI\",\n    \"Minnesota\": \"MN\",\n    \"Mississippi\": \"MS\",\n    \"Missouri\": \"MO\",\n    \"Montana\": \"MT\",\n    \"Nebraska\": \"NE\",\n    \"Nevada\": \"NV\",\n    \"New Hampshire\": \"NH\",\n    \"New Jersey\": \"NJ\",\n    \"New Mexico\": \"NM\",\n    \"New York\": \"NY\",\n    \"North Carolina\": \"NC\",\n    \"North Dakota\": \"ND\",\n    \"Ohio\": \"OH\",\n    \"Oklahoma\": \"OK\",\n    \"Oregon\": \"OR\",\n    \"Pennsylvania\": \"PA\",\n    \"Rhode Island\": \"RI\",\n    \"South Carolina\": \"SC\",\n    \"South Dakota\": \"SD\",\n    \"Tennessee\": \"TN\",\n    \"Texas\": \"TX\",\n    \"Utah\": \"UT\",\n    \"Vermont\": \"VT\",\n    \"Virginia\": \"VA\",\n    \"Washington\": \"WA\",\n    \"West Virginia\": \"WV\",\n    \"Wisconsin\": \"WI\",\n    \"Wyoming\": \"WY\"\n}\n export default stateAbbreviations\n","const stateReasons: {\n  [key: string]: string[];\n} = {\n  Alabama: ['RESALE', 'TRIBAL GOVERNMENT'],\n  Alaska: ['RESALE'],\n  Alberta: [],\n  'American Samoa': [],\n  Arizona: ['RESALE', 'TRIBAL GOVERNMENT'],\n  Arkansas: ['RESALE'],\n  'British Columbia': ['RESALE', 'TRIBAL GOVERNMENT'],\n  California: ['RESALE', 'TRIBAL GOVERNMENT'],\n  'Canada (GST)': ['TRIBAL GOVERNMENT'],\n  Colorado: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Connecticut: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Delaware: [],\n  'District Of Columbia': ['RESALE'],\n  Florida: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Georgia: ['LOCAL GOVERNMENT', 'RESALE'],\n  Guam: [],\n  Hawaii: ['RESALE'],\n  Idaho: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Illinois: ['LOCAL GOVERNMENT', 'RESALE'],\n  Indiana: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Iowa: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Kansas: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Kentucky: ['LOCAL GOVERNMENT', 'RESALE'],\n  Louisiana: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Maine: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Manitoba: ['RESALE', 'TRIBAL GOVERNMENT'],\n  Maryland: ['LOCAL GOVERNMENT', 'RESALE'],\n  Massachusetts: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Michigan: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Minnesota: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Mississippi: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Missouri: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Montana: ['RESALE'],\n  Nebraska: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Nevada: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'New Brunswick': ['TRIBAL GOVERNMENT'],\n  Newfoundland: ['TRIBAL GOVERNMENT'],\n  'New Hampshire': [],\n  'New Jersey': ['LOCAL GOVERNMENT', 'RESALE'],\n  'New Mexico': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'New York': ['RESALE', 'TRIBAL GOVERNMENT'],\n  'North Carolina': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'North Dakota': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'Northern Mariana Islands': [],\n  'Northwest Territories': [],\n  'Nova Scotia': ['TRIBAL GOVERNMENT'],\n  Nunavut: [],\n  Ohio: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Oklahoma: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Ontario: ['TRIBAL GOVERNMENT'],\n  Oregon: ['RESALE'],\n  Pennsylvania: ['LOCAL GOVERNMENT', 'RESALE'],\n  'Prince Edward Island': ['TRIBAL GOVERNMENT'],\n  'Puerto Rico': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Quebec: ['TRIBAL GOVERNMENT'],\n  'Rhode Island': ['RESALE', 'TRIBAL GOVERNMENT'],\n  Saskatchewan: ['RESALE', 'TRIBAL GOVERNMENT'],\n  'South Carolina': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'South Dakota': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Tennessee: ['LOCAL GOVERNMENT', 'RESALE'],\n  Texas: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'U.S. Virgin Islands': [],\n  Utah: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Vermont: ['LOCAL GOVERNMENT', 'RESALE'],\n  Virginia: ['LOCAL GOVERNMENT', 'RESALE'],\n  Washington: ['RESALE', 'TRIBAL GOVERNMENT'],\n  'West Virginia': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Wisconsin: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Wyoming: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Yukon: [],\n};\nexport default stateReasons;\n","import React, { useEffect, useState } from 'react';\nimport { FormikProps, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport stateAbbreviations from './stateAbbreviations';\nimport stateReasons from './stateReasons';\nimport Select from 'react-select';\nimport './certificateForm.scss';\nimport { CertificateFormValues } from './types';\n\ninterface CertificateFormProps {\n    initialRegion?: string;\n    onSubmit: (values: CertificateFormValues) => void;\n}\ninterface OptionType {\n    value: string;\n    label: string;\n}\nconst labelOptions: OptionType[] =[\n    { value: '19', label: 'AFFIDAVIT' },\n    { value: '29', label: 'AUTO-VALIDATION NO ISSUES FOUND' },\n    { value: '22', label: 'CERTEXPRESS IMPORT' },\n    { value: '26', label: 'CERTEXPRESS PUBLIC UPLOAD' },\n];\n\nconst CertificateForm = ({\n    values,\n    touched,\n    errors,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n    isSubmitting,\n}: FormikProps<CertificateFormValues>) => {\n    const [reasons, setReasons] = useState<string[]>([]);\n    useEffect(() => {\n        if (values.region) {\n            const selectedState: keyof typeof stateReasons =  values.region;\n            const reasonsForState = stateReasons[selectedState] || [];\n            setReasons(reasonsForState);\n            setFieldValue('exemptionReason', ''); // Resetear el select de razones cuando cambie la región\n        }\n    }, [values.region, setFieldValue]);\n\n    return (\n        <form className=\"form certificate-form\" onSubmit={handleSubmit}>\n            <fieldset className=\"form-fieldset\">\n                <div className=\"form-body\">\n                    {/* Región */}\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"region\">Regions Covered by Certificate</label>\n                            <span className=\"required-label\">Required</span>\n                            <select\n                                name=\"region\"\n                                id=\"region\"\n                                className=\"form-input\"\n                                value={values.region}\n                                onChange={handleChange}\n                            >\n                                <option value=\"\">Select a Region</option>\n                                {Object.keys(stateAbbreviations).map((state) => (\n                                    <option key={state} value={state}>\n                                        {state}\n                                    </option>\n                                ))}\n                            </select>\n                            {touched.region && errors.region && <div className=\"error\">{errors.region}</div>}\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"exemptionReason\">Reason for Exemption</label>\n                            <span className=\"required-label\">Required</span>\n                            <select\n                                name=\"exemptionReason\"\n                                id=\"exemptionReason\"\n                                className=\"form-input\"\n                                value={values.exemptionReason}\n                                onChange={handleChange}\n                            >\n                                <option value=\"\">Select a Reason</option>\n                                {reasons.map((reason) => (\n                                    <option key={reason} value={reason}>\n                                        {reason}\n                                    </option>\n                                ))}\n                            </select>\n                            {touched.exemptionReason && errors.exemptionReason && (\n                                <div className=\"error\">{errors.exemptionReason}</div>\n                            )}\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"effectiveDate\">Effective Date</label>\n                            <span className=\"required-label\">Required</span>\n                            <input\n                                type=\"date\"\n                                name=\"effectiveDate\"\n                                id=\"effectiveDate\"\n                                className=\"form-input\"\n                                value={values.effectiveDate}\n                                onChange={handleChange}\n                            />\n                            {touched.effectiveDate && errors.effectiveDate && (\n                                <div className=\"error\">{errors.effectiveDate}</div>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"entityUseCode\">Entity Use Code</label>\n                            <span className=\"required-label\">Optional</span>\n                            <input\n                                type=\"text\"\n                                name=\"entityUseCode\"\n                                id=\"entityUseCode\"\n                                className=\"form-input\"\n                                value={values.entityUseCode}\n                                onChange={handleChange}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"exemptionDescription\">Exemption Description</label>\n                            <span className=\"required-label\">Optional</span>\n                            <input\n                                type=\"text\"\n                                name=\"exemptionDescription\"\n                                id=\"exemptionDescription\"\n                                className=\"form-input\"\n                                value={values.exemptionDescription}\n                                onChange={handleChange}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"certificateLabels\">Certificate Labels</label>\n                            <span className=\"required-label\">Optional</span>\n                            <Select\n                                id=\"certificateLabels\"\n                                name=\"certificateLabels\"\n                                options={labelOptions}\n                                isMulti\n                                value={values.certificateLabels}\n                                onChange={(selected) => setFieldValue('certificateLabels', selected)}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"form-actions\">\n                    <button type=\"submit\" className=\"button button--primary\" disabled={isSubmitting}>\n                        {isSubmitting ? (\n                            <>\n                                Creating Certificate...\n                                <span className=\"spinner\"></span>\n                            </>\n                        ) : (\n                            'Create Certificate'\n                        )}\n                    </button>\n                </div>\n\n            </fieldset>\n        </form>\n    );\n};\n\nconst EnhancedCertificateForm = withFormik<CertificateFormProps, CertificateFormValues>({\n    mapPropsToValues: (props) => ({\n        region: props.initialRegion || '',\n        exemptionReason: '',\n        effectiveDate: '',\n        entityUseCode: '',\n        exemptionDescription: '',\n        certificateLabels: [],\n    }),\n\n    validationSchema: Yup.object().shape({\n        region: Yup.string().required('Region is required'),\n        exemptionReason: Yup.string().required('Reason for exemption is required'),\n        effectiveDate: Yup.date().required('Effective date is required').nullable(),\n    }),\n\n    handleSubmit: (values, { props }) => {\n        props.onSubmit(values);\n    },\n})(CertificateForm);\n\nexport default EnhancedCertificateForm;\n","import React, {useState } from 'react';\nimport { Modal, ModalHeader } from '../ui/modal';\nimport { withCheckout } from '../checkout';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n//import CertificateSelect from './CertificateSelect';\nimport {  createCertificate, getFormData } from './services/LambdaService';\nimport CertificateForm from './CertificateForm';\nimport { Address} from '@bigcommerce/checkout-sdk';\nimport {  CreateCertificateProps, CertificateFormValues,Customer} from './types'\n\n\nconst CreateCertificate: React.FC<CreateCertificateProps & { checkoutService: any }> = ({ customer, shippingAddress, checkoutService}) => {\n    //const [certificateDetails, setCertificateDetails] = useState<CertificateDetail[]>([]);\n    //const [loading, setLoading] = useState(true);\n    //const [error, setError] = useState<string | null>(null);\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [showSuccess, setShowSuccess] = useState(false);\n     const onAfterOpen = () => {\n        console.log('after open');\n    };\n    const onRequestClose = () => {\n        setIsOpen(false);\n    };\n\n    const showModal = () => {\n       setIsOpen(true);\n    };\n    const handleSubmit = async (values: CertificateFormValues) => {\n        try {\n            const formData = getFormData(\n                values.region,\n                values.exemptionReason,\n                values.effectiveDate,\n                values.entityUseCode,\n                values.exemptionDescription,\n                customer,\n                shippingAddress\n            );\n\n            const result = await createCertificate(formData);\n            if (result) {\n                setShowSuccess(true);\n                setTimeout(async () => {\n                    try {\n                        const response = await checkoutService.loadCheckout();\n                        let shippingAddress = response.data.getShippingAddress();\n                        if (shippingAddress) {\n                            await checkoutService.updateShippingAddress(shippingAddress);\n                        }\n                        try {\n                            const checkoutData = await checkoutService.loadCheckout();\n                            const updateData = {\n                                cart: checkoutData.data.getCart(),\n                                shippingAddress: checkoutData.data.getShippingAddress(),\n                                billingAddress: checkoutData.data.getBillingAddress(),\n                                customer: checkoutData.data.getCustomer(),\n                                customerMessage: \"\",\n                            };\n\n                            await checkoutService.updateCheckout(updateData);\n                        } catch (error) {\n                            console.error(\"Error en updateCheckout:\", error);\n                        }\n\n                        setShowSuccess(false);\n                        setIsOpen(false);\n                        //window.location.reload();\n                    } catch (error) {\n                        console.error('Error reloading checkout:', error);\n                    }\n                }, 3000);\n            }\n        } catch (error) {\n            console.error('Error creating certificate:', error);\n        }\n    };\n    if (customer.isGuest) {\n        return (\n            <p>\n                Please <a href=\"/login.php?from=checkout\" rel=\"noopener noreferrer\">sign in</a> to apply tax exemption certificates to this transaction.\n            </p>\n        );\n    }\n    else {\n        return (\n            <>\n                {/* <div>\n                    <span>Certificate Applied:</span>\n                    {certificateDetails.length > 0 ? (\n                        certificateDetails.map((details, index) => {\n                            const detail = Array.isArray(details) ? details[0] : details;\n                            return detail ? (\n                                <div key={detail.id}>\n                                    <p>\n                                        <span>Exempt Reason:</span> {detail?.exemptionReason?.name || 'Unknown'}\n                                        <br />\n                                        <span>State:</span> {detail?.exposureZone.region} |&nbsp;\n                                        <span>Percent:</span> {detail?.exemptPercentage}%\n                                    </p>\n                                </div>\n                            ) : (\n                                <p key={index}>No details available</p>\n                            );\n                        })\n                    ) : (\n                        <p>No exemption certificates found.</p>\n                    )}\n                </div> */}\n                <a onClick={() => showModal()} > Add Tax Exempt Certificate  </a>\n                <Modal\n                    additionalModalClassName=\"modal--big\"\n                    header={\n                        <ModalHeader>\n                            Add New Certificate\n                        </ModalHeader>\n                    }\n                    isOpen={isOpen}\n                    onAfterOpen={onAfterOpen}\n                    onRequestClose={onRequestClose}\n                    shouldShowCloseButton={true}\n                >\n                    <CertificateForm  onSubmit={handleSubmit} />\n                    {showSuccess && (\n                        <div className=\"success-message\">\n                            Certificate Created Sucessfully!\n                        </div>\n                    )}\n                </Modal>\n            </>\n        );\n    }\n};\n\n\ninterface WithCheckoutCustomerInfoProps {\n    email: string;\n    customer: Customer;\n    shippingAddress: Address;\n}\n\nfunction mapToWithCheckoutCustomerInfoProps({\n    checkoutState,\n    checkoutService,\n}: CheckoutContextProps): WithCheckoutCustomerInfoProps & { checkoutService: any } | null {\n\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer, getShippingAddress },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const shippingAddress = getShippingAddress();\n    if (!billingAddress || !checkout || !customer || !shippingAddress) {\n        return null;\n    }\n\n    return {\n        email: billingAddress.email || customer.email,\n        customer,\n        shippingAddress,\n        checkoutService, \n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerInfoProps)(CreateCertificate);\n","import {\n    ExtensionRegion,\n    LineItemMap,\n    ShopperCurrency,\n    StoreCurrency,\n    //createCheckoutService,\n    //CheckoutSelectors\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode, useMemo} from 'react';\nimport { Tax as CheckoutSdkTax } from '@bigcommerce/checkout-sdk';\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport OrderSummaryHeader from './OrderSummaryHeader';\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummaryPrice from './OrderSummaryPrice';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\nimport removeBundledItems from './removeBundledItems';\nimport { CreateCertificate } from '../avalara-certificates';\n//import { calculateTaxes } from '../avalara-certificates/taxCalculation';\n\nexport interface OrderSummaryProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrency;\n    additionalLineItems?: ReactNode;\n}\nexport interface Tax extends CheckoutSdkTax {\n    name: string;\n    amount: number;\n}\n\nconst OrderSummary: FunctionComponent<OrderSummaryProps & OrderSummarySubtotalsProps> = ({\n    isTaxIncluded,\n    taxes,\n    storeCurrency,\n    shopperCurrency,\n    headerLink,\n    additionalLineItems,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => {\n    // useEffect(() => {\n    //     const checkoutService = createCheckoutService();\n    //     checkoutService.loadCheckout()\n    //         .then((state: CheckoutSelectors) => {\n    //             const shippingAddress = state.data.getShippingAddress();\n    //             const cart = state.data.getCart();\n    //             const customerId = state.data.getCustomer()?.id || '';\n    //             const shippingCost = state.data.getConsignments()?.reduce((total, consignment) => {\n    //                 return total + (consignment.selectedShippingOption?.cost || 0);\n    //             }, 0);\n    //             if (shippingAddress && cart && customerId) {\n    //                 calculateTaxes(cart, shippingAddress, lineItems, customerId, shippingCost)\n    //                     .then(taxCalculated => {\n    //                         const { certificateIds } = taxCalculated;\n    //                         setCertIds(certificateIds);\n    //                     })\n    //                     .catch(error => {\n    //                         console.error('Error:', error);\n    //                     });\n    //             }\n    //         })\n    //         .catch((error: unknown) => {\n    //             if (error instanceof Error) {\n    //                 console.error('Error:', error.message);\n    //             } else {\n    //                 console.error('Error');\n    //             }\n    //         });\n    // }, [lineItems]);\n    const nonBundledLineItems = useMemo(() => removeBundledItems(lineItems), [lineItems]);\n    const displayInclusiveTax = isTaxIncluded && taxes && taxes.length > 0;\n    return (\n        <article className=\"cart optimizedCheckout-orderSummary\" data-test=\"cart\">\n            <OrderSummaryHeader>{headerLink}</OrderSummaryHeader>\n\n            <OrderSummarySection>\n                <OrderSummaryItems displayLineItemsCount items={nonBundledLineItems} />\n            </OrderSummarySection>\n\n            <Extension region={ExtensionRegion.SummaryLastItemAfter} />\n\n            <OrderSummarySection>\n                <OrderSummarySubtotals isTaxIncluded={isTaxIncluded} taxes={taxes} {...orderSummarySubtotalsProps} />\n                {additionalLineItems}\n            </OrderSummarySection>\n            <OrderSummarySection>\n                <CreateCertificate  />\n            </OrderSummarySection>\n\n            <OrderSummarySection>\n                <OrderSummaryTotal\n                    orderAmount={total}\n                    shopperCurrencyCode={shopperCurrency.code}\n                    storeCurrencyCode={storeCurrency.code}\n                />\n            </OrderSummarySection>\n\n            {displayInclusiveTax && <OrderSummarySection>\n                <h5\n                    className=\"cart-taxItem cart-taxItem--subtotal optimizedCheckout-contentPrimary\"\n                    data-test=\"tax-text\"\n                >\n                    <TranslatedString\n                        id=\"tax.inclusive_label\"\n                    />\n                </h5>\n                {(taxes || []).map((tax, index) => (\n                    <OrderSummaryPrice\n                        amount={tax.amount}\n                        key={index}\n                        label={tax.name}\n                        testId=\"cart-taxes\"\n                    />\n                ))}\n            </OrderSummarySection>}\n        </article>\n    );\n};\n\nexport default OrderSummary;\n"],"names":["children","className","TranslatedString","id","API_URL","fetchToken","fetch","method","headers","Accept","json","token","console","error","createCertificate","formData","Error","post","response","status","statusText","data","Alabama","Alaska","Alberta","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Guam","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Manitoba","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","Newfoundland","Nunavut","Ohio","Oklahoma","Ontario","Oregon","Pennsylvania","Quebec","Saskatchewan","Tennessee","Texas","Utah","Vermont","Virginia","Washington","Wisconsin","Wyoming","Yukon","labelOptions","value","label","withFormik","mapPropsToValues","props","region","initialRegion","exemptionReason","effectiveDate","entityUseCode","exemptionDescription","certificateLabels","validationSchema","shape","required","nullable","handleSubmit","values","onSubmit","touched","errors","handleChange","setFieldValue","isSubmitting","useState","reasons","setReasons","useEffect","selectedState","htmlFor","name","onChange","Object","keys","map","state","key","reason","type","options","isMulti","selected","disabled","withCheckout","checkoutState","checkoutService","getBillingAddress","getCheckout","getCustomer","getShippingAddress","billingAddress","checkout","customer","shippingAddress","email","isOpen","setIsOpen","showSuccess","setShowSuccess","isGuest","href","rel","onClick","Modal","additionalModalClassName","header","ModalHeader","onAfterOpen","log","onRequestClose","shouldShowCloseButton","signedDate","expirationDate","exposureZone","valid","CertificateCustomFields","customers","customerCode","fullName","line1","address1","line2","address2","city","postalCode","phoneNumber","phone","emailAddress","country","countryCode","stateOrProvinceCode","getFormData","setTimeout","loadCheckout","updateShippingAddress","checkoutData","updateData","cart","getCart","customerMessage","updateCheckout","isTaxIncluded","taxes","storeCurrency","shopperCurrency","headerLink","additionalLineItems","lineItems","total","orderSummarySubtotalsProps","nonBundledLineItems","useMemo","removeBundledItems","displayInclusiveTax","length","OrderSummarySection","OrderSummaryItems","displayLineItemsCount","items","Extension","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","code","storeCurrencyCode","tax","index","OrderSummaryPrice","amount","testId"],"sourceRoot":""}