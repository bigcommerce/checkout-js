{"version":3,"file":"shipping-8da2bd82.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/checkout-extension/src/ExtensionRegionContainer.ts","webpack://checkout/./packages/checkout-extension/src/useExtensions.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx"],"sourcesContent":["import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { preventDefault } from '../common/dom';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        (address: Address) => {\n            onUseNewAddress(address, id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","export enum ExtensionRegionContainer {\n    ShippingShippingAddressFormBefore = 'extension-region-shipping-shippingaddressform-before',\n    ShippingShippingAddressFormAfter = 'extension-region-shipping-shippingaddressform-after',\n}\n","import { useContext } from 'react';\n\nimport { ExtensionContext } from './ExtensionContext';\n\nexport const useExtensions = () => {\n    const extensionContext = useContext(ExtensionContext);\n\n    if (!extensionContext) {\n        throw new Error('useExtensions must be used within an <ExtensionProvider>');\n    }\n\n    return extensionContext;\n};\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n            </div>\n        ),\n        [shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        key={shippingOption.id}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate(): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm));\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isLoading,\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.ShippingShippingAddressFormAfter),\n    );\n\n    useEffect(() => {\n        if (isExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.ShippingShippingAddressFormAfter,\n                ExtensionRegion.ShippingShippingAddressFormAfter,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.ShippingShippingAddressFormAfter);\n            };\n        }\n    }, [extensionService, isExtensionRegionEnabled]);\n\n    return (\n        <>\n            {isExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.ShippingShippingAddressFormAfter} />\n            )}\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (\n        address,\n        itemId,\n        itemKey,\n    ) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useContext } from 'react';\n\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isShippingStepPending,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={shippingAddress}\n                    buttonId={editAddressButtonId}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initializeShipping(options)}\n                    isLoading={isShippingStepPending}\n                    methodId={methodId}\n                    onFieldChange={onFieldChange}\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { usePayPalConnectAddress } from '../address/PayPalAxo';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n    addresses,\n    assignItem,\n    cart,\n    cartHasChanged,\n    createCustomerAddress,\n    consignments,\n    countries,\n    countriesWithAutocomplete,\n    onCreateAccount,\n    customerMessage,\n    deinitialize,\n    deleteConsignments,\n    getFields,\n    googleMapsApiKey,\n    initialize,\n    isBillingSameAsShipping,\n    isGuest,\n    isLoading,\n    isMultiShippingMode,\n    methodId,\n    onMultiShippingSubmit,\n    onSignIn,\n    onSingleShippingSubmit,\n    onUnhandledError,\n    onUseNewAddress,\n    shippingAddress,\n    shouldShowOrderComments,\n    shouldShowSaveAddress,\n    shouldShowAddAddressInCheckout,\n    signOut,\n    updateAddress,\n    isShippingStepPending,\n    isFloatingLabelEnabled,\n}: ShippingFormProps & WithLanguageProps) => {\n    const { isPayPalAxoEnabled, mergedBcAndPayPalConnectAddresses } = usePayPalConnectAddress();\n    const shippingAddresses = isPayPalAxoEnabled ? mergedBcAndPayPalConnectAddresses : addresses;\n\n    return isMultiShippingMode ? (\n        <MultiShippingForm\n            addresses={shippingAddresses}\n            assignItem={assignItem}\n            cart={cart}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            createCustomerAddress={createCustomerAddress}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isGuest={isGuest}\n            isLoading={isLoading}\n            onCreateAccount={onCreateAccount}\n            onSignIn={onSignIn}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowAddAddressInCheckout={shouldShowAddAddressInCheckout}\n            shouldShowOrderComments={shouldShowOrderComments}\n        />\n    ) : (\n        <SingleShippingForm\n            addresses={shippingAddresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useEffect } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { preventDefault } from '../common/dom';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.ShippingShippingAddressFormBefore),\n    );\n\n    useEffect(() => {\n        if (isExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.ShippingShippingAddressFormBefore,\n                ExtensionRegion.ShippingShippingAddressFormBefore,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.ShippingShippingAddressFormBefore);\n            };\n        }\n    }, [extensionService, isExtensionRegionEnabled]);\n\n    return (\n        <>\n            {isExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.ShippingShippingAddressFormBefore} />\n            )}\n            <div className=\"form-legend-container\">\n                <Legend testId=\"shipping-address-heading\">\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {shouldShowMultiShipping && (\n                    <a\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        }\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getAppliedStyles } from '../../common/dom';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions()]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            providerWithCustomCheckout,\n            step,\n            isFloatingLabelEnabled,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        if (providerWithCustomCheckout === PaymentMethodId.StripeUPE && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1 && shippableItemsCount < 50;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout:\n            features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne((selectedItemId) => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const { children, className = 'accordion', defaultSelectedItemId } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={this.getContextValue(selectedItemId)}>\n                <ul className={className}>{children}</ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = (id) => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li\n            className={classNames(className, { [classNameSelected]: isSelected })}\n        >\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children && (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            )}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","data","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","ExtensionRegionContainer","useExtensions","extensionContext","useContext","ExtensionContext","Error","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","length","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","isMultiShippingMode","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","extensionService","isExtensionEnabled","isExtensionRegionEnabled","Boolean","isRegionEnabled","useEffect","renderExtension","ShippingShippingAddressFormAfter","removeListeners","Fieldset","legend","Legend","Alert","ShippingOptions","OrderComments","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","addressFieldName","fieldName","fieldValue","formFieldName","field","custom","handleChange","onFieldChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","handleFieldValueChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","testId","DynamicFormField","parentFieldName","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","FormContext","initializeShipping","defaultOptions","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","usePayPalConnectAddress","isPayPalAxoEnabled","mergedBcAndPayPalConnectAddresses","shippingAddresses","onMultiShippingChange","shouldShowMultiShipping","ShippingShippingAddressFormBefore","width","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","useState","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","code","allowedCountries","join","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","current","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","providerWithCustomCheckout","PaymentMethodId","email","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","Shipping","createContext","onToggle","getContextValue","selectedItemId","handleToggleItem","isDisabled","children","AccordionContext","ChecklistContext","contextValue","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","Label","htmlFor","content","kebabCase","rest","renderInput","Function","selectedValue","renderHeaderContent","BasicFormField"],"sourceRoot":""}