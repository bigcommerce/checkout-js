{"version":3,"file":"341-226c179d.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/order/OrderSummaryHeader.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/services/LambdaService.ts","webpack://checkout/./packages/core/src/app/avalara-certificates/stateAbbreviations.ts","webpack://checkout/./packages/core/src/app/avalara-certificates/stateReasons.ts","webpack://checkout/./packages/core/src/app/avalara-certificates/CertificateForm.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/CreateCertificate.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummary.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/taxCalculation.ts"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst OrderSummaryHeader: FunctionComponent = ({ children }) => (\n    <header className=\"cart-header\">\n        <h3 className=\"cart-title optimizedCheckout-headingSecondary\">\n            <TranslatedString id=\"cart.cart_heading\" />\n        </h3>\n        {children}\n    </header>\n);\n\nexport default OrderSummaryHeader;\n","import axios from 'axios';\nimport { Address } from '@bigcommerce/checkout-sdk';\nconst API_URL = 'https://yx1041xohb.execute-api.us-east-2.amazonaws.com/Prod/';\n\nexport const fetchToken = async (): Promise<string | null> => {\n    try {\n        const response = await fetch('/customer/current.jwt?app_client_id=bzhkzdt0f7vrrg92o4iym8rxvd872qj', {\n            method: 'GET',\n            headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n        });\n\n        const data = await response.json();\n        return data.token;\n    } catch (error) {\n        console.error('Error fetching token:', error);\n        return null;\n    }\n};\nexport const getHeaders = (token: string) => {\n    return {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'X-Current-Customer': token,\n    };\n};\n\nexport const fetchCertificateDetails = async (certId: number) => {\n    try {\n        const token = await fetchToken();\n        if (!token) {\n            throw new Error('Token not available');\n        }\n\n        const headers = getHeaders(token);\n        const response = await axios.get(`${API_URL}query/${certId}`, { headers });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching certificate details:', error);\n        throw error;\n    }\n};\nexport const validateTaxesWithAvalara = async (taxRequest: any) => {\n    try {\n        const token = await fetchToken();\n        if (!token) {\n            throw new Error('Token not available');\n        }\n        const headers = getHeaders(token);\n        const response = await axios.post(`${API_URL}createTransaction`, taxRequest, { headers });\n        return response.data;\n    } catch (error) {\n        console.error('Error validating with avalara:', error);\n        throw error;\n    }\n};\nexport const createCertificate = async (formData: any) => {\n    try {\n        const token = await fetchToken();\n        if (!token) {\n            throw new Error('Token not available');\n        }\n        const headers = {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            'X-Current-Customer': token,\n        };\n        const response = await axios.post(`${API_URL}/create`, formData, { headers });\n\n        if (response.status !== 200) {\n            throw new Error(`Error submitting the form: ${response.statusText}`);\n        }\n        return response.data;\n    } catch (error) {\n        console.error('Error creating certificate:', error);\n        throw error;\n    }\n};\n\nexport const getFormData = (\n    region: string,\n    exemptionReason: string,\n    effectiveDate: string,\n    entityUseCode: string,\n    exemptionDescription: string,\n    customer: {\n        id: number;\n        fullName: string;\n        email: string;\n        isGuest: boolean;\n    },\n    shippingAddress: Address\n) => {\n    const formData  = {\n        signedDate: effectiveDate,\n        expirationDate: '9999-12-31',\n        exposureZone: { name: region },\n        exemptionReason: { name: exemptionReason },\n        valid: true,\n        CertificateCustomFields: {\n            1: entityUseCode,\n            2: exemptionDescription,\n        },\n        customers: [\n            {\n                customerCode: customer.id,\n                name: customer.fullName,\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                postalCode: shippingAddress.postalCode,\n                phoneNumber: shippingAddress.phone,\n                emailAddress: customer.email,\n                country: shippingAddress.countryCode,\n                region: shippingAddress.stateOrProvinceCode ,\n            },\n        ],\n    };\n\n    return formData;\n};\n","const stateAbbreviations = {\n    \"Alabama\": \"AL\",\n    \"Alaska\": \"AK\",\n    \"Arizona\": \"AZ\",\n    \"Arkansas\": \"AR\",\n    \"California\": \"CA\",\n    \"Colorado\": \"CO\",\n    \"Connecticut\": \"CT\",\n    \"Delaware\": \"DE\",\n    \"Florida\": \"FL\",\n    \"Georgia\": \"GA\",\n    \"Hawaii\": \"HI\",\n    \"Idaho\": \"ID\",\n    \"Illinois\": \"IL\",\n    \"Indiana\": \"IN\",\n    \"Iowa\": \"IA\",\n    \"Kansas\": \"KS\",\n    \"Kentucky\": \"KY\",\n    \"Louisiana\": \"LA\",\n    \"Maine\": \"ME\",\n    \"Maryland\": \"MD\",\n    \"Massachusetts\": \"MA\",\n    \"Michigan\": \"MI\",\n    \"Minnesota\": \"MN\",\n    \"Mississippi\": \"MS\",\n    \"Missouri\": \"MO\",\n    \"Montana\": \"MT\",\n    \"Nebraska\": \"NE\",\n    \"Nevada\": \"NV\",\n    \"New Hampshire\": \"NH\",\n    \"New Jersey\": \"NJ\",\n    \"New Mexico\": \"NM\",\n    \"New York\": \"NY\",\n    \"North Carolina\": \"NC\",\n    \"North Dakota\": \"ND\",\n    \"Ohio\": \"OH\",\n    \"Oklahoma\": \"OK\",\n    \"Oregon\": \"OR\",\n    \"Pennsylvania\": \"PA\",\n    \"Rhode Island\": \"RI\",\n    \"South Carolina\": \"SC\",\n    \"South Dakota\": \"SD\",\n    \"Tennessee\": \"TN\",\n    \"Texas\": \"TX\",\n    \"Utah\": \"UT\",\n    \"Vermont\": \"VT\",\n    \"Virginia\": \"VA\",\n    \"Washington\": \"WA\",\n    \"West Virginia\": \"WV\",\n    \"Wisconsin\": \"WI\",\n    \"Wyoming\": \"WY\"\n}\n export default stateAbbreviations\n","const stateReasons: {\n  [key: string]: string[];\n} = {\n  Alabama: ['RESALE', 'TRIBAL GOVERNMENT'],\n  Alaska: ['RESALE'],\n  Alberta: [],\n  'American Samoa': [],\n  Arizona: ['RESALE', 'TRIBAL GOVERNMENT'],\n  Arkansas: ['RESALE'],\n  'British Columbia': ['RESALE', 'TRIBAL GOVERNMENT'],\n  California: ['RESALE', 'TRIBAL GOVERNMENT'],\n  'Canada (GST)': ['TRIBAL GOVERNMENT'],\n  Colorado: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Connecticut: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Delaware: [],\n  'District Of Columbia': ['RESALE'],\n  Florida: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Georgia: ['LOCAL GOVERNMENT', 'RESALE'],\n  Guam: [],\n  Hawaii: ['RESALE'],\n  Idaho: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Illinois: ['LOCAL GOVERNMENT', 'RESALE'],\n  Indiana: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Iowa: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Kansas: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Kentucky: ['LOCAL GOVERNMENT', 'RESALE'],\n  Louisiana: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Maine: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Manitoba: ['RESALE', 'TRIBAL GOVERNMENT'],\n  Maryland: ['LOCAL GOVERNMENT', 'RESALE'],\n  Massachusetts: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Michigan: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Minnesota: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Mississippi: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Missouri: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Montana: ['RESALE'],\n  Nebraska: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Nevada: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'New Brunswick': ['TRIBAL GOVERNMENT'],\n  Newfoundland: ['TRIBAL GOVERNMENT'],\n  'New Hampshire': [],\n  'New Jersey': ['LOCAL GOVERNMENT', 'RESALE'],\n  'New Mexico': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'New York': ['RESALE', 'TRIBAL GOVERNMENT'],\n  'North Carolina': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'North Dakota': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'Northern Mariana Islands': [],\n  'Northwest Territories': [],\n  'Nova Scotia': ['TRIBAL GOVERNMENT'],\n  Nunavut: [],\n  Ohio: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Oklahoma: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Ontario: ['TRIBAL GOVERNMENT'],\n  Oregon: ['RESALE'],\n  Pennsylvania: ['LOCAL GOVERNMENT', 'RESALE'],\n  'Prince Edward Island': ['TRIBAL GOVERNMENT'],\n  'Puerto Rico': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Quebec: ['TRIBAL GOVERNMENT'],\n  'Rhode Island': ['RESALE', 'TRIBAL GOVERNMENT'],\n  Saskatchewan: ['RESALE', 'TRIBAL GOVERNMENT'],\n  'South Carolina': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'South Dakota': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Tennessee: ['LOCAL GOVERNMENT', 'RESALE'],\n  Texas: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  'U.S. Virgin Islands': [],\n  Utah: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Vermont: ['LOCAL GOVERNMENT', 'RESALE'],\n  Virginia: ['LOCAL GOVERNMENT', 'RESALE'],\n  Washington: ['RESALE', 'TRIBAL GOVERNMENT'],\n  'West Virginia': ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Wisconsin: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Wyoming: ['LOCAL GOVERNMENT', 'RESALE', 'TRIBAL GOVERNMENT'],\n  Yukon: [],\n};\nexport default stateReasons;\n","import React, { useEffect, useState } from 'react';\nimport { FormikProps, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport stateAbbreviations from './stateAbbreviations';\nimport stateReasons from './stateReasons';\nimport Select from 'react-select';\nimport './certificateForm.scss';\nimport { CertificateFormValues } from './types';\n\ninterface CertificateFormProps {\n    initialRegion?: string;\n    onSubmit: (values: CertificateFormValues) => void;\n}\ninterface OptionType {\n    value: string;\n    label: string;\n}\nconst labelOptions: OptionType[] =[\n    { value: '19', label: 'AFFIDAVIT' },\n    { value: '29', label: 'AUTO-VALIDATION NO ISSUES FOUND' },\n    { value: '22', label: 'CERTEXPRESS IMPORT' },\n    { value: '26', label: 'CERTEXPRESS PUBLIC UPLOAD' },\n];\n\nconst CertificateForm = ({\n    values,\n    touched,\n    errors,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n}: FormikProps<CertificateFormValues>) => {\n    const [reasons, setReasons] = useState<string[]>([]);\n    useEffect(() => {\n        if (values.region) {\n            const selectedState: keyof typeof stateReasons =  values.region;\n            const reasonsForState = stateReasons[selectedState] || [];\n            setReasons(reasonsForState);\n            setFieldValue('exemptionReason', ''); // Resetear el select de razones cuando cambie la región\n        }\n    }, [values.region, setFieldValue]);\n\n    return (\n        <form className=\"form certificate-form\" onSubmit={handleSubmit}>\n            <fieldset className=\"form-fieldset\">\n                <div className=\"form-body\">\n                    {/* Región */}\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"region\">Regions Covered by Certificate</label>\n                            <select\n                                name=\"region\"\n                                id=\"region\"\n                                className=\"form-input\"\n                                value={values.region}\n                                onChange={handleChange}\n                            >\n                                <option value=\"\">Select a Region</option>\n                                {Object.keys(stateAbbreviations).map((state) => (\n                                    <option key={state} value={state}>\n                                        {state}\n                                    </option>\n                                ))}\n                            </select>\n                            {touched.region && errors.region && <div className=\"error\">{errors.region}</div>}\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"exemptionReason\">Reason for Exemption</label>\n                            <select\n                                name=\"exemptionReason\"\n                                id=\"exemptionReason\"\n                                className=\"form-input\"\n                                value={values.exemptionReason}\n                                onChange={handleChange}\n                            >\n                                <option value=\"\">Select a Reason</option>\n                                {reasons.map((reason) => (\n                                    <option key={reason} value={reason}>\n                                        {reason}\n                                    </option>\n                                ))}\n                            </select>\n                            {touched.exemptionReason && errors.exemptionReason && (\n                                <div className=\"error\">{errors.exemptionReason}</div>\n                            )}\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"effectiveDate\">Effective Date</label>\n                            <input\n                                type=\"date\"\n                                name=\"effectiveDate\"\n                                id=\"effectiveDate\"\n                                className=\"form-input\"\n                                value={values.effectiveDate}\n                                onChange={handleChange}\n                            />\n                            {touched.effectiveDate && errors.effectiveDate && (\n                                <div className=\"error\">{errors.effectiveDate}</div>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"entityUseCode\">Entity Use Code</label>\n                            <input\n                                type=\"text\"\n                                name=\"entityUseCode\"\n                                id=\"entityUseCode\"\n                                className=\"form-input\"\n                                value={values.entityUseCode}\n                                onChange={handleChange}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"exemptionDescription\">Exemption Description</label>\n                            <input\n                                type=\"text\"\n                                name=\"exemptionDescription\"\n                                id=\"exemptionDescription\"\n                                className=\"form-input\"\n                                value={values.exemptionDescription}\n                                onChange={handleChange}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <div className=\"form-field\">\n                            <label htmlFor=\"certificateLabels\">Certificate Labels</label>\n                            <Select\n                                id=\"certificateLabels\"\n                                name=\"certificateLabels\"\n                                options={labelOptions}\n                                isMulti\n                                value={values.certificateLabels}\n                                onChange={(selected) => setFieldValue('certificateLabels', selected)}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"form-actions\">\n                    <button type=\"submit\" className=\"button button--primary\">\n                        Create Certificate\n                    </button>\n                </div>\n\n            </fieldset>\n        </form>\n    );\n};\n\nconst EnhancedCertificateForm = withFormik<CertificateFormProps, CertificateFormValues>({\n    mapPropsToValues: (props) => ({\n        region: props.initialRegion || '',\n        exemptionReason: '',\n        effectiveDate: '',\n        entityUseCode: '',\n        exemptionDescription: '',\n        certificateLabels: [],\n    }),\n\n    validationSchema: Yup.object().shape({\n        region: Yup.string().required('Region is required'),\n        exemptionReason: Yup.string().required('Reason for exemption is required'),\n        effectiveDate: Yup.date().required('Effective date is required').nullable(),\n    }),\n\n    handleSubmit: (values, { props }) => {\n        props.onSubmit(values);\n    },\n})(CertificateForm);\n\nexport default EnhancedCertificateForm;\n","import React, { useEffect,useState } from 'react';\nimport { Modal, ModalHeader } from '../ui/modal';\nimport { withCheckout } from '../checkout';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n//import CertificateSelect from './CertificateSelect';\nimport { fetchCertificateDetails, createCertificate, getFormData } from './services/LambdaService';\nimport CertificateForm from './CertificateForm';\nimport { Address} from '@bigcommerce/checkout-sdk';\nimport { CertificateDetail, CreateCertificateProps, CertificateFormValues,Customer} from './types'\n\nconst CreateCertificate: React.FC<CreateCertificateProps> = ({ customer, certIds, shippingAddress }) => {\n    const [certificateDetails, setCertificateDetails] = useState<CertificateDetail[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [showSuccess, setShowSuccess] = useState(false);\n    useEffect(() => {\n        if (certIds.length === 0) return;\n        const fetchDetails = async () => {\n            try {\n                if (certIds.length > 0) {\n                    const details = await Promise.all(certIds.map(certId => fetchCertificateDetails(certId)));\n                    setCertificateDetails(details);\n                } else {\n                    setCertificateDetails([]);\n                }\n            } catch (error) {\n                console.error('Error :', error);\n                setError('Failed to load certificate details');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchDetails();\n    }, [certIds, shippingAddress]);\n     const onAfterOpen = () => {\n        console.log('after open');\n    };\n    const onRequestClose = () => {\n        setIsOpen(false);\n    };\n\n    const showModal = () => {\n       setIsOpen(true);\n    };\n    const handleSubmit = async (values: CertificateFormValues) => {\n        try {\n            const formData = getFormData(\n                values.region,\n                values.exemptionReason,\n                values.effectiveDate,\n                values.entityUseCode,\n                values.exemptionDescription,\n                customer,\n                shippingAddress\n            );\n\n            const result = await createCertificate(formData);\n            if (result) {\n                setShowSuccess(true);\n                setTimeout(() => {\n                    window.location.reload();\n                }, 3000);\n            }\n        } catch (error) {\n            console.error('Error creating certificate:', error);\n        }\n    };\n    if (customer.isGuest) {\n        return (\n            <p>\n                Please <a href=\"{`/login.php`}\" rel=\"noopener noreferrer\">sign in</a> to apply tax exemption certificates to this transaction.\n            </p>\n        );\n    }\n    if (loading) {\n        return <p>Checking if any certificates apply to this transaction...</p>;\n    } else if (error) {\n        return <p>{error}</p>;\n    } else if (!certificateDetails.length) {\n        return <p>No exemption certificates found.</p>;\n    } else {\n        return (\n            <>\n                <div>\n                    <span>Certificate Applied:</span>\n                    {certificateDetails.length > 0 ? (\n                        certificateDetails.map((details, index) => {\n                            const detail = Array.isArray(details) ? details[0] : details;\n                            return detail ? (\n                                <div key={detail.id}>\n                                    <p>\n                                        <span>Exempt Reason:</span> {detail?.exemptionReason?.name || 'Unknown'}\n                                        <br />\n                                        <span>State:</span> {detail?.exposureZone.region} |&nbsp;\n                                        <span>Percent:</span> {detail?.exemptPercentage}%\n                                    </p>\n                                </div>\n                            ) : (\n                                <p key={index}>No details available</p>\n                            );\n                        })\n                    ) : (\n                        <p>No exemption certificates found.</p>\n                    )}\n                </div>\n                <a onClick={() => showModal()} > Use Tax/ Exempt Certificate  </a>\n                <Modal\n                    additionalModalClassName=\"modal--big\"\n                    header={\n                        <ModalHeader>\n                            Add New Certificate\n                        </ModalHeader>\n                    }\n                    isOpen={isOpen}\n                    onAfterOpen={onAfterOpen}\n                    onRequestClose={onRequestClose}\n                    shouldShowCloseButton={true}\n                >\n                    <CertificateForm  onSubmit={handleSubmit} />\n                    {showSuccess && (\n                        <div className=\"success-message\">\n                            Certificate Created Sucessfully!\n                        </div>\n                    )}\n                </Modal>\n            </>\n        );\n    }\n};\n\n\ninterface WithCheckoutCustomerInfoProps {\n    email: string;\n    customer: Customer;\n    shippingAddress: Address;\n}\n\nfunction mapToWithCheckoutCustomerInfoProps({\n  checkoutState,\n}: CheckoutContextProps): WithCheckoutCustomerInfoProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer, getShippingAddress },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const shippingAddress = getShippingAddress();\n\n    if (!billingAddress || !checkout || !customer || !shippingAddress) {\n        return null;\n    }\n  if (!billingAddress || !checkout || !customer) {\n    return null;\n  }\n\n    return {\n        email: billingAddress.email || customer.email,\n        customer,\n        shippingAddress,\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerInfoProps)(CreateCertificate);","import {\n    ExtensionRegion,\n    LineItemMap,\n    ShopperCurrency,\n    StoreCurrency,\n    createCheckoutService,\n    CheckoutSelectors\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode, useMemo,useEffect,useState} from 'react';\nimport { Tax as CheckoutSdkTax } from '@bigcommerce/checkout-sdk';\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport OrderSummaryHeader from './OrderSummaryHeader';\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummaryPrice from './OrderSummaryPrice';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\nimport removeBundledItems from './removeBundledItems';\nimport { CreateCertificate } from '../avalara-certificates';\nimport { calculateTaxes } from '../avalara-certificates/taxCalculation';\n\nexport interface OrderSummaryProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrency;\n    additionalLineItems?: ReactNode;\n}\nexport interface Tax extends CheckoutSdkTax {\n    name: string;\n    amount: number;\n}\n\nconst OrderSummary: FunctionComponent<OrderSummaryProps & OrderSummarySubtotalsProps> = ({\n    isTaxIncluded,\n    taxes,\n    storeCurrency,\n    shopperCurrency,\n    headerLink,\n    additionalLineItems,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => {\n    const [certIds, setCertIds] = useState<number[]>([]);\n    useEffect(() => {\n        const checkoutService = createCheckoutService();\n        checkoutService.loadCheckout()\n            .then((state: CheckoutSelectors) => {\n                const shippingAddress = state.data.getShippingAddress();\n                const cart = state.data.getCart();\n                const customerId = state.data.getCustomer()?.id || '';\n                const shippingCost = state.data.getConsignments()?.reduce((total, consignment) => {\n                    return total + (consignment.selectedShippingOption?.cost || 0);\n                }, 0);\n                if (shippingAddress && cart && customerId) {\n                    calculateTaxes(cart, shippingAddress, lineItems, customerId, shippingCost)\n                        .then(taxCalculated => {\n                            const { certificateIds } = taxCalculated;\n                            setCertIds(certificateIds);\n                        })\n                        .catch(error => {\n                            console.error('Error:', error);\n                        });\n                }\n            })\n            .catch((error: unknown) => {\n                if (error instanceof Error) {\n                    console.error('Error:', error.message);\n                } else {\n                    console.error('Error');\n                }\n            });\n    }, [lineItems]);\n    const nonBundledLineItems = useMemo(() => removeBundledItems(lineItems), [lineItems]);\n    const displayInclusiveTax = isTaxIncluded && taxes && taxes.length > 0;\n    return (\n        <article className=\"cart optimizedCheckout-orderSummary\" data-test=\"cart\">\n            <OrderSummaryHeader>{headerLink}</OrderSummaryHeader>\n\n            <OrderSummarySection>\n                <OrderSummaryItems displayLineItemsCount items={nonBundledLineItems} />\n            </OrderSummarySection>\n\n            <Extension region={ExtensionRegion.SummaryLastItemAfter} />\n\n            <OrderSummarySection>\n                <OrderSummarySubtotals isTaxIncluded={isTaxIncluded} taxes={taxes} {...orderSummarySubtotalsProps} />\n                {additionalLineItems}\n            </OrderSummarySection>\n            <OrderSummarySection>\n                <CreateCertificate certIds={certIds}  />\n            </OrderSummarySection>\n\n            <OrderSummarySection>\n                <OrderSummaryTotal\n                    orderAmount={total}\n                    shopperCurrencyCode={shopperCurrency.code}\n                    storeCurrencyCode={storeCurrency.code}\n                />\n            </OrderSummarySection>\n\n            {displayInclusiveTax && <OrderSummarySection>\n                <h5\n                    className=\"cart-taxItem cart-taxItem--subtotal optimizedCheckout-contentPrimary\"\n                    data-test=\"tax-text\"\n                >\n                    <TranslatedString\n                        id=\"tax.inclusive_label\"\n                    />\n                </h5>\n                {(taxes || []).map((tax, index) => (\n                    <OrderSummaryPrice\n                        amount={tax.amount}\n                        key={index}\n                        label={tax.name}\n                        testId=\"cart-taxes\"\n                    />\n                ))}\n            </OrderSummarySection>}\n        </article>\n    );\n};\n\nexport default OrderSummary;\n","\nimport { validateTaxesWithAvalara } from './services/LambdaService';\n\nconst store_hash='5ytm98vliq'\nexport const calculateTaxes = async (cart: any, shippingAddress: any, lineItems: any, customerId: any, shippingCost:any) => {\n    const date = new Date().toISOString().split('T')[0];\n    const allItems = [\n        ...lineItems.physicalItems,\n        ...lineItems.digitalItems,\n        ...lineItems.customItems,\n        ...lineItems.giftCertificates,\n    ];\n    const itemsWithShipping = allItems.map((item: any, index: number) => ({\n        number: `${index + 1}`,\n        quantity: item.quantity || 1, \n        amount: item.listPrice || item.amount || 0, \n        taxCode: 'P0000000', \n        itemCode: item.sku || item.itemCode || `item-${index + 1}`, \n        description: item.name || 'Product', \n    }));\n    if (shippingCost > 0) {\n        itemsWithShipping.push({\n            number: `${itemsWithShipping.length + 1}`, \n            quantity: 1,\n            amount: shippingCost, \n            taxCode: 'FR00000', \n            itemCode: 'shipping', \n            description: 'Shipping Cost', \n        });\n    }\n\n    const taxRequest = {\n        id: cart.id, \n        code: cart.id, \n        createTransactionModel: {\n            lines: itemsWithShipping.map((item: any, index: number) => ({\n                number: `${index + 1}`, \n                quantity: item.quantity,\n                amount: item.amount, \n                taxCode: item.taxCode, \n                itemCode: item.itemCode, \n                description: item.description, \n            })),\n            type: 'SalesInvoice', \n            date: date, \n            customerCode: `${store_hash}_${customerId}`, \n            purchaseOrderNo: `${date}-${cart.id}`, \n            addresses: {\n                singleLocation: {\n                    line1: shippingAddress.address1, \n                    line2: shippingAddress.address2,\n                    city: shippingAddress.city,\n                    region: shippingAddress.region, \n                    country: shippingAddress.country,\n                    postalCode: shippingAddress.postalCode,\n                },\n            },\n            commit: false,\n            currencyCode: 'USD',\n            description: 'Order transaction',\n        },\n    };\n\n    try {\n        const response = await validateTaxesWithAvalara(taxRequest);\n        const { totalTax, lines } = response;\n\n        const certificateIds = new Set<number>();\n\n        lines.forEach((line: any) => {\n            if (line.certificateId) {\n                certificateIds.add(line.certificateId);\n            }\n        });\n\n        const uniqueCertificateIds = Array.from(certificateIds);\n        return {\n            taxes: [{\n                name: 'Tax',\n                amount: totalTax,\n            }],\n            certificateIds: uniqueCertificateIds\n        };\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n\n};"],"names":["children","className","TranslatedString","id","API_URL","fetchToken","fetch","method","headers","Accept","json","token","console","error","getHeaders","validateTaxesWithAvalara","taxRequest","Error","axios","post","data","createCertificate","formData","response","status","statusText","Alabama","Alaska","Alberta","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Guam","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Manitoba","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","Newfoundland","Nunavut","Ohio","Oklahoma","Ontario","Oregon","Pennsylvania","Quebec","Saskatchewan","Tennessee","Texas","Utah","Vermont","Virginia","Washington","Wisconsin","Wyoming","Yukon","labelOptions","value","label","withFormik","mapPropsToValues","props","region","initialRegion","exemptionReason","effectiveDate","entityUseCode","exemptionDescription","certificateLabels","validationSchema","shape","required","nullable","handleSubmit","values","onSubmit","touched","errors","handleChange","setFieldValue","useState","reasons","setReasons","useEffect","selectedState","htmlFor","name","onChange","Object","keys","map","state","key","reason","type","options","isMulti","selected","withCheckout","getBillingAddress","getCheckout","getCustomer","getShippingAddress","billingAddress","checkout","customer","shippingAddress","email","certIds","certificateDetails","setCertificateDetails","loading","setLoading","setError","isOpen","setIsOpen","showSuccess","setShowSuccess","length","Promise","all","certId","get","fetchCertificateDetails","details","isGuest","href","rel","index","detail","Array","isArray","exposureZone","exemptPercentage","onClick","Modal","additionalModalClassName","header","ModalHeader","onAfterOpen","log","onRequestClose","shouldShowCloseButton","signedDate","expirationDate","valid","CertificateCustomFields","customers","customerCode","fullName","line1","address1","line2","address2","city","postalCode","phoneNumber","phone","emailAddress","country","countryCode","stateOrProvinceCode","getFormData","setTimeout","window","location","reload","isTaxIncluded","taxes","storeCurrency","shopperCurrency","headerLink","additionalLineItems","lineItems","total","orderSummarySubtotalsProps","setCertIds","createCheckoutService","loadCheckout","then","cart","getCart","customerId","shippingCost","getConsignments","reduce","consignment","selectedShippingOption","cost","date","Date","toISOString","split","allItems","physicalItems","digitalItems","customItems","giftCertificates","itemsWithShipping","item","number","quantity","amount","listPrice","taxCode","itemCode","sku","description","push","code","createTransactionModel","lines","purchaseOrderNo","addresses","singleLocation","commit","currencyCode","totalTax","Set","forEach","line","certificateId","add","uniqueCertificateIds","from","certificateIds","calculateTaxes","taxCalculated","catch","message","nonBundledLineItems","useMemo","removeBundledItems","displayInclusiveTax","OrderSummarySection","OrderSummaryItems","displayLineItemsCount","items","Extension","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","storeCurrencyCode","tax","OrderSummaryPrice","testId"],"sourceRoot":""}