{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/address/getFormFieldInputId.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/address/DynamicInput.tsx","webpack://checkout/./src/app/address/MultiCheckboxControl.tsx","webpack://checkout/./src/app/address/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/address/DynamicFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts"],"names":["CheckboxInput","Object","react__WEBPACK_IMPORTED_MODULE_2__","_a","ref","additionalClassName","label","id","rest","tslib__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","Fragment","_Input__WEBPACK_IMPORTED_MODULE_3__","className","classnames__WEBPACK_IMPORTED_MODULE_1___default","type","_Label__WEBPACK_IMPORTED_MODULE_4__","htmlFor","__webpack_exports__","isEqualAddress","address1","address2","lodash__WEBPACK_IMPORTED_MODULE_1__","normalizeAddress","address","customFields","filter","fieldValue","__webpack_require__","d","getShippableItemsCount","_getLineItemsCount__WEBPACK_IMPORTED_MODULE_0__","cart","lineItems","physicalItems","item","addedByPromotion","DropdownTrigger","_super","_this","apply","this","arguments","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","document","addEventListener","removeEventListener","prototype","componentWillUnmount","render","props","children","placement","dropdown","react__WEBPACK_IMPORTED_MODULE_1___default","react_popper__WEBPACK_IMPORTED_MODULE_2__","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","react__WEBPACK_IMPORTED_MODULE_1__","TextArea","testId","data-test","mapAddressFromFormValues","formValues","customFieldsObject","value","key","push","fieldId","toISOString","slice","isValidCustomerAddress","lodash__WEBPACK_IMPORTED_MODULE_0__","_isEqualAddress__WEBPACK_IMPORTED_MODULE_1__","_isValidAddress__WEBPACK_IMPORTED_MODULE_2__","addresses","formFields","customerAddress","AddressSelect","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","_isEqualAddress__WEBPACK_IMPORTED_MODULE_5__","handleUseNewAddress","onUseNewAddress","role","_ui_dropdown__WEBPACK_IMPORTED_MODULE_4__","AddressSelectMenu","AddressSelectButton","href","_common_dom__WEBPACK_IMPORTED_MODULE_2__","_locale__WEBPACK_IMPORTED_MODULE_3__","map","_StaticAddress__WEBPACK_IMPORTED_MODULE_6__","renderLabel","name","_ui_form__WEBPACK_IMPORTED_MODULE_3__","hidden","_locale__WEBPACK_IMPORTED_MODULE_2__","renderInput","field","_ui_form__WEBPACK_IMPORTED_MODULE_4__","autoComplete","maxLength","legend","_ui_form__WEBPACK_IMPORTED_MODULE_5__","_ui_form__WEBPACK_IMPORTED_MODULE_6__","_ui_form__WEBPACK_IMPORTED_MODULE_7__","input","AddressSelector","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","find","types","indexOf","AddressSelectorUK","tslib","googleAutocomplete_AddressSelector","AddressSelectorFactory","create","autocompleteData","addressSelector","AddressSelectorUk","ADDRESS_FIELD_IDS","postalCode","stateOrProvince","stateOrProvinceCode","getFormFieldLegacyName","getFormFieldInputId","popover_Popover","react_default","getItemClassName","highlightedIndex","index","classes","join","instance","popover_PopoverList","react","_b","_c","getItemProps","_d","menuProps","items","length","content","autocomplete_Autocomplete","Autocomplete","stateReducer","changes","onChange","downshift_cjs_default","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","lodash","undefined","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","onStateChange","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","i","offset","notHighlightedLength","substr","GoogleAutocompleteScriptLoader","_scriptLoader","script_loader_lib","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","GoogleAutocompleteService","_apiKey","googleAutocomplete_GoogleAutocompleteScriptLoader","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","_placesPromise","PlacesService","address_googleAutocomplete_GoogleAutocomplete","GoogleAutocomplete","call","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","googleAutocomplete_GoogleAutocompleteService","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","googleAutocomplete_GoogleAutocompleteFormField","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","TranslatedString","country","FormField","form_RadioInput","checked","Input","classnames_default","Label","address_DynamicInput","fieldType","options","placeholder","handleDateChange","date","target","DynamicFormFieldType","optionValue","radio","checkbox","Array","isArray","includes","react_datepicker_lib_default","calendarClassName","maxDate","max","Date","minDate","min","placeholderText","popperClassName","selected","multiline","TextInput","password","address_MultiCheckboxControl","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","MultiCheckboxFormField","form","values","errors","pop","remove","handleSelectAll","checkedValues","dist","forEach","val","handleSelectNone","handleInputChange","FormFieldContainer","hasError","FormFieldError","address_CheckboxGroupFormField","renderField","renderProps","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","address_DynamicFormField","fieldLabel","custom","required","addressFieldName","fieldInputId","translatedLabelString","helperLabel","rows","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","AddressForm_AddressForm","AddressForm","containerRef","handleDynamicFormFieldChange","lib","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","accessor","googleAutocomplete_AddressSelectorFactory","c","code","street2","stateName","states","subdivisions","mapToAddress","dateFormFieldNames","componentDidMount","current","querySelector","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","translatedPlaceholderId","getDynamicFormFieldType","translate","secret","number","text","telephone","withLanguage"],"mappings":"yKAaMA,EAAgBC,OAAAC,EAAA,WAAAD,CAAW,SAC7BE,EAMAC,GALI,IAAAC,EAAAF,EAAAE,oBACAC,EAAAH,EAAAG,MACAC,EAAAJ,EAAAI,GACAC,EAAAC,EAAA,OAAAN,EAAA,sCAGH,OACDO,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAKL,EAAA,YACGD,EAAI,CACTO,UAAYC,IACR,gBACA,kCACAX,GAEJE,GAAKA,EACLH,IAAMA,EACNa,KAAK,cAETP,EAAAC,EAAAC,cAACM,EAAA,EAAK,CAACC,QAAUZ,GACXD,MAKCc,EAAA,K,oFClCA,SAASC,EAAeC,EAA8BC,GACjE,SAAKD,IAAaC,IAIXtB,OAAAuB,EAAA,QAAAvB,CACHwB,EAAiBH,GACjBG,EAAiBF,IAIzB,SAASE,EAAiBC,GAGtB,OAAOzB,OAAAuB,EAAA,KAAAvB,CAAKQ,EAAA,YAEDiB,EAAO,CACVC,cAAeD,EAAQC,cAAgB,IAAIC,OAAO,SAACzB,GAAmB,QAAjBA,EAAA0B,eALZ,CAAC,KAAM,sBAAuB,OAAQ,Y,kCChB3FC,EAAAC,EAAAX,EAAA,sBAAAY,IAAA,IAAAC,EAAAH,EAAA,KAEe,SAASE,EAAuBE,GAC3C,OAAOjC,OAAAgC,EAAA,EAAAhC,CAAkBiC,EAAKC,UAAUC,cAAcR,OAAO,SAAAS,GAAQ,OAACA,EAAKC,sB,uECQ/EC,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,K,OAKIF,EAAAI,MAAwC,CACpCC,YAAY,GAmDRL,EAAAM,YAA8C,SAAAC,GAC1CP,EAAAI,MAAAC,WAGJL,EAAKQ,YAAYD,EAAME,aAEvBT,EAAKU,WAAWH,EAAME,cAItBT,EAAAU,WAA0C,WACtCV,EAAAI,MAAAC,YAMRL,EAAKW,SAAS,CAAEN,YAAY,GAAQ,WAChCO,SAASC,iBAAiB,QAASb,EAAKQ,gBAIxCR,EAAAQ,YAA2C,WACvCR,EAAAI,MAAAC,YAMRL,EAAKW,SAAS,CAAEN,YAAY,GAAS,WACjCO,SAASE,oBAAoB,QAASd,EAAKQ,gB,EAGvD,OA1F6CxC,EAAA,UAAA8B,EAAAC,GASzCD,EAAAiB,UAAAC,qBAAA,WACIJ,SAASE,oBAAoB,QAASZ,KAAKM,cAG/CV,EAAAiB,UAAAE,OAAA,eAAAjB,EAAAE,KACUxC,EAAAwC,KAAAgB,MAAEC,EAAAzD,EAAAyD,SAAUC,EAAA1D,EAAA0D,UAAWC,EAAA3D,EAAA2D,SACrBhB,EAAAH,KAAAE,MAAAC,WAER,OACIiB,EAAApD,EAAAC,cAACoD,EAAA,QAAO,KACJD,EAAApD,EAAAC,cAACoD,EAAA,UAAS,KACJ,SAAC7D,G,IAAEC,EAAAD,EAAAC,IAAU,OACX2D,EAAApD,EAAAC,cAAA,OACIG,UAAU,kBACVkD,QAAUxB,EAAKM,YACf3C,IAAMA,GAEJwD,KAKdG,EAAApD,EAAAC,cAACoD,EAAA,OAAM,CACHE,UAAY,CACRC,KAAM,CAAEC,SAAS,GACjBC,KAAM,CAAED,SAAS,GACjBE,gBAAiB,CAAEF,SAAS,IAEhCP,UAAYA,GAEV,SAAC1D,G,IAAEC,EAAAD,EAAAC,IAAKmE,EAAApE,EAAAoE,MAAY,OAACzB,EACnBiB,EAAApD,EAAAC,cAAA,OACIG,UAAU,eACVX,IAAMA,EACNmE,MAAK9D,EAAA,YACE8D,EAAK,CACRC,MAAO,OACPC,OAAQ,KAGVX,GAV0B,SAtC7CvB,EAAAmC,aAAe,CAClBb,UAAW,gBAwFnBtB,EA1FA,CAA6CoC,EAAA,WAAxBvD,EAAA,K,mJCLfwD,EAAW3E,OAAAC,EAAA,WAAAD,CAAW,SACxBE,EACAC,GADE,IAAAC,EAAAF,EAAAE,oBAAqBwE,EAAA1E,EAAA0E,OAAQ9D,EAAAZ,EAAAY,UAAWP,EAAAC,EAAA,OAAAN,EAAA,8CAEzC,OACDO,EAAAC,EAAAC,cAAA,WAAAH,EAAA,YACSD,EAAI,CACTO,UAAYA,GAAaC,IACrB,aACA,+BACAX,GACHyE,YACWD,EACZzE,IAAMA,OAICgB,EAAA,K,oFCnBA,SAAS2D,EAAyBC,GACrC,IAAAC,EAAAD,EAAArD,aAAkCD,EAAAjB,EAAA,OAAAuE,EAAA,kBACpCrD,EAA6D,GASnE,OAPA1B,OAAAuB,EAAA,MAAAvB,CAAMgF,EAAoB,SAACC,EAAOC,GAC9B,OAAAxD,EAAayD,KAAK,CACdC,QAASF,EACTtD,WAAY5B,OAAAuB,EAAA,OAAAvB,CAAOiF,GAASA,EAAMI,cAAcC,MAAM,EAAG,IAAML,MAIhEzE,EAAA,YACAiB,EAAO,CACVC,aAAYA,M,kCCjBpBG,EAAAC,EAAAX,EAAA,sBAAAoE,IAAA,IAAAC,EAAA3D,EAAA,GAAA4D,EAAA5D,EAAA,MAAA6D,EAAA7D,EAAA,KAKe,SAAS0D,EACpB9D,EACAkE,EACAC,GAEA,SAAKnE,IAAYzB,OAAA0F,EAAA,EAAA1F,CAAeyB,EAASmE,KAIlC5F,OAAAwF,EAAA,KAAAxF,CAAK2F,EAAW,SAAAE,GAAmB,OAAA7F,OAAAyF,EAAA,EAAAzF,CAAe6F,EAAiBpE,O,+GCE9EqE,EAAA,SAAAvD,GAAA,SAAAuD,IAAA,IAAAtD,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,K,OA8BYF,EAAAuD,oBAAqD,SAACC,GACpD,IAAA9F,EAAAsC,EAAAkB,MACFuC,EAAA/F,EAAA+F,gBACAC,EAAAhG,EAAAgG,gBAGClG,OAAAmG,EAAA,EAAAnG,CAAekG,EAAiBF,IACjCC,EAAgBD,IAIhBxD,EAAA4D,oBAAkC,WAChC,IAAAlG,EAAAsC,EAAAkB,MACFwC,EAAAhG,EAAAgG,iBAIJG,EAHInG,EAAAmG,iBAGYH,I,EAExB,OAjD4B1F,EAAA,UAAAsF,EAAAvD,GACxBuD,EAAAvC,UAAAE,OAAA,WACU,IAAAvD,EAAAwC,KAAAgB,MACFiC,EAAAzF,EAAAyF,UACAO,EAAAhG,EAAAgG,gBAGJ,OACIpC,EAAApD,EAAAC,cAAA,OAAKG,UAAU,cACXgD,EAAApD,EAAAC,cAAA,OAAKG,UAAU,mBAAmBwF,KAAK,YACnCxC,EAAApD,EAAAC,cAAC4F,EAAA,EAAe,CACZ1C,SACIC,EAAApD,EAAAC,cAAC6F,EAAiB,CACdb,UAAYA,EACZM,gBAAkBvD,KAAKqD,oBACvBM,gBAAkB3D,KAAK0D,oBACvBF,gBAAkBA,KAI1BpC,EAAApD,EAAAC,cAAC8F,EAAmB,CAChBd,UAAYA,EACZO,gBAAkBA,QA2B9CJ,EAjDA,CAA4BpB,EAAA,eAmDtB8B,EAA2D,SAACtG,G,IAC9DyF,EAAAzF,EAAAyF,UACAM,EAAA/F,EAAA+F,gBACAI,EAAAnG,EAAAmG,gBACAH,EAAAhG,EAAAgG,gBACE,OACFpC,EAAApD,EAAAC,cAAA,MACIG,UAAU,8CACVR,GAAG,mBAEHwD,EAAApD,EAAAC,cAAA,MAAIG,UAAU,iDACVgD,EAAApD,EAAAC,cAAA,KAAG+F,KAAK,IAAI1C,QAAUhE,OAAA2G,EAAA,EAAA3G,CAAe,WAAM,OAAAqG,EAAgBH,MACvDpC,EAAApD,EAAAC,cAACiG,EAAA,EAAgB,CAACtG,GAAG,mCAG3BqF,EAAUkB,IAAI,SAAApF,GAAW,OACvBqC,EAAApD,EAAAC,cAAA,MACIG,UAAU,gDACVoE,IAAMzD,EAAQnB,IAEdwD,EAAApD,EAAAC,cAAA,KAAG+F,KAAK,IAAI1C,QAAUhE,OAAA2G,EAAA,EAAA3G,CAAe,WAAM,OAAAiG,EAAgBxE,MACvDqC,EAAApD,EAAAC,cAACmG,EAAA,EAAa,CAACrF,QAAUA,UASvCgF,EAAmE,SAACvG,G,IACtEgG,EAAAhG,EAAAgG,gBACE,OACFpC,EAAApD,EAAAC,cAAA,KACIG,UAAU,iDACV4F,KAAK,IACLpG,GAAG,gBACH0D,QAAUhE,OAAA2G,EAAA,EAAA3G,IAERkG,EACEpC,EAAApD,EAAAC,cAACmG,EAAA,EAAa,CAACrF,QAAUyE,IACzBpC,EAAApD,EAAAC,cAACiG,EAAA,EAAgB,CAACtG,GAAG,mCAIlBa,EAAA,EAAAnB,OAAA0E,EAAA,MAAKoB,I,wHC7EL3E,EAAA,EA9B0B,WACrC,IAAM4F,EAAc/G,OAAA0E,EAAA,YAAA1E,CAAY,SAAAgH,GAAQ,OACpClD,EAAApD,EAAAC,cAACsG,EAAA,EAAK,CAACC,QAAM,EAAChG,QAAU8F,GACpBlD,EAAApD,EAAAC,cAACwG,EAAA,EAAgB,CAAC7G,GAAG,mCAE1B,IAEG8G,EAAcpH,OAAA0E,EAAA,YAAA1E,CAAY,SAACE,G,IAAEmH,EAAAnH,EAAAmH,MAAwB,OACvDvD,EAAApD,EAAAC,cAAC2G,EAAA,EAAS9G,EAAA,YACD6G,EAAK,CACVE,aAAe,MACfC,UAAY,QAEjB,IAEGC,EAASzH,OAAA0E,EAAA,QAAA1E,CAAQ,WAAM,OACzB8D,EAAApD,EAAAC,cAAC+G,EAAA,EAAM,KACH5D,EAAApD,EAAAC,cAACwG,EAAA,EAAgB,CAAC7G,GAAG,mCAE1B,IAEH,OAAOwD,EAAApD,EAAAC,cAACgH,EAAA,EAAQ,CAACF,OAASA,EAAS7C,OAAO,8BACtCd,EAAApD,EAAAC,cAACiH,EAAA,EAAS,CACNC,MAAQT,EACR/G,MAAQ0G,EACRC,KAAK,oB,uFC7BjB,WAII,SAAAc,EACIC,GAEQ,IAAAC,EAAAD,EAAAC,mBAAoBhB,EAAAe,EAAAf,KAE5BtE,KAAKuF,MAAQjB,EACbtE,KAAKwF,SAAWF,EAyCxB,OAtCIF,EAAAvE,UAAA4E,SAAA,WACI,OAAOzF,KAAK0F,KAAK,8BAA+B,eAGpDN,EAAAvE,UAAA8E,UAAA,WACI,OAAO3F,KAAKuF,OAGhBH,EAAAvE,UAAA+E,WAAA,WACI,MAAO,IAGXR,EAAAvE,UAAAgF,QAAA,WACI,OAAO7F,KAAK0F,KAAK,cAAe,cAC5B1F,KAAK0F,KAAK,WAAY,cACtB1F,KAAK0F,KAAK,eAAgB,eAGlCN,EAAAvE,UAAAiF,WAAA,WACI,OAAO9F,KAAK0F,KAAK,UAAW,eAGhCN,EAAAvE,UAAAkF,YAAA,WACI,OAAO/F,KAAK0F,KAAK,cAAe,eAG1BN,EAAAvE,UAAA6E,KAAV,SACIpH,EACA0H,GAEA,IAAMC,EAAUjG,KAAKwF,UAAYxF,KAAKwF,SAASU,KAAK,SAAAvB,GAAS,OAA+B,IAA/BA,EAAMwB,MAAMC,QAAQ9H,KAEjF,OAAI2H,EACOA,EAAQD,GAGZ,IAEfZ,EAnDA,G,ECAA,SAAAvF,GAAA,SAAAwG,I,+CAQA,OAR+CC,EAAA,UAAAD,EAAAxG,GAC3CwG,EAAAxF,UAAA4E,SAAA,WACI,OAAOzF,KAAK0F,KAAK,8BAA+B,cAGpDW,EAAAxF,UAAA+E,WAAA,WACI,OAAO5F,KAAK0F,KAAK,WAAY,cAErCW,EARA,CAA+CE,G,ECC/C,oBAAAC,KAWA,OAVWA,EAAAC,OAAP,SAAcC,GACV,IAAMC,EAAkB,IAAIJ,EAAgBG,GAE5C,OAAQC,EAAgBb,cACxB,IAAK,KACD,OAAO,IAAIc,EAAkBF,GAGjC,OAAOC,GAEfH,EAXA,G,wBCDaK,EAAmC,CAC5ClI,SAAU,eACVC,SAAU,eACVkI,WAAY,WACZC,gBAAiB,WACjBC,oBAAqB,gBAGlB,SAASC,EAAuB3C,GACnC,MAAO,IAAGuC,EAAkBvC,IAASA,GAGlC,SAAS4C,EAAoB5C,GAChC,OAAU2C,EAAuB3C,GAAK,Q,uBCC3B6C,G,QARkC,SAAC3J,G,IAAEyD,EAAAzD,EAAAyD,SAChD,OACImG,EAAApJ,EAAAC,cAAA,OAAKG,UAAU,WACT6C,K,QCyCd,SAASoG,EAAiBC,EAA0BC,GAChD,IAAMC,EAAU,CAAC,oBAMjB,OAJIF,IAAqBC,GACrBC,EAAQ/E,KAAK,aAGV+E,EAAQC,KAAK,KAGT,IC5DXC,ED4DWC,EAAArK,OAAAsK,EAAA,MA7C0C,SAACpK,G,IACtDqK,EAAArK,EAAA8J,wBAAA,IAAmBO,GAAnB,EAAAA,EACA3F,EAAA1E,EAAA0E,OACA4F,EAAAtK,EAAAuK,oBAAA,IAAeD,EAAf,SAAA9G,GAAA,OAAAA,GAAA8G,EACAE,EAAAxK,EAAAyK,iBAAA,IAAYD,EAAZ,GAAAA,EACAE,EAAA1K,EAAA0K,MAEA,OAAKA,GAAUA,EAAMC,OAKjBf,EAAApJ,EAAAC,cAAA,KAAAqI,EAAA,UACIlI,UAAU,cAAa+D,YACXD,GAAc+F,GAExBC,EACG/D,IAAI,SAACzE,EAAM6H,GAAU,OAClBH,EAAApJ,EAAAC,cAAA,KAAAqI,EAAA,UACIlI,UAAYiJ,EAAiBC,EAAkBC,GAAMpF,YACzCD,GAAaA,EAAM,SAC1B6F,EAAa,CACdvF,IAAK9C,EAAK9B,GACV2J,MAAKA,EACL7H,KAAIA,IACN,CACF8C,IAAM+E,IAEJ7H,EAAK0I,YApBhB,OEqIAC,EA1If,SAAAxI,GAAA,SAAAyI,IAAA,IAAAxI,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,K,OAkGYF,EAAAyI,aAG6C,SAACrI,EAAOsI,GACjD,IAAAC,EAAA3I,EAAAkB,MAAAyH,SAER,OAAQD,EAAQlK,MAChB,KAAKoK,EAAA1K,EAAU2K,iBAAiBC,UAChC,KAAKF,EAAA1K,EAAU2K,iBAAiBE,WAChC,KAAKH,EAAA1K,EAAU2K,iBAAiBG,QAChC,KAAKJ,EAAA1K,EAAU2K,iBAAiBI,SAC5B,OAAOzC,EAAA,YACAkC,EAAO,CACVQ,WAAY9I,EAAM8I,aAG1B,KAAKN,EAAA1K,EAAU2K,iBAAiBM,YAK5B,OAJIT,EAAQQ,aAAe9I,EAAM8I,YAAcP,GAC3CA,EAASD,EAAQQ,YAAc,GAAI9I,EAAMgJ,QAGtCV,EAEX,KAAKE,EAAA1K,EAAU2K,iBAAiBQ,aAGhC,QACI,OAAOX,IAIP1I,EAAAsJ,kBAAoB,SAAC5L,G,IAAE0L,EAAA1L,EAAA0L,OAAQF,EAAAxL,EAAAwL,WAC3BnB,EAAA/H,EAAAkB,MAAAqI,oBAAA,IAAexB,EAAfyB,EAAA,KAAAzB,OAEO0B,IAAXL,GACAG,EAAa,CAAEH,OAAMA,EAAEF,WAAYA,GAAc,M,EAG7D,OAxI2B1C,EAAA,UAAAgC,EAAAzI,GACvByI,EAAAzH,UAAAE,OAAA,eAAAjB,EAAAE,KACUxC,EAAAwC,KAAAgB,MACFwI,EAAAhM,EAAAgM,WACAC,EAAAjM,EAAAiM,aACAC,EAAAlM,EAAAkM,wBACAxB,EAAA1K,EAAA0K,MACAjH,EAAAzD,EAAAyD,SACA0I,EAAAnM,EAAAmM,SACAC,EAAApM,EAAAoM,WAGJ,OACIxC,EAAApJ,EAAAC,cAACyK,EAAA1K,EAAS,CACN6L,wBAA0B,EAC1BH,wBAA0BA,EAC1BI,kBAAoBL,EACpBM,aAAe/J,KAAK+J,aACpBtB,SAAWkB,EACXK,cAAgBhK,KAAKoJ,kBACrBb,aAAevI,KAAKuI,cAElB,SAAC/K,G,IACC0L,EAAA1L,EAAA0L,OACAe,EAAAzM,EAAAyM,cACAC,EAAA1M,EAAA0M,aACAnC,EAAAvK,EAAAuK,aACAT,EAAA9J,EAAA8J,iBACE,OACFF,EAAApJ,EAAAC,cAAA,WACImJ,EAAApJ,EAAAC,cAAA,QAAAqI,EAAA,YACS2D,IACAT,IAEPN,KAAYhB,EAAMC,QAChBf,EAAApJ,EAAAC,cAACkJ,EAAO,KACJC,EAAApJ,EAAAC,cAAC0J,EAAW,CACRI,aAAeA,EACfT,iBAAmBhK,OAAAgM,EAAA,SAAAhM,CAASgK,GAAoBA,GAAoB,EACpEY,MAAQA,EAAM/D,IAAI,SAAAzE,GAAQ,OAAAI,EAAKqK,cAAczK,KAC7CuI,UAAYiC,IACZhI,OAAS0H,IAEX3I,OAQtBqH,EAAAzH,UAAAsJ,cAAR,SAAsBzK,GAClB,OAAO4G,EAAA,YACA5G,EAAI,CACP0I,QAASpI,KAAKoK,cAAc1K,MAI5B4I,EAAAzH,UAAAuJ,cAAR,SAAsB1K,GAClB,IAAKA,EAAK2K,oBAAsB3K,EAAK2K,kBAAkBlC,OACnD,OAAOzI,EAAK/B,MAGhB,IAAI2M,EAAoB,EACpB9H,EAAM,EAEV,OAAO9C,EAAK2K,kBAAkBE,OAAO,SAACC,EAAM5H,EAAO6H,GACvC,IAAA9M,EAAA+B,EAAA/B,MACA+M,EAAA9H,EAAA8H,OAAQvC,EAAAvF,EAAAuF,OACVwC,EAAuBD,EAASJ,EAqBtC,OAnBIK,IACAH,EAAK/H,KAAK2E,EAAApJ,EAAAC,cAAC2J,EAAA,SAAQ,CAACpF,IAAMA,GACpB7E,EAAMiN,OAAON,EAAWK,KAE9BnI,GAAO,GAGX8H,EAAaI,EAASvC,EAEtBqC,EAAK/H,KAAK2E,EAAApJ,EAAAC,cAAA,UAAQuE,IAAMA,GAAQ7E,EAAMiN,OAAOF,EAAQvC,KACrD3F,GAAO,EAEHiI,KAAO/K,EAAK2K,mBAAqB,IAAIlC,OAAS,IAC9CqC,EAAK/H,KAAK2E,EAAApJ,EAAAC,cAAC2J,EAAA,SAAQ,CAACpF,IAAMA,GACpB7E,EAAMiN,OAAON,KAEnB9H,GAAO,GAGJgI,GACR,KAGClC,EAAAzH,UAAAkJ,aAAR,SAAqBrK,GACjB,OAAOA,GAAQA,EAAK6C,OAAS,IAyCrC+F,EAxIA,CAA2BV,EAAA,e,sBCb3B,WAII,SAAAiD,IACI7K,KAAK8K,cAAgBxN,OAAAyN,EAAA,gBAAAzN,GAkC7B,OA/BIuN,EAAAhK,UAAAmK,YAAA,SAAYC,GAAZ,IAAAnL,EAAAE,KACI,OAAIA,KAAKkL,oBACElL,KAAKkL,qBAGhBlL,KAAKkL,oBAAsB,IAAIC,QAAQ,SAACC,EAASC,GAC7C,IACMC,EAAS,CACX,cACA,OAAOL,EACP,mBACA,6BACFxD,KAAK,KAEN8D,OAA4C,iBAAI,YAmB7D,SAA8BA,GAC1B,IAAMC,EAAqBD,EAE3B,OAAOE,QAAQD,EAAmBE,QAC9BF,EAAmBE,OAAOC,MAC1BH,EAAmBE,OAAOC,KAAKC,SAvBnBC,CAAqBN,SACrBH,EAAQG,OAAOG,OAAOC,MAG1BN,KAGJvL,EAAKgL,cAAcgB,WAAW,qCAAqCR,GAC9DS,MAAM,SAAAC,GAEH,MADAlM,EAAKoL,yBAAsB3B,EACrByC,MAIXhM,KAAKkL,sBAEpBL,EAvCA,GCJA,I,EAAA,WAII,SAAAoB,EACYC,EACApB,QAAA,IAAAA,IHJPpD,IACDA,EAAW,IAAIyE,GGGPrB,EHALpD,GGDK1H,KAAAkM,UACAlM,KAAA8K,gBAkChB,OA/BImB,EAAApL,UAAAuL,uBAAA,WAYI,OAXKpM,KAAKqM,uBACNrM,KAAKqM,qBAAuBrM,KAAK8K,cAAcE,YAAYhL,KAAKkM,SAC3DI,KAAK,SAAAC,GACF,IAAKA,EAAcX,OAAOY,oBACtB,MAAM,IAAIC,MAAM,sCAGpB,OAAO,IAAIF,EAAcX,OAAOY,uBAIrCxM,KAAKqM,sBAGhBJ,EAAApL,UAAA6L,kBAAA,WACI,IAAMlC,EAAO9J,SAASzC,cAAc,OAapC,OAXK+B,KAAK2M,iBACN3M,KAAK2M,eAAiB3M,KAAK8K,cAAcE,YAAYhL,KAAKkM,SACrDI,KAAK,SAAAC,GACF,IAAKA,EAAcX,OAAOgB,cACtB,MAAM,IAAIH,MAAM,gCAGpB,OAAO,IAAIF,EAAcX,OAAOgB,cAAcpC,MAInDxK,KAAK2M,gBAEpBV,EAxCA,GCwJeY,EA/Hf,SAAAhN,GAGI,SAAAiN,EAAY9L,GAAZ,IAAAlB,EACID,EAAAkN,KAAA/M,KAAMgB,IAAMhB,K,OAuCRF,EAAA6J,SAA6C,SAAAjK,GAC3C,IAAAlC,EAAAsC,EAAAkB,MACFgM,EAAAxP,EAAAwP,OACAnF,EAAArK,EAAAmM,gBAAA,IAAW9B,EAAXyB,EAAA,KAAAzB,EACAoF,EAAAzP,EAAAyP,YAGJnN,EAAKoN,0BAA0BR,oBAAoBJ,KAAK,SAAAa,GACpDA,EAAQC,WAAW,CACfC,QAAS3N,EAAK9B,GACdoP,OAAQA,GAAU,CAAC,qBAAsB,SAC1C,SAAAM,GACKL,GACAA,EAAYM,QAGhB5D,EAAS2D,EAAQ5N,QAKrBI,EAAA2I,SAAoC,SAAAtD,GAClC,IAAA3H,EAAAsC,EAAAkB,MACFwM,EAAAhQ,EAAAgQ,sBACA3F,EAAArK,EAAAiL,SAKJ,SALI,IAAWZ,EAAXyB,EAAA,KAAAzB,GAGK1C,GAAO,IAEXqI,EACD,OAAO1N,EAAK2N,oBAGhB3N,EAAK4N,gBAAgBvI,GACrBrF,EAAK6N,SAASxI,IAxEdrF,EAAKoN,0BAA4B,IAAIU,EAA0B5M,EAAMiK,QACrEnL,EAAKI,MAAQ,CACTgI,MAAO,GACPrD,aAAc,O,EAqH1B,OA7HiCyB,EAAA,UAAAwG,EAAAjN,GAY7BiN,EAAAjM,UAAAE,OAAA,WACU,IAAAvD,EAAAwC,KAAAgB,MACFyI,EAAAjM,EAAAiM,aACA5B,EAAArK,EAAA6L,oBAAA,IAAexB,EAAfyB,EAAA,KAAAzB,EACAC,EAAAtK,EAAAgM,kBAAA,IAAa1B,EAAb,GAAAA,EAGEE,EAAAhI,KAAAE,MACF2E,EAAAmD,EAAAnD,aACAqD,EAAAF,EAAAE,MAGJ,OACId,EAAApJ,EAAAC,cAACoK,EAAY,CACTqB,wBAA0B,EAC1BD,aAAeA,EACfD,WAAUlD,EAAA,YACHkD,EAAU,CACb3E,aAAYA,IAEhBqD,MAAQA,EACR0B,WAAW,mCACXnB,SAAWzI,KAAKyI,SAChBkB,SAAW3J,KAAK2J,SAChBN,aAAeA,GAEfjC,EAAApJ,EAAAC,cAAA,OAAKG,UAAU,mCA0CnB0O,EAAAjM,UAAA8M,SAAR,SAAiBxI,GAAjB,IAAArF,EAAAE,KACI,GAAKmF,EAAL,CAMM,IAAA3H,EAAAwC,KAAAgB,MACF6M,EAAArQ,EAAAqQ,sBACA1H,EAAA3I,EAAA2I,MAGJnG,KAAKkN,0BAA0Bd,yBAAyBE,KAAK,SAAAa,GACzDA,EAAQW,oBAAoB,CACxB3I,MAAKA,EACLgB,MAAOA,GAAS,CAAC,WACjB0H,sBAAqBA,GACtB,SAAAE,GACC,OAAAjO,EAAKW,SAAS,CAAEyH,MAAOpI,EAAKkO,oBAAoBD,cAhBpD/N,KAAKS,SAAS,CAAEyH,MAAO,MAqBvB4E,EAAAjM,UAAA4M,kBAAR,WACIzN,KAAKS,SAAS,CACVyH,MAAO,GACPrD,aAAc,SAIdiI,EAAAjM,UAAA6M,gBAAR,SAAwBvI,GACpBnF,KAAKS,SAAS6F,EAAA,YACPtG,KAAKE,MAAK,CACb2E,aAAcM,GAASA,EAAMgD,OAAS,OAAS,UAI/C2E,EAAAjM,UAAAmN,oBAAR,SAA4BD,GACxB,OAAQA,GAAW,IAAI5J,IAAI,SAAAmJ,GAAU,OACjC3P,MAAO2P,EAAOW,YACd1L,MAAO+K,EAAOY,sBAAsBC,UACpC9D,kBAAmBiD,EAAOc,mBAC1BxQ,GAAI0P,EAAOe,aAGvBvB,EA7HA,CAAiClF,EAAA,eCyDlB0G,EAAAhR,OAAAsK,EAAA,MA9D2E,SAACpK,G,IAEnF8G,EAAA9G,EAAAmH,MAAAL,KAEJiK,EAAA/Q,EAAA+Q,YACAC,EAAAhR,EAAAgR,mBACAC,EAAAjR,EAAAiR,gBACAxB,EAAAzP,EAAAyP,YACAhC,EAAAzN,EAAAyN,OACAtB,EAAAnM,EAAAmM,SACAlB,EAAAjL,EAAAiL,SACAY,EAAA7L,EAAA6L,aAEMqF,EAAYD,EAAqBA,EAAe,IAAInK,EAASA,EAE7DqK,EAAerR,OAAAsK,EAAA,QAAAtK,CAAQ,WAAM,OAC/B8J,EAAApJ,EAAAC,cAAC2Q,EAAA,EAAgB,CAAChR,GAAG,kCACtB,IAEG4L,EAAalM,OAAAsK,EAAA,QAAAtK,CAAQ,WAAM,OAC7Bc,UAAW,0CACXR,GAAIsJ,EAAoB5C,KACxB,CAACA,IAECI,EAAcpH,OAAAsK,EAAA,YAAAtK,CAAY,SAACE,G,IAAEmH,EAAAnH,EAAAmH,MAAwB,OACvDyC,EAAApJ,EAAAC,cAAC4O,EAAkB,CACf5B,OAASA,EACT4C,sBAAwBU,EACpB,CAAEM,QAASN,QACXhF,EACJE,aAAe9E,EAAMpC,MACrBiH,WAAaA,EACbgE,wBAAwBe,GACpBC,EAAmBpI,QAAQmI,IAAgB,EAE/CtB,YAAcA,EACdxE,SAAWA,EACXkB,SAAWA,EACXN,aAAeA,KAEpB,CACC4B,EACAsD,EACA/E,EACAyD,EACAxE,EACAkB,EACAN,EACAmF,IAGJ,OACIpH,EAAApJ,EAAAC,cAAA,OAAKG,UAAY,kEACbgJ,EAAApJ,EAAAC,cAAC6Q,EAAA,EAAS,CACN3J,MAAQT,EACRiK,aAAeA,EACfrK,KAAOoK,O,wFCnCRK,EA/BIzR,OAAAsK,EAAA,WAAAtK,CAAW,SAC1BE,EAQAC,GAPI,IAAAC,EAAAF,EAAAE,oBACAC,EAAAH,EAAAG,MACA4E,EAAA/E,EAAA+E,MACAyM,EAAAxR,EAAAwR,QACApR,EAAAJ,EAAAI,GACAC,EAAAyI,EAAA,OAAA9I,EAAA,wDAGH,OACD4J,EAAApJ,EAAAC,cAAAmJ,EAAApJ,EAAAE,SAAA,KACIkJ,EAAApJ,EAAAC,cAACgR,EAAA,EAAK3I,EAAA,YACGzI,EAAI,CACTmR,QAAUA,EACV5Q,UAAY8Q,IACR,aACA,+BACAxR,GAEJE,GAAKA,EACLH,IAAMA,EACNa,KAAK,QACLiE,MAAQA,KAEZ6E,EAAApJ,EAAAC,cAACkR,EAAA,EAAK,CAAC3Q,QAAUZ,GACXD,M,8BCsHCyR,EAAA9R,OAAAsK,EAAA,MA3I4C,SAACpK,GACxDA,EAAAE,oBAAA,IACA2R,EAAA7R,EAAA6R,UACAzR,EAAAJ,EAAAI,GACA0G,EAAA9G,EAAA8G,KACAuD,EAAArK,EAAAiL,gBAAA,IAAWZ,EAAXyB,EAAA,KAAAzB,EACAyH,EAAA9R,EAAA8R,QACAC,EAAA/R,EAAA+R,YACAhN,EAAA/E,EAAA+E,MACA1E,EAAAyI,EAAA,OAAA9I,EAAA,4FAEMgS,EAAmBlS,OAAAsK,EAAA,YAAAtK,CAAY,SAACmS,EAAMpP,GAAU,OAAAoI,EAASnC,EAAA,YACxDjG,EAAK,CACRqP,OAAQ,CACJpL,KAAIA,EACJ/B,MAAOkN,OAEX,CACAhH,EACAnE,IAGJ,OAAQ+K,GACR,KAAKM,EAAA,EAAqBxO,SACtB,OACIiG,EAAApJ,EAAAC,cAAA,SAAAqI,EAAA,YACSzI,EAAW,CAChBO,UAAU,4CAA2C+D,YACtCvE,EAAE,UACjBA,GAAKA,EACL0G,KAAOA,EACPmE,SAAWA,EACXlG,MAAkB,OAAVA,EAAiB,GAAKA,IAE5BgN,GACEnI,EAAApJ,EAAAC,cAAA,UAAQsE,MAAM,IACRgN,GAERD,GAAWA,EAAQnL,IAAI,SAAC3G,G,IAAEG,EAAAH,EAAAG,MAAOiS,EAAApS,EAAA+E,MAC/B,OAAA6E,EAAApJ,EAAAC,cAAA,UACIuE,IAAMoN,EACNrN,MAAQqN,GAENjS,MAMtB,KAAKgS,EAAA,EAAqBE,MACtB,OAAKP,GAAYA,EAAQnH,OAIlBf,EAAApJ,EAAAC,cAAAmJ,EAAApJ,EAAAE,SAAA,KACDoR,EAAQnL,IAAI,SAAC3G,G,IAAEG,EAAAH,EAAAG,MAAOiS,EAAApS,EAAA+E,MACpB,OAAA6E,EAAApJ,EAAAC,cAAC8Q,EAAUzI,EAAA,YACFzI,EAAI,CACTmR,QAAUY,IAAgBrN,EAC1B3E,GAAQA,EAAE,IAAIgS,EACdpN,IAAMoN,EACNjS,MAAQA,EACR2G,KAAOA,EACPmE,SAAWA,EACXvG,OAAYtE,EAAE,IAAIgS,EAAW,SAC7BrN,MAAQqN,QAdT,KAkBf,KAAKD,EAAA,EAAqBG,SACtB,OAAKR,GAAYA,EAAQnH,OAIlBf,EAAApJ,EAAAC,cAAAmJ,EAAApJ,EAAAE,SAAA,KACDoR,EAAQnL,IAAI,SAAC3G,G,IAAEG,EAAAH,EAAAG,MAAOiS,EAAApS,EAAA+E,MACpB,OAAA6E,EAAApJ,EAAAC,cAACZ,EAAA,EAAaiJ,EAAA,YACLzI,EAAI,CACTmR,UAAUe,MAAMC,QAAQzN,IAASA,EAAM0N,SAASL,GAChDhS,GAAQA,EAAE,IAAIgS,EACdpN,IAAMoN,EACNjS,MAAQA,EACR2G,KAAOA,EACPmE,SAAWA,EACXvG,OAAYtE,EAAE,IAAIgS,EAAW,YAC7BrN,MAAQqN,QAdT,KAkBf,KAAKD,EAAA,EAAqBF,KACtB,OACIrI,EAAApJ,EAAAC,cAACiS,EAAAlS,EAAesI,EAAA,YACPzI,EAAW,CAChBgH,aAAa,MAIbsL,kBAAkB,mCAClB/R,UAAU,0CACVgS,QAAUvS,EAAKwS,IAAM,IAAIC,KAAQzS,EAAKwS,IAAG,kBAAe9G,EACxDgH,QAAU1S,EAAK2S,IAAM,IAAIF,KAAQzS,EAAK2S,IAAG,kBAAejH,EACxDjF,KAAOA,EACPmE,SAAW+G,EACXiB,gBAAgB,aAChBC,gBAAgB,mCAChBC,SAAWrT,OAAAgM,EAAA,OAAAhM,CAAOiF,GAASA,OAAQgH,KAI/C,KAAKoG,EAAA,EAAqBiB,UACtB,OACIxJ,EAAApJ,EAAAC,cAACgE,EAAA,EAAQqE,EAAA,YACAzI,EAAW,CAChBD,GAAKA,EACL0G,KAAOA,EACPmE,SAAWA,EACXvG,OAAYtE,EAAE,QACdU,KAAO+Q,EACP9M,MAAQA,KAIpB,QACI,OACI6E,EAAApJ,EAAAC,cAAC4S,EAAA,EAASvK,EAAA,YACDzI,EAAI,CACTD,GAAKA,EACL0G,KAAOA,EACPmE,SAAWA,EACXvG,OAAYtE,EAAE,KAAKyR,IAAcM,EAAA,EAAqBmB,SAClD,WACA,QACJxS,KAAO+Q,EACP9M,MAAQA,QCnGTwO,EAAAzT,OAAAsK,EAAA,MA1C4D,SAACpK,G,IACxE0E,EAAA1E,EAAA0E,OACA8O,EAAAxT,EAAAwT,cACAC,EAAAzT,EAAAyT,eAEMC,EAAuB5T,OAAAsK,EAAA,YAAAtK,CAAY,SAAC+C,GACtCA,EAAM8Q,iBACNH,KACD,CAACA,IAEEI,EAAwB9T,OAAAsK,EAAA,YAAAtK,CAAY,SAAC+C,GACvCA,EAAM8Q,iBACNF,KACD,CAACA,IAEJ,OAAO7J,EAAApJ,EAAAC,cAAA,MAAIG,UAAU,2BACjBgJ,EAAApJ,EAAAC,cAAA,MAAIG,UAAU,0BACVgJ,EAAApJ,EAAAC,cAAC2Q,EAAA,EAAgB,CAAChR,GAAG,oBAGzBwJ,EAAApJ,EAAAC,cAAA,MAAIG,UAAU,0BACVgJ,EAAApJ,EAAAC,cAAA,KAAAkE,YACmBD,EAAM,sBACrB8B,KAAK,IACL1C,QAAU4P,GAEV9J,EAAApJ,EAAAC,cAAC2Q,EAAA,EAAgB,CAAChR,GAAG,yBAI7BwJ,EAAApJ,EAAAC,cAAA,MAAIG,UAAU,0BACVgJ,EAAApJ,EAAAC,cAAA,KAAAkE,YACmBD,EAAM,uBACrB8B,KAAK,IACL1C,QAAU8P,GAEVhK,EAAApJ,EAAAC,cAAC2Q,EAAA,EAAgB,CAAChR,GAAG,6BCtB/ByT,EAAyE,SAAC7T,G,IAC5EqK,EAAArK,EAAA8T,KAAQC,EAAA1J,EAAA0J,OAAQC,EAAA3J,EAAA2J,OAChB5T,EAAAJ,EAAAI,GACAD,EAAAH,EAAAG,MACA2G,EAAA9G,EAAA8G,KACAwD,EAAAtK,EAAAiL,gBAAA,IAAWX,EAAXwB,EAAA,KAAAxB,EACAwH,EAAA9R,EAAA8R,QACAmC,EAAAjU,EAAAiU,IACAhP,EAAAjF,EAAAiF,KACAiP,EAAAlU,EAAAkU,OAEMC,EAAkBrU,OAAAsK,EAAA,YAAAtK,CAAY,WAChC,IAAMsU,EAA0BtU,OAAAuU,EAAA,MAAAvU,CAAMiU,EAAQjN,IAAS,GAEvDhH,OAAAgM,EAAA,WAAAhM,CAAWgS,EAAQnL,IAAI,SAAC3G,GAAc,OAAZA,EAAA+E,QAAoBqP,GACzCE,QAAQ,SAAAC,GAAO,OAAAtP,EAAKsP,KAEzBtJ,EAASnL,OAAAuU,EAAA,MAAAvU,CAAMiU,EAAQjN,KACxB,CACCA,EACAmE,EACA6G,EACA7M,EACA8O,IAGES,EAAmB1U,OAAAsK,EAAA,YAAAtK,CAAY,YACDA,OAAAuU,EAAA,MAAAvU,CAAMiU,EAAQjN,IAAS,IAEzCwN,QAAQ,WAAM,OAAAL,MAE5BhJ,EAASnL,OAAAuU,EAAA,MAAAvU,CAAMiU,EAAQjN,KACxB,CACCA,EACAmE,EACAgJ,EACAF,IAGEU,EAAoB3U,OAAAsK,EAAA,YAAAtK,CAAY,SAAC+C,GACnC,IAAMuR,EAA0BtU,OAAAuU,EAAA,MAAAvU,CAAMiU,EAAQjN,IAAS,GACjD9G,EAAA6C,EAAAqP,OAAEnN,EAAA/E,EAAA+E,MAAO/E,EAAAwR,QAGXvM,EAAKF,GAELmP,EAAOE,EAAcxL,QAAQ7D,IAGjCkG,EAASnL,OAAAuU,EAAA,MAAAvU,CAAMiU,EAAQjN,KACxB,CACCA,EACAmE,EACAhG,EACAiP,EACAH,IAGJ,OAAOnK,EAAApJ,EAAAC,cAACiU,EAAA,EAAkB,CAACC,SAAW7U,OAAAuU,EAAA,MAAAvU,CAAMkU,EAAQlN,IAAShH,OAAAuU,EAAA,MAAAvU,CAAMkU,EAAQlN,GAAM6D,QAC3ExK,EAEFyJ,EAAApJ,EAAAC,cAAC8S,EAAoB,CACjBC,cAAgBW,EAChBV,eAAiBe,EACjB9P,OAAStE,IAGbwJ,EAAApJ,EAAAC,cAACmR,EAAY,CACTC,UAAYM,EAAA,EAAqBG,SACjClS,GAAKA,EACL0G,KAAOA,EACPmE,SAAWwJ,EACX3C,QAAUA,EACV/M,MAAQjF,OAAAuU,EAAA,MAAAvU,CAAMiU,EAAQjN,IAAS,KAGnC8C,EAAApJ,EAAAC,cAACmU,EAAA,EAAc,CACX9N,KAAOA,EACPpC,OAAY5E,OAAAgM,EAAA,UAAAhM,CAAUgH,GAAK,2BAwCxB+N,EAAA/U,OAAAsK,EAAA,MAnCgE,SAACpK,G,IAC5EI,EAAAJ,EAAAI,GACAD,EAAAH,EAAAG,MACA2G,EAAA9G,EAAA8G,KACAmE,EAAAjL,EAAAiL,SACA6G,EAAA9R,EAAA8R,QAEMgD,EAAchV,OAAAsK,EAAA,YAAAtK,CAAY,SAACiV,GAAuC,OACpEnL,EAAApJ,EAAAC,cAACoT,EAAsB/K,EAAA,UACnB1I,GAAKA,EACLD,MAAQA,EACR2G,KAAOA,EACPmE,SAAWA,EACX6G,QAAUA,GACLhS,OAAAgM,EAAA,KAAAhM,CAAKiV,EAAa,CACnB,OACA,MACA,OACA,cAGT,CACC3U,EACAD,EACA2G,EACAmE,EACA6G,IAGJ,OAAOlI,EAAApJ,EAAAC,cAAC4T,EAAA,WAAU,CACdvN,KAAOA,EACPvD,OAASuR,MC1HXE,EAAuB,CACzB7T,SAAU,+BACVC,SAAU,+BACV6T,KAAM,qBACNC,QAAS,6BACTnE,YAAa,wBACboE,UAAW,2BACXC,SAAU,0BACVC,MAAO,6BACP/L,WAAY,4BACZC,gBAAiB,sBACjBC,oBAAqB,uBAGnB8L,EAA8B,CAChCnU,SAAU,gBACVC,SAAU,gBACV6T,KAAM,iBACNC,QAAS,eACTnE,YAAa,UACboE,UAAW,aACXC,SAAU,cACVC,MAAO,MACP/L,WAAY,cACZC,gBAAiB,iBACjBC,oBAAqB,kBAsGV+L,EAAAzV,OAAAsK,EAAA,MAtFqD,SAACpK,G,IACjEqK,EAAArK,EAAAmH,MACIL,EAAAuD,EAAAvD,KACA0O,EAAAnL,EAAAlK,MACAsV,EAAApL,EAAAoL,OACAC,EAAArL,EAAAqL,SACA5D,EAAAzH,EAAAyH,QACAe,EAAAxI,EAAAwI,IACAG,EAAA3I,EAAA2I,IACA1L,EAAA+C,EAAA/C,UAEJuK,EAAA7R,EAAA6R,UACAZ,EAAAjR,EAAAiR,gBACAhG,EAAAjL,EAAAiL,SACA8G,EAAA/R,EAAA+R,YAEM4D,EAAmB7O,EACnB8O,EAAelM,EAAoBiM,GACnCzE,EAAYD,EAAqBA,EAAe,IAAInK,EAASA,EAC7D+O,EAAwBb,EAAMlO,GAE9B3G,EAAQL,OAAAsK,EAAA,QAAAtK,CAAQ,WAAM,OACxB8J,EAAApJ,EAAAC,cAACkR,EAAA,EAAK,CAAC3Q,QAAU4U,GACXH,EACED,EACAK,GAAyBjM,EAAApJ,EAAAC,cAAC2Q,EAAA,EAAgB,CAAChR,GAAKyV,KACjDH,GACC9L,EAAApJ,EAAAC,cAAAmJ,EAAApJ,EAAAE,SAAA,KACM,GACFkJ,EAAApJ,EAAAC,cAAA,SAAOG,UAAU,sCACbgJ,EAAApJ,EAAAC,cAAC2Q,EAAA,EAAgB,CAAChR,GAAG,6BAItC,CACCqV,EACAG,EACAJ,EACAE,EACAG,IAGE3O,EAAcpH,OAAAsK,EAAA,YAAAtK,CAAY,SAACE,G,IAAEmH,EAAAnH,EAAAmH,MAAgC,OAC/DyC,EAAApJ,EAAAC,cAACmR,EAAY9I,EAAA,YACJ3B,EAAK,CACVE,aAAeiO,EAAaK,GAC5B9D,UAAYA,EACZzR,GAAKwV,EACL/C,IAAMA,EACNvL,UAAYA,QAAayE,EACzBiH,IAAMA,EACNlB,QAAUA,GAAWA,EAAQpH,MAC7BqH,YAAcA,GAAgBD,GAAWA,EAAQgE,YACjDC,KAAOjE,GAAYA,EAAgBiE,SAExC,CACCJ,EACAC,EACA/D,EACAgB,EACAvL,EACA0L,EACAlB,EACAC,IAGJ,OACInI,EAAApJ,EAAAC,cAAA,OAAKG,UAAY,0CAA0C6I,EAAuBkM,IAC5E9D,IAAcM,EAAA,EAAqBG,SACjC1I,EAAApJ,EAAAC,cAACoU,EAAsB,CACnBzU,GAAKwV,EACLzV,MAAQA,EACR2G,KAAOoK,EACPjG,SAAWA,EACX6G,QAAWA,GAAWA,EAAQpH,OAAU,KAE5Cd,EAAApJ,EAAAC,cAAC6Q,EAAA,EAAS,CACN3J,MAAQT,EACR/G,MAAQA,EACR2G,KAAOoK,EACPjG,SAAWA,OChHzB+K,EAA6B,CAC/BjF,YAAa,gCACbxH,gBAAiB,8BACjBC,oBAAqB,+BAGnByM,EAA0B,WAEhCC,EAAA,SAAA7T,GAAA,SAAA8T,IAAA,IAAA7T,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,K,OACYF,EAAA8T,aAAuCtW,OAAAsK,EAAA,UAAAtK,GAGvCwC,EAAA+T,6BAAqFvW,OAAAwW,EAAA,QAAAxW,CAAQ,SAAAgH,GAAQ,gBAAA/B,GACzGzC,EAAKiU,mBAAmBzP,EAAM/B,MA6F1BzC,EAAAkU,yBAAqE,SAACzR,EAAO2G,GAC5EA,GACDpJ,EAAKiU,mBAAmBN,EAAyBlR,IAIjDzC,EAAAmU,yBAGI,SAACC,EAAO1W,G,IAAE2W,EAAA3W,EAAA+E,MACZsF,EAAA/H,EAAAkB,MACFoT,EAAAvM,EAAAuM,UACAtM,EAAAD,EAAAwM,qBAAA,IAAgBvM,EAAhBwB,EAAA,KAAAxB,EACAE,EAAAH,EAAAY,gBAAA,IAAWT,EAAXsB,EAAA,KAAAtB,EAGEjJ,EC7IC,SACX2H,EACA0N,GAEA,QAFA,IAAAA,MAAA,KAEK1N,IAAqBA,EAAiBpB,mBACvC,MAAO,GAGX,IAAMgP,EAAWC,EAAuB9N,OAAOC,GACzCxG,EAAQoU,EAAS7O,WACjB8I,EAAc+F,EAASxO,aACvB+I,EAAUuF,GAAaA,EAAUlO,KAAK,SAAAsO,GAAK,OAAAjG,IAAgBiG,EAAEC,OAC7DC,EAAUJ,EAAS1O,aAEzB,OAAOU,EAAA,UACH1H,SAAU8V,EACVjC,KAAM6B,EAASzO,UACf0I,YAAWA,EACXzH,WAAYwN,EAASvO,eAClB7F,EAIX,SACIyU,EACAC,QAAA,IAAAA,MAAA,IAEA,IAAM1U,EAAQ0U,EAAO1O,KAAK,SAAC1I,G,IAAEiX,EAAAjX,EAAAiX,KAAMnQ,EAAA9G,EAAA8G,KAC/B,OAAAmQ,IAASE,GAAarQ,IAASqQ,IAGnC,OAAKzU,EAOE,CACH6G,gBAAiB7G,EAAMoE,KACvB0C,oBAAqB9G,EAAMuU,MARpB,CACH1N,gBAAkB6N,EAAOzM,OAAqB,GAAZwM,EAClC3N,oBAAqB,IAfdvB,CAASvF,EAAO2O,GAAWA,EAAQgG,cAAgB,ID0H9CC,CAAaZ,EAAOE,GAEpC9W,OAAAgM,EAAA,MAAAhM,CAAMyB,EAAS,SAACwD,EAAOmM,GACnB2F,EAAc3F,EAAWnM,GACzBkG,EAASiG,EAAWnM,KAGpB4R,GACArU,EAAKiU,mBAAmBN,EAAyBU,IAMjDrU,EAAAiU,mBAGI,SAACrF,EAAWnM,GACd,IAAA/E,EAAAsC,EAAAkB,MACFkC,EAAA1F,EAAA0F,WACA2E,EAAArK,EAAA6W,qBAAA,IAAgBxM,EAAhByB,EAAA,KAAAzB,EACAC,EAAAtK,EAAAiL,gBAAA,IAAWX,EAAXwB,EAAA,KAAAxB,EAGEiN,EAAqB7R,EACtBjE,OAAO,SAAA0F,GAAS,OAAAA,EAAMsO,QAAUtO,EAAM0K,YAAcM,EAAA,EAAqBF,OACzEtL,IAAI,SAAAQ,GAAS,OAAAA,EAAML,QAEpBoK,IAAc+E,GAA2BsB,EAAmB3O,QAAQsI,IAAc,IAClF2F,EAAc3F,EAAWnM,GAG7BkG,EAASiG,EAAWnM,I,EAE5B,OApJ0B+D,EAAA,UAAAqN,EAAA9T,GAQtB8T,EAAA9S,UAAAmU,kBAAA,WACY,IAAAC,EAAAjV,KAAA4T,aAAAqB,QAEJA,IACAjV,KAAKiN,YAAcgI,EAAQC,cAA2B,oCAI9DvB,EAAA9S,UAAAE,OAAA,eAAAjB,EAAAE,KACUxC,EAAAwC,KAAAgB,MACFkC,EAAA1F,EAAA0F,WACAwL,EAAAlR,EAAAkR,UACAyG,EAAA3X,EAAA2X,SACAC,EAAA5X,EAAA4X,0BACA7G,EAAA/Q,EAAA+Q,YACA8G,EAAA7X,EAAA6X,iBACAC,EAAA9X,EAAA8X,qBAGJ,OACIlO,EAAApJ,EAAAC,cAAA,OAAKG,UAAU,mBAAmBX,IAAMuC,KAAK4T,cACvC1Q,EAAWiB,IAAI,SAAAQ,GACb,IAAMwO,EAAmBxO,EAAML,KACzBiR,EAA0B/B,EAAYL,GAE5C,MAAyB,aAArBA,GAAmCkC,GAAoBD,EAEnDhO,EAAApJ,EAAAC,cAACqQ,EAA2B,CACxBrD,OAASoK,EACT9G,YAAcA,EACd5J,MAAQA,EACRnC,IAAMmC,EAAM/G,GACZqP,YAAcnN,EAAKmN,kBAAe1D,EAClCd,SAAW3I,EAAKkU,yBAChBrK,SAAW7J,EAAKmU,yBAChB5K,aAAeiM,EACf7G,gBAAkBC,EAClBF,mBAAqB4G,IAM7BhO,EAAApJ,EAAAC,cAAC8U,EAAgB,CACbpO,MAAQA,EAER0K,UAAYvP,EAAK0V,wBAAwB7Q,GACzCnC,IAASmC,EAAM/G,GAAE,IAAI+G,EAAML,KAC3BmE,SAAW3I,EAAK+T,6BAA6BV,GAC7C1E,gBAAkB9J,EAAMsO,OACnBvE,EAAeA,EAAS,gBAAkB,eAC3CA,EACJa,YAAcgG,GAA2BJ,EAASM,UAAUF,SAQ5E5B,EAAA9S,UAAA2U,wBAAR,SAAgChY,G,IAC5ByV,EAAAzV,EAAAyV,OACA3O,EAAA9G,EAAA8G,KACA+K,EAAA7R,EAAA6R,UACA/Q,EAAAd,EAAAc,KACAoX,EAAAlY,EAAAkY,OAEA,OAAKzC,EAUa,SAAd5D,EACa,YAAT/Q,EACOqR,EAAA,EAAqBgG,OAGzBD,EACH/F,EAAA,EAAqBmB,SACrBnB,EAAA,EAAqBiG,KAGtBvG,EAnB2D,CAC1DwD,MAAOlD,EAAA,EAAqBkG,UAC5BtH,YAAaoB,EAAA,EAAqBxO,SAClC6F,oBAAqB2I,EAAA,EAAqBxO,UAG1BmD,IAASqL,EAAA,EAAqBiG,MAkE9DjC,EApJA,CAA0B/L,EAAA,WAsJXnJ,EAAA,EAAAnB,OAAAwY,EAAA,GAAapC","file":"billing~shipping-9a0e9b38.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = ['id', 'stateOrProvinceCode', 'type', 'email'];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import classNames from 'classnames';\nimport React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface TextAreaProps extends InputHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport { forIn, isDate } from 'lodash';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields: customFieldsObject, ...address } = formValues;\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n\n    forIn(customFieldsObject, (value, key) =>\n        customFields.push({\n            fieldId: key,\n            fieldValue: isDate(value) ? value.toISOString().slice(0, 10) : value,\n        })\n    );\n\n    return {\n        ...address,\n        customFields,\n    };\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={ addresses }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ this.handleUseNewAddress }\n                                selectedAddress={ selectedAddress }\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a href=\"#\" onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }>\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" /> }\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            autoComplete={ 'off' }\n            maxLength={ 2000 }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset legend={ legend } testId=\"checkout-shipping-comments\">\n        <FormField\n            input={ renderInput }\n            label={ renderLabel }\n            name=\"orderComment\"\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import { AddressKeyMap } from './DynamicFormField';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getFormFieldInputId(name: string): string {\n    return `${getFormFieldLegacyName(name)}Input`;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"popoverList\"\n            data-test={ testId } { ...menuProps }\n        >\n            { items\n                .map((item, index) => (\n                    <li\n                        className={ getItemClassName(highlightedIndex, index) }\n                        data-test={ testId && `${testId}-item` }\n                        { ...getItemProps({\n                            key: item.id,\n                            index,\n                            item,\n                        }) }\n                        key={ index }\n                    >\n                        { item.content }\n                    </li>\n                )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                initialInputValue={ initialValue }\n                itemToString={ this.itemToString }\n                onChange={ onSelect }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    getItemProps={ getItemProps }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    menuProps={ getMenuProps() }\n                                    testId={ listTestId }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    GoogleAutocompleteWindow,\n    GoogleMapsSdk,\n} from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n\n        const {\n            autoComplete,\n            items,\n        } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={ 0 }\n                initialValue={ initialValue }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete,\n                } }\n                items={ items }\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={ this.onChange }\n                onSelect={ this.onSelect }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            fields,\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const {\n            componentRestrictions,\n            types,\n        } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: types || ['geocode'],\n                componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField } from '../../ui/form';\nimport { getFormFieldInputId } from '../getFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getFormFieldInputId(name),\n    }), [name]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n            initialValue={ field.value }\n            inputProps={ inputProps }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            nextElement={ nextElement }\n            onChange={ onChange }\n            onSelect={ onSelect }\n            onToggleOpen={ onToggleOpen }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                input={ renderInput }\n                labelContent={ labelContent }\n                name={ fieldName }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { CheckboxInput, InputProps, RadioInput, TextArea, TextInput } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    additionalClassName,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const handleDateChange = useCallback((date, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: date,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                maxDate={ rest.max ? new Date(`${rest.max} 00:00:00`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min} 00:00:00`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText=\"MM/DD/YYYY\"\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(DynamicInput);\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport { FormFieldContainer, FormFieldError } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    pop,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => pop());\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        pop,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        />\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, Label } from '../ui/form';\n\nimport { getFormFieldInputId, getFormFieldLegacyName } from './getFormFieldInputId';\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface AddressKeyMap<T = string> {\n    [fieldName: string]: T;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    parentFieldName?: string;\n    placeholder?: string;\n    fieldType?: DynamicFormFieldType;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        name,\n        label: fieldLabel,\n        custom,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    fieldType,\n    parentFieldName,\n    onChange,\n    placeholder,\n}) => {\n    const addressFieldName = name;\n    const fieldInputId = getFormFieldInputId(addressFieldName);\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n    const translatedLabelString = LABEL[name];\n\n    const label = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { custom ?\n                fieldLabel :\n                translatedLabelString && <TranslatedString id={ translatedLabelString } /> }\n            { !required &&\n                <>\n                    { '' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        custom,\n        fieldInputId,\n        fieldLabel,\n        required,\n        translatedLabelString,\n    ]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ AUTOCOMPLETE[addressFieldName] }\n            fieldType={ fieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        addressFieldName,\n        fieldInputId,\n        fieldType,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--${getFormFieldLegacyName(addressFieldName)}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ label }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ label }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\n\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport DynamicFormField, { AddressKeyMap } from './DynamicFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n        } = this.props;\n\n        return (\n            <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                { formFields.map(field => {\n                    const addressFieldName = field.name;\n                    const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                    if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                        return (\n                            <GoogleAutocompleteFormField\n                                apiKey={ googleMapsApiKey }\n                                countryCode={ countryCode }\n                                field={ field }\n                                key={ field.id }\n                                nextElement={ this.nextElement || undefined }\n                                onChange={ this.handleAutocompleteChange }\n                                onSelect={ this.handleAutocompleteSelect }\n                                onToggleOpen={ onAutocompleteToggle }\n                                parentFieldName={ fieldName }\n                                supportedCountries={ countriesWithAutocomplete }\n                            />\n                        );\n                    }\n\n                    return (\n                        <DynamicFormField\n                            field={ field }\n                            // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                            fieldType={ this.getDynamicFormFieldType(field) }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                            parentFieldName={ field.custom ?\n                                (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                fieldName }\n                            placeholder={ translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                        />\n                    );\n                }) }\n            </div>\n        );\n    }\n\n    private getDynamicFormFieldType({\n        custom,\n        name,\n        fieldType,\n        type,\n        secret,\n    }: FormField): DynamicFormFieldType {\n        if (!custom) {\n            const defaultTypes: { [key: string]: DynamicFormFieldType } = {\n                phone: DynamicFormFieldType.telephone,\n                countryCode: DynamicFormFieldType.dropdown,\n                stateOrProvinceCode: DynamicFormFieldType.dropdown,\n            };\n\n            return defaultTypes[name] || DynamicFormFieldType.text;\n        }\n\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { Country, Region } from '../../geography';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n"],"sourceRoot":""}