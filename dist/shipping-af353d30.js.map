{"version":3,"file":"shipping-af353d30.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/icon/IconClose.tsx","webpack://checkout/./packages/ui/src/modal/Modal.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronUp.tsx","webpack://checkout/./packages/ui/src/button/Button.tsx","webpack://checkout/./packages/ui/src/modal/ModalHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/shipping/hasPromotionalItems.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/utils/setRecommendedOrMissingShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentAddressSelector.tsx","webpack://checkout/./packages/core/src/app/shipping/ItemSplitTooltip.tsx","webpack://checkout/./packages/core/src/app/shipping/AllocatedItemsList.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItem.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItemsTable.tsx","webpack://checkout/./packages/core/src/app/shipping/MultishippingType.ts","webpack://checkout/./packages/core/src/app/shipping/AllocateItemsModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/hooks/useDeallocateItem.ts","webpack://checkout/./packages/core/src/app/shipping/utils/generateItemHash.tsx","webpack://checkout/./packages/core/src/app/shipping/hooks/useMultishippingConsignmentItems.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentLineItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ConsignmentListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/NewConsignment.tsx","webpack://checkout/./packages/core/src/app/shipping/isSelectedShippingOptionValid.ts","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingGuestForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/ui/src/modal/ConfirmationModal.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconClose: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconClose);\n","import classNames from 'classnames';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, KeyboardEvent, MouseEvent, ReactNode, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport { Omit } from 'utility-types';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\n\nimport { IconClose } from '../icon';\n\nexport type ModalProps = Omit<\n    ReactModal.Props,\n    'bodyOpenClassName' | 'className' | 'closeTimeoutMS' | 'overlayClassName'\n> & {\n    children: ReactNode;\n    closeButtonLabel?: string | ReactNode;\n    footer?: ReactNode;\n    header?: ReactNode;\n    additionalHeaderClassName?: string;\n    additionalBodyClassName?: string;\n    additionalModalClassName?: string;\n    shouldShowCloseButton?: boolean;\n};\n\nconst Modal: FunctionComponent<ModalProps> = ({\n    children,\n    closeButtonLabel = 'Close',\n    footer,\n    header,\n    additionalHeaderClassName,\n    additionalBodyClassName,\n    additionalModalClassName,\n    onRequestClose = noop,\n    shouldShowCloseButton = false,\n    ...rest\n}) => {\n    const handleClose = useCallback(\n        (event: MouseEvent | KeyboardEvent) => {\n            onRequestClose(event);\n        },\n        [onRequestClose],\n    );\n\n    return (\n        <ReactModal\n            {...rest}\n            ariaHideApp={process.env.NODE_ENV !== 'test'}\n            bodyOpenClassName=\"has-activeModal\"\n            className={{\n                base: classNames(\n                    'modal optimizedCheckout-contentPrimary',\n                    additionalModalClassName,\n                ),\n                afterOpen: 'modal--afterOpen',\n                beforeClose: 'modal--beforeClose',\n            }}\n            closeTimeoutMS={200}\n            onRequestClose={onRequestClose}\n            overlayClassName={{\n                base: 'modalOverlay',\n                afterOpen: 'modalOverlay--afterOpen',\n                beforeClose: 'modalOverlay--beforeClose',\n            }}\n            shouldCloseOnEsc={true}\n            shouldCloseOnOverlayClick={false}\n        >\n            <div className={classNames('modal-header', additionalHeaderClassName)}>\n                {header}\n\n                {shouldShowCloseButton && (\n                    <a\n                        className=\"modal-close\"\n                        data-test=\"modal-close-button\"\n                        href=\"#\"\n                        onClick={preventDefault(handleClose)}\n                    >\n                        {closeButtonLabel && <span className=\"is-srOnly\">{closeButtonLabel}</span>}\n\n                        <IconClose />\n                    </a>\n                )}\n            </div>\n\n            <div\n                className={classNames('modal-body', additionalBodyClassName)}\n                data-test=\"modal-body\"\n            >\n                {children}\n            </div>\n\n            {Boolean(footer) && (\n                <div className=\"modal-footer\" data-test=\"modal-footer\">\n                    {footer}\n                </div>\n            )}\n        </ReactModal>\n    );\n};\n\nexport default Modal;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronUp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronUp);\n","import classNames from 'classnames';\nimport React, { ButtonHTMLAttributes, FunctionComponent } from 'react';\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    isFullWidth?: boolean;\n    isLoading?: boolean;\n    size?: ButtonSize;\n    testId?: string;\n    variant?: ButtonVariant;\n}\n\nexport enum ButtonVariant {\n    Primary = 'primary',\n    Secondary = 'secondary',\n    Action = 'action',\n}\n\nexport enum ButtonSize {\n    Small = 'small',\n    Tiny = 'tiny',\n    Large = 'large',\n}\n\nfunction getClassName(\n    props: Pick<ButtonProps, 'className' | 'isFullWidth' | 'isLoading' | 'size' | 'variant'>,\n) {\n    const { className, isFullWidth, isLoading, size, variant } = props;\n\n    return classNames(\n        'button',\n        className,\n        { 'button--primary': variant === ButtonVariant.Primary },\n        { 'button--tertiary': variant === ButtonVariant.Secondary },\n        { 'button--action': variant === ButtonVariant.Action },\n        { 'button--small': size === ButtonSize.Small },\n        { 'button--tiny': size === ButtonSize.Tiny },\n        { 'button--large': size === ButtonSize.Large },\n        { 'button--slab': isFullWidth },\n        {\n            'optimizedCheckout-buttonPrimary':\n                variant === ButtonVariant.Primary || variant === ButtonVariant.Action,\n        },\n        { 'optimizedCheckout-buttonSecondary': variant === ButtonVariant.Secondary },\n        { 'is-loading': isLoading },\n    );\n}\n\nconst Button: FunctionComponent<ButtonProps> = ({\n    children,\n    className,\n    disabled,\n    isFullWidth,\n    isLoading,\n    size,\n    testId,\n    type,\n    variant,\n    ...rest\n}) => (\n    <button\n        {...rest}\n        className={getClassName({ className, isFullWidth, isLoading, size, variant })}\n        data-test={testId}\n        disabled={disabled || isLoading}\n        type={type || 'button'}\n    >\n        {children}\n    </button>\n);\n\nexport default Button;\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\ninterface ModalHeaderProps {\n    children: React.ReactNode;\n    additionalClassName?: string;\n}\n\nconst ModalHeader: FunctionComponent<ModalHeaderProps> = ({ children, additionalClassName }) => (\n    <h2\n        className={classNames(\n            'modal-header-title optimizedCheckout-headingSecondary',\n            additionalClassName,\n        )}\n        data-test=\"modal-heading\"\n    >\n        {children}\n    </h2>\n);\n\nexport default ModalHeader;\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nexport default function hasPromotionalItems(cart: Cart): boolean {\n    const { digitalItems = [], physicalItems } = cart.lineItems;\n    \n    return [...digitalItems, ...physicalItems].filter((item) => item.addedByPromotion)?.length > 0;\n}\n","import {\n    FormikProps,\n    FormikValues,\n    withFormik,\n    WithFormikConfig,\n} from 'formik';\nimport React, {\n    ComponentType,\n    useEffect,\n    useRef,\n} from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<\n    TOuterProps extends object,\n    TValues extends FormikValues = FormikValues,\n    TPayload = TValues\n>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (\n        OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>\n    ) => {\n        const DecoratedComponent: ComponentType<\n            TOuterProps & FormikProps<TValues> & WithFormikExtendedProps\n        > = (props) => {\n            const { resetForm, isInitialValueLoaded, initialValues } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false &&\n                    isInitialValueLoaded === true\n                ) {\n                    resetForm({ values: initialValues ?? {} });\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded, initialValues, resetForm]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <Button\n                    onClick={onRequestClose}\n                    variant={ButtonVariant.Secondary}>\n                    <TranslatedString id=\"common.cancel_action\" />\n                </Button>\n\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { CheckoutSelectors, Consignment, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\n\nconst createShippingOptionsMap = (consignments: Consignment[]): Map<string, string | undefined> => {\n    return new Map(\n        consignments.map((consignment) => [consignment.id, consignment.selectedShippingOption?.id]),\n    );\n};\n\nexport const setRecommendedOrMissingShippingOption = async (\n    previousConsignment: Consignment[],\n    currentConsignments: Consignment[],\n    selectConsignmentShippingOption: (\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions<object>,\n    ) => Promise<CheckoutSelectors>,\n): Promise<void> => {\n    const previousShippingOptions = createShippingOptionsMap(previousConsignment);\n\n    for (const consignment of currentConsignments) {\n        if (!consignment.selectedShippingOption) {\n            const previousShippingOptionId = previousShippingOptions.get(consignment.id);\n\n            if (previousShippingOptionId) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, previousShippingOptionId);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const recommendedOption = consignment.availableShippingOptions?.find(\n                (option) => option.isRecommended,\n            );\n\n            if (recommendedOption) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, recommendedOption.id);\n            }\n        }\n    }\n};\n","import { Address, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\nimport React, { useState } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { AddressFormModal, AddressFormValues, AddressSelect, AddressType, isValidAddress, mapAddressFromFormValues } from \"../address\";\nimport { ErrorModal } from \"../common/error\";\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from \"../common/utility\";\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from \"./errors\";\nimport { MultiShippingConsignmentData } from \"./MultishippingType\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface ConsignmentAddressSelectorProps {\n    consignment?: MultiShippingConsignmentData;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    setConsignmentRequest?(consignmentRequest: ConsignmentCreateRequestBody): void;\n    selectedAddress?: Address;\n}\n\nconst ConsignmentAddressSelector = ({\n    consignment,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    selectedAddress,\n    setConsignmentRequest,\n}: ConsignmentAddressSelectorProps) => {\n    const [isOpenNewAddressModal, setIsOpenNewAddressModal] = useState(false);\n    const [createCustomerAddressError, setCreateCustomerAddressError] = useState<Error>();\n\n    const {\n        checkoutState: {\n            data: {\n                getShippingCountries,\n                getCustomer,\n                getConfig,\n                getConsignments: getPreviousConsignments,\n                getShippingAddressFields: getFields,\n            },\n        },\n        checkoutService: {\n            updateConsignment,\n            createCustomerAddress,\n            selectConsignmentShippingOption,\n        },\n    } = useCheckout();\n\n    const countries = getShippingCountries() || EMPTY_ARRAY;\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!config || !customer) {\n        return null;\n    }\n\n    const isFloatingLabelEnabledFlag = isFloatingLabelEnabled(config.checkoutSettings);\n    // TODO: add filter for addresses\n    const addresses = customer.addresses || EMPTY_ARRAY;\n    const {\n        checkoutSettings: {\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const handleSelectAddress = async (address: Address) => {\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        if (!consignment) {\n            setConsignmentRequest?.({\n                address,\n                shippingAddress: address,\n                lineItems: [],\n            });\n\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await updateConsignment({\n                id: consignment.id,\n                address,\n                shippingAddress: address,\n                lineItems: consignment.lineItems.map(({ id, quantity }) => ({ itemId: id, quantity })),\n            });\n\n            const currentConsignments = getConsignments();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    }\n\n    const handleUseNewAddress = () => {\n        setIsOpenNewAddressModal(true);\n    }\n\n    const handleCloseAddAddressForm = () => {\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleSaveAddress = async (addressFormValues: AddressFormValues) => {\n        const address = mapAddressFromFormValues(addressFormValues);\n\n        await handleSelectAddress(address);\n\n        try {\n            await createCustomerAddress(address);\n        } catch (error) {\n            if (error instanceof Error) {\n                setCreateCustomerAddressError(error);\n            }\n        }\n\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleCloseErrorModal = () => {\n        setCreateCustomerAddressError(undefined);\n    }\n\n    return (\n        <>\n            <ErrorModal\n                error={createCustomerAddressError}\n                message={\n                    <>\n                        <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                        <TranslatedString id=\"customer.create_address_error\" />\n                    </>\n                }\n                onClose={handleCloseErrorModal}\n                shouldShowErrorCode={false}\n            />\n            <AddressFormModal\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabledFlag}\n                isLoading={isLoading}\n                isOpen={isOpenNewAddressModal}\n                onRequestClose={handleCloseAddAddressForm}\n                onSaveAddress={handleSaveAddress}\n            />\n            <AddressSelect\n                addresses={addresses}\n                onSelectAddress={handleSelectAddress}\n                onUseNewAddress={handleUseNewAddress}\n                placeholderText={<TranslatedString id=\"shipping.choose_shipping_address\" />}\n                selectedAddress={selectedAddress}\n                showSingleLineAddress\n                type={AddressType.Shipping}\n            />\n        </>\n    )\n}\n\nexport default ConsignmentAddressSelector;\n","import React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { IconHelp, TooltipTrigger } from \"@bigcommerce/checkout/ui\";\n\nimport { Tooltip } from \"../ui/tooltip\";\nimport \"./ItemSplitTooltip.scss\";\n\nexport const ItemSplitTooltip: FunctionComponent = () => {\n    return (\n        <TooltipTrigger\n            placement=\"right-start\"\n            tooltip={\n                <Tooltip>\n                    <TranslatedString\n                        id=\"shipping.multishipping_item_split_tooltip_message\"\n                    />\n                </Tooltip>\n            }\n        >\n            <span className=\"item-split-tooltip\" data-test=\"split-item-tooltip\">\n                <IconHelp />\n            </span>\n        </TooltipTrigger>\n    )\n};\n","import React from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconClose } from \"../ui/icon\";\n\nimport { renderItemContent } from \"./ConsignmentLineItemDetail\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface AllocatedItemsListProps {\n    assignedItems: MultiShippingTableData;\n    onUnassignItem(itemToDelete: MultiShippingTableItemWithType): void;\n}\n\nconst AllocatedItemsList = ({ assignedItems, onUnassignItem }: AllocatedItemsListProps) => {\n    return (\n        <div className=\"allocated-line-items\">\n            <h3>\n                <TranslatedString data={{ count: assignedItems.shippableItemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\n                {assignedItems.hasSplitItems && (\n                    <ItemSplitTooltip />\n                )}\n            </h3>\n            <ul className=\"allocated-line-items-list\">\n                {assignedItems.lineItems.map(item => (\n                    <li key={item.id}>\n                        {renderItemContent(item)}\n                        <span data-test={`remove-${item.id.toString()}-button`} onClick={() => onUnassignItem(item)}>\n                            <IconClose />\n                        </span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default AllocatedItemsList;\n","import React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\n\nimport { FormField, TextInput } from \"../ui/form\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface LeftToAllocateItemProps {\n    item: MultiShippingTableItemWithType;\n    error?: string;\n}\n\nconst LeftToAllocateItem: FunctionComponent<LeftToAllocateItemProps> = ({ item, error }: LeftToAllocateItemProps) => {\n    const isMobileView = isMobileViewUI();\n\n    return (\n        <tr>\n            <td className=\"left-to-allocate-item-name-container\">\n                <figure className=\"left-to-allocate-item-figure\">\n                    {item.imageUrl && <img alt={item.name} src={item.imageUrl} />}\n                </figure>\n                <div>\n                    <p className=\"left-to-allocate-item-name\">{item.name}</p>\n                    {item.options?.map(option => (\n                        <p className=\"left-to-allocate-item-option\" key={option.nameId}>{option.name}: {option.value}</p>\n                    ))}\n                </div>\n            </td>\n            {!isMobileView && <td>{item.quantity}</td>}\n            <td>\n                {isMobileView && <TranslatedString data={{ count: item.quantity }} id=\"shipping.multishipping_left_to_allocate_message\" />}\n                <FormField\n                    additionalClassName={error ? \"form-field--error\" : \"\"}\n                    input={({ field }) => <TextInput\n                        {...field}\n                        aria-label={`Quantity of ${item.name}`}\n                        disabled={item.quantity === 0}\n                        id={field.name}\n                        min={0}\n                        type=\"number\"\n                    />}\n                    name={item.id.toString()}\n                />\n            </td>\n        </tr>\n    );\n}\n\nexport default LeftToAllocateItem;\n","import { FormikErrors } from \"formik\";\nimport React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { AllocateItemsModalFormValues } from \"./AllocateItemsModal\";\nimport LeftToAllocateItem from \"./LeftToAllocateItem\";\nimport { MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface LeftToAllocateItemsTableProps {\n    items: MultiShippingTableItemWithType[];\n    formErrors: FormikErrors<AllocateItemsModalFormValues>;\n}\n\nconst LeftToAllocateItemsTable: FunctionComponent<LeftToAllocateItemsTableProps> = ({ items, formErrors }: LeftToAllocateItemsTableProps) => {\n    const isMobileView = isMobileViewUI();\n\n    return (\n        <table className=\"table left-to-allocate-items-table\">\n            <thead>\n                <tr>\n                    <th><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_item\" /></th>\n                    {!isMobileView && <th><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_left_to_allocate\" /></th>}\n                    <th><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_quantity\" /></th>\n                </tr>\n            </thead>\n            <tbody>\n                {items.map(item => (\n                    <LeftToAllocateItem\n                        error={formErrors[item.id.toString()]}\n                        item={item}\n                        key={item.id}\n                    />      \n                ))}\n            </tbody>\n        </table>\n    );\n}\n\nexport default LeftToAllocateItemsTable;\n","import { Consignment, LineItemOption, PhysicalItem } from \"@bigcommerce/checkout-sdk\";\n\nexport enum LineItemType {\n    Physical,\n    Digital,\n    GiftCertificate,\n    Custom,\n}\n\nexport interface MultiShippingTableItem {\n    name: string;\n    options?: LineItemOption[];\n    giftWrapping?: PhysicalItem['giftWrapping'];\n    sku: string;\n    quantity: number;\n    id: string | number;\n    imageUrl?: string;\n}\n\nexport interface MultiShippingTableItemWithType extends MultiShippingTableItem {\n    type: LineItemType;\n}\n\nexport interface MultiShippingTableData {\n    lineItems: MultiShippingTableItemWithType[];\n    hasDigitalItems: boolean;\n    hasSplitItems: boolean;\n    shippableItemsCount: number;\n};\n\nexport interface MultiShippingConsignmentData extends Consignment, MultiShippingTableData {\n    consignmentNumber: number;\n}\n","import { Address, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport { FormikProps } from \"formik\";\nimport React, { FunctionComponent, useMemo } from \"react\";\nimport { number, object } from \"yup\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString, withLanguage, WithLanguageProps } from \"@bigcommerce/checkout/locale\";\nimport { Alert, AlertType, ButtonVariant } from \"@bigcommerce/checkout/ui\";\n\nimport { getAddressContent } from \"../address/SingleLineStaticAddress\";\nimport { withFormikExtended } from \"../common/form\";\nimport { Button } from \"../ui/button\";\nimport { Form } from \"../ui/form\";\nimport { Modal, ModalHeader } from \"../ui/modal\";\n\nimport AllocatedItemsList from \"./AllocatedItemsList\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport LeftToAllocateItemsTable from \"./LeftToAllocateItemsTable\";\nimport { LineItemType, MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingType\";\n\nexport interface AllocateItemsModalFormValues {\n    [key: string]: number;\n}\n\ninterface AllocateItemsModalProps {\n    consignmentNumber: number;\n    isOpen: boolean;\n    onRequestClose?(): void;\n    address: Address;\n    unassignedItems: MultiShippingTableData;\n    assignedItems?: MultiShippingTableData;\n    onAllocateItems(consignmentLineItems: ConsignmentLineItem[]): void;\n    onUnassignItem?(itemToDelete: MultiShippingTableItemWithType): void;\n    isLoading: boolean;\n}\n\nconst AllocateItemsModal: FunctionComponent<AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>> = ({\n    consignmentNumber,\n    isOpen,\n    onRequestClose,\n    address,\n    assignedItems,\n    unassignedItems,\n    setValues,\n    values,\n    dirty,\n    submitForm,\n    errors,\n    onUnassignItem,\n    isLoading,\n}: AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>) => {\n\n    const allocatedOrSelectedItemsMessage = useMemo(() => {\n        const leftItemsTotal = unassignedItems.shippableItemsCount;\n\n        if (values && dirty) {\n            const selectedItems = Object.keys(values).reduce((acc, key) => {\n                if (values[key] > 0) {\n                    acc += values[key];\n                }\n\n                return acc;\n            }, 0);\n\n            return <TranslatedString data={{ count: `${selectedItems}/${leftItemsTotal}` }} id=\"shipping.multishipping_items_selected_message\" />;\n        }\n\n        return <TranslatedString data={{ count: leftItemsTotal }} id=\"shipping.multishipping_item_to_allocate_message\" />;\n    }, [values]);\n\n    const handleSelectAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = item.quantity;\n        });\n        setValues(values);\n    };\n\n    const handleClearAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = 0;\n        });\n        setValues(values);\n    }\n\n    const formErrors = useMemo(() => {\n        const errorKeys = Object.keys(errors);\n\n        return errorKeys.reduce((acc: string[], key: string) => {\n            const error = errors[key];\n\n            if (error) {\n                acc.push(error);\n            }\n\n            return Array.from(new Set(acc));\n        }, []);\n    }, [errors]);\n\n    const hasItemsAssigned = !!assignedItems && assignedItems.lineItems.length > 0 && !!onUnassignItem;\n    const hasUnassignedItems = !!unassignedItems && unassignedItems.lineItems.length > 0;\n\n    const modalFooter = (\n        <>\n            <Button\n                disabled={isLoading}\n                onClick={onRequestClose}\n                variant={ButtonVariant.Secondary}\n            >\n                <TranslatedString id=\"shipping.multishipping_items_allocate_cancel\" />\n            </Button>\n            <Button\n                disabled={!hasItemsAssigned && !dirty}\n                isLoading={isLoading}\n                onClick={submitForm}\n                type=\"submit\"\n                variant={ButtonVariant.Primary}\n            >\n                {hasItemsAssigned \n                    ? <TranslatedString id=\"shipping.multishipping_items_allocate_save\" /> \n                    : <TranslatedString id=\"shipping.multishipping_items_allocate_allocate\" />\n                }\n            </Button>\n        </>\n    );\n\n    return (\n        <Modal\n            additionalModalClassName=\"allocate-items-modal\"\n            footer={modalFooter}\n            header={\n                <>\n                    <ModalHeader>\n                        <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                    </ModalHeader>\n                    <h4>{getAddressContent(address)}</h4>\n                </>\n            }\n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n        > \n            <Form>\n                {formErrors.length > 0 && (\n                    <div className=\"form-errors\">\n                        {formErrors.map((error, index) => (\n                            <Alert key={index} type={AlertType.Error}>{error}</Alert>\n                        ))}\n                    </div>\n                )}\n                {unassignedItems.hasDigitalItems && (\n                            <Alert type={AlertType.Info}>\n                                <TranslatedString id=\"shipping.multishipping_digital_item_no_shipping_banner\" />\n                                </Alert>\n                )}\n                {hasItemsAssigned && (\n                    <AllocatedItemsList assignedItems={assignedItems} onUnassignItem={onUnassignItem} />\n                )}\n                {hasUnassignedItems\n                    ? <>\n                        <div className=\"left-to-allocate-items-table-actions\">\n                            <p>\n                                {allocatedOrSelectedItemsMessage}\n                                {unassignedItems.hasSplitItems && (\n                                    <ItemSplitTooltip />\n                                )}\n                            </p>\n\n                            <div className=\"button-group\">\n                                <a\n                                    data-test=\"clear-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleClearAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_clear_all\" />\n                                </a>\n                                <a\n                                    data-test=\"allocate-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleSelectAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_select_all_items_left\" />\n                                </a>\n                            </div>\n                        </div>\n                        <LeftToAllocateItemsTable\n                            formErrors={errors}\n                            items={unassignedItems.lineItems}\n                        />\n                    </>\n                    : null\n                }\n            </Form>\n        </Modal>\n    )\n}\n\nexport default withLanguage(\n    withFormikExtended<AllocateItemsModalProps & WithLanguageProps, AllocateItemsModalFormValues>({\n        handleSubmit: (values, { props: { onAllocateItems } }) => {\n            const consignmentLineItems = Object.keys(values).filter(key => values[key] > 0).map((lineItemId: string) => ({\n                itemId: lineItemId,\n                quantity: values[lineItemId],\n            }));\n\n            onAllocateItems(consignmentLineItems);\n        },\n        mapPropsToValues: ({ unassignedItems }) => {\n            const values: AllocateItemsModalFormValues = {};\n\n            unassignedItems.lineItems.forEach(item => {\n                values[item.id.toString()] = 0;\n            });\n\n            return values;\n        },\n        enableReinitialize: true,\n        validationSchema: ({ language, unassignedItems }: AllocateItemsModalProps & WithLanguageProps) => {\n            const createItemSchema = (item: MultiShippingTableItemWithType) => {\n                const baseSchema = number()\n                    .required(language.translate('shipping.quantity_required_error'))\n                    .integer(language.translate('shipping.quantity_invalid_error'))\n                    .min(0, language.translate('shipping.quantity_min_error'))\n                    .max(item.quantity, language.translate('shipping.quantity_max_error'))\n\n                if (item.type === LineItemType.Custom) {\n                    return baseSchema\n                        .oneOf([0, item.quantity], language.translate('shipping.custom_item_quantity_error'))\n                }\n\n                return baseSchema;\n            };\n\n            const schemaObject = Object.fromEntries(\n                unassignedItems.lineItems.map((item) => [item.id.toString(), createItemSchema(item)]),\n            );\n\n            return object().shape(schemaObject);\n        },\n        validateOnBlur: true,\n        validateOnChange: false,\n    })(AllocateItemsModal),\n);\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Consignment, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\n\nexport const useDeallocateItem = () => {\n    const {\n        checkoutService: { createConsignments, deleteConsignment },\n    } = useCheckout();\n\n    // this is a workaround to handle removing an item from a consignment\n    // current consignment API does not support removing an item directly - Oct 2024\n\n    const deleteItem = async (consignmentRequest: ConsignmentCreateRequestBody, itemId: string, consignment: Consignment) => {\n        let consignmentIdToBeDeleted: string | undefined = consignment.id;\n\n        if (consignment.lineItemIds.length > 1) {\n            const checkoutResponse = await createConsignments([consignmentRequest]);\n\n            const consignmentsReponse = checkoutResponse.data.getConsignments();\n\n            consignmentIdToBeDeleted = consignmentsReponse?.find((c) =>\n                c.lineItemIds.find((lineItemId) => lineItemId === itemId),\n            )?.id;\n        }\n\n        if (!consignmentIdToBeDeleted) {\n            throw new Error('Unable to find consignment to delete');\n        }\n\n        deleteConsignment(consignmentIdToBeDeleted);\n    }\n\n    return deleteItem;\n}\n","import { LineItem, LineItemOption } from \"@bigcommerce/checkout-sdk\";\n\nconst generateHash = (values: string[]): string => {\n  return btoa(encodeURIComponent(values.join('-')));\n};\n\nconst generateProductOptionsHash = (options: LineItemOption[] | undefined): string => {\n  if (!options) {\n    return '';\n  }\n\n  return generateHash(\n    options.map((option) =>\n      generateHash([\n        option.name,\n        option.nameId.toString(),\n        option.value,\n        option.valueId ? option.valueId.toString() : '',\n      ]),\n    ),\n  );\n};\n\nexport const generateItemHash = (item: LineItem): string => {\n  return generateHash([\n    item.productId.toString(),\n    item.variantId.toString(),\n    item.sku,\n    generateProductOptionsHash(item.options),\n  ]);\n};\n","import { Consignment, LineItemMap } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { LineItemType, MultiShippingConsignmentData, MultiShippingTableData, MultiShippingTableItemWithType } from \"../MultishippingType\";\nimport { generateItemHash } from \"../utils\";\n\ninterface MultiShippingConsignmentItemsHook {\n    unassignedItems: MultiShippingTableData;\n    consignmentList: MultiShippingConsignmentData[];\n}\n\n// TODO: consolidate this from /app/order/removeBundledItems\nfunction removeBundledItems(lineItems: LineItemMap): LineItemMap {\n    return {\n        ...lineItems,\n        physicalItems: lineItems.physicalItems.filter((item) => typeof item.parentId !== 'string'),\n        digitalItems: lineItems.digitalItems.filter((item) => typeof item.parentId !== 'string'),\n    };\n}\n\nconst calculateShippableItemsCount = (items: MultiShippingTableItemWithType[]): number => {\n    return items.reduce((total, item) => total + item.quantity, 0);\n};\n\nconst hasSplitItem = (\n    items: MultiShippingTableItemWithType[],\n    itemHashMap: Map<string, string>,\n  ): boolean => {\n    const processedHashes = new Set<string>();\n  \n    for (const item of items) {\n      const hash = itemHashMap.get(item.id.toString());\n\n      if (!hash) continue;\n  \n      if (processedHashes.has(hash)) {\n        return true;\n      }\n  \n      processedHashes.add(hash);\n    }\n  \n    return false;\n  };\n\nfunction mapConsignmentsItems(\n    lineItems: LineItemMap,\n    consignments: Consignment[],\n): {\n        consignmentList: MultiShippingConsignmentData[];\n        unassignedItems: MultiShippingTableData;\n    } {\n    const unassignedItemsMap = new Map<string, MultiShippingTableItemWithType>();\n    const digitalItemsMap = new Map<string, MultiShippingTableItemWithType>();\n\n    const itemHashMap = new Map<string, string>();\n\n    const consignmentList: MultiShippingConsignmentData[] = [];\n\n    lineItems.physicalItems.forEach((item) => {\n        unassignedItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Physical });\n        itemHashMap.set(item.id.toString(), generateItemHash(item));\n    });\n    lineItems.customItems?.forEach((item) =>\n        unassignedItemsMap.set(item.id, { ...item, type: LineItemType.Custom }),\n    );\n    lineItems.digitalItems.forEach((item) =>\n        digitalItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Digital }),\n    );\n\n    consignments.forEach((consignment, index) => {\n        const consignmentLineItems: MultiShippingTableItemWithType[] = [];\n\n        consignment.lineItemIds.forEach((itemId) => {\n            const item = unassignedItemsMap.get(itemId);\n\n            if (item) {\n                consignmentLineItems.push(item);\n                unassignedItemsMap.delete(itemId);\n            }\n        });\n\n        consignmentList.push({\n            ...consignment,\n            consignmentNumber: index + 1,\n            hasDigitalItems: false,\n            hasSplitItems: hasSplitItem(consignmentLineItems, itemHashMap),\n            shippableItemsCount: calculateShippableItemsCount(consignmentLineItems),\n            lineItems: consignmentLineItems,\n        });\n    });\n\n    const unassignedItemsList = Array.from(unassignedItemsMap.values());\n\n    const unassignedItems: MultiShippingTableData = {\n        lineItems: unassignedItemsList,\n        hasDigitalItems: digitalItemsMap.size > 0,\n        hasSplitItems: hasSplitItem(unassignedItemsList, itemHashMap),\n        shippableItemsCount: calculateShippableItemsCount(unassignedItemsList),\n    };\n\n    return { consignmentList, unassignedItems };\n}\n\nconst defaultMultiShippingConsignmentItems: MultiShippingConsignmentItemsHook = {\n    unassignedItems: {\n        lineItems: [],\n        hasDigitalItems: false,\n        hasSplitItems: false,\n        shippableItemsCount: 0,\n    },\n    consignmentList: [],\n};\n\nexport const useMultiShippingConsignmentItems = (): MultiShippingConsignmentItemsHook => {\n    const { checkoutState: {\n        data: { getCheckout },\n    },\n    } = useCheckout();\n\n    const checkout = getCheckout();\n\n    if (!checkout) {\n        return defaultMultiShippingConsignmentItems;\n    }\n\n    const {\n        cart: { lineItems },\n        consignments,\n    } = checkout;\n\n    const nonBundledLineItems = removeBundledItems(lineItems);\n\n    const { consignmentList, unassignedItems } =\n        mapConsignmentsItems(nonBundledLineItems, consignments);\n\n    return {\n        unassignedItems,\n        consignmentList,\n    };\n};\n","import { ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport React, { FunctionComponent, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { IconChevronDown, IconChevronUp } from \"../ui/icon\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentLineItemDetail from \"./ConsignmentLineItemDetail\";\nimport { AssignItemFailedError, UnassignItemError } from \"./errors\";\nimport { useDeallocateItem } from \"./hooks/useDeallocateItem\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { MultiShippingConsignmentData, MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface ConsignmentLineItemProps {\n    consignmentNumber: number;\n    consignment: MultiShippingConsignmentData;\n    onUnhandledError(error: Error): void;\n    isLoading: boolean;\n}\n\nconst ConsignmentLineItem: FunctionComponent<ConsignmentLineItemProps> = ({ consignmentNumber, consignment, onUnhandledError, isLoading }: ConsignmentLineItemProps) => {\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const [showItems, setShowItems] = useState(true);\n\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n    const { checkoutService: { assignItemsToAddress: assignItem } } = useCheckout();\n    const deleteItem = useDeallocateItem();\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAssignItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        try {\n            await assignItem({\n                address: consignment.address,\n                lineItems: consignmentLineItems,\n            });\n\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        } finally {\n            toggleAllocateItemsModal();\n        }\n    }\n\n    const handleUnassignItems = async (itemToDelete: MultiShippingTableItemWithType) => {\n        try {\n            const consignmentRequest = {\n                address: consignment.address,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: [\n                    {\n                        quantity: itemToDelete.quantity,\n                        itemId: itemToDelete.id,\n                    },\n                ],\n            }\n\n            await deleteItem(consignmentRequest, itemToDelete.id.toString(), consignment);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    }\n\n    const toggleShowItems = () => {\n        setShowItems(!showItems);\n    }\n\n    const isMobileView = isMobileViewUI();\n\n    const itemsCount = consignment.shippableItemsCount;\n\n    return (\n        <div>\n            <AllocateItemsModal\n                address={consignment.shippingAddress}\n                assignedItems={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                isOpen={isOpenAllocateItemsModal}\n                onAllocateItems={handleAssignItems}\n                onRequestClose={toggleAllocateItemsModal}\n                onUnassignItem={handleUnassignItems}\n                unassignedItems={unassignedItems}\n            />\n            <div className=\"consignment-line-item-header\">\n                <div>\n                    <h3>\n                        <TranslatedString data={{ count: itemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\n                    </h3>\n\n                    {consignment.hasSplitItems && (\n                        <ItemSplitTooltip />\n                    )}\n                    \n                    <a\n                        className=\"expand-items-button\"\n                        data-test=\"expand-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleShowItems)}\n                    >\n                        {showItems ? (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_hide_items_message\" />}\n                                <IconChevronUp />\n                            </>\n                        ) : (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_show_items_message\" />}\n                                <IconChevronDown />\n                            </>\n                        )}\n                    </a>\n                </div>\n                <a\n                    data-test=\"reallocate-items-button\"\n                    href=\"#\"\n                    onClick={preventDefault(toggleAllocateItemsModal)}\n                >\n                    <TranslatedString id=\"shipping.multishipping_item_reallocated_message\" />\n                </a>\n            </div>\n            {showItems\n                ? <ConsignmentLineItemDetail lineItems={consignment.lineItems} />\n                : null\n            }       \n        </div>\n    )\n}\n\nexport default ConsignmentLineItem;\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { RadioInput } from '@bigcommerce/checkout/ui';\n\nimport { ShopperCurrency } from '../../currency';\n\ninterface MultiShippingOptionsListItemProps {\n    consignmentId: string;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n    handleSelect: (consignmentId: string, shippingOptionId: string) => void;\n}\n\nexport const MultiShippingOptionsListItem: FunctionComponent<\n    MultiShippingOptionsListItemProps\n> = ({ consignmentId, selectedShippingOptionId, shippingOption, handleSelect }) => {\n    const label = (\n        <>\n            {`${shippingOption.description} - `}\n            <ShopperCurrency amount={shippingOption.cost} />\n        </>\n    );\n\n    const selectThisOption = () => {\n        handleSelect(consignmentId, shippingOption.id);\n    };\n\n    return (\n        <ul className=\"shipping-option-item\">\n            <RadioInput\n                checked={selectedShippingOptionId === shippingOption.id}\n                id={`shippingOption-${consignmentId}-${shippingOption.id}`}\n                key={`key-${consignmentId}-${shippingOption.id}`}\n                label={label}\n                name={`${consignmentId}-shippingMethod`}\n                onClick={selectThisOption}\n                readOnly\n                value={shippingOption.id}\n            />\n        </ul>\n    );\n};\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { MultiShippingOptionsListItem } from './MultiShippingOptionsListItem';\n\ninterface MultiShippingOptionsListV2Props {\n    consignmentId: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst MultiShippingOptionsListV2: FunctionComponent<MultiShippingOptionsListV2Props> = ({\n    consignmentId,\n    isLoading,\n    shippingOptions,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            {shippingOptions.map((shippingOption) => (\n                <MultiShippingOptionsListItem\n                    consignmentId={consignmentId}\n                    handleSelect={onSelectedOption}\n                    key={shippingOption.id}\n                    selectedShippingOptionId={selectedShippingOptionId}\n                    shippingOption={shippingOption}\n                />\n            ))}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(MultiShippingOptionsListV2);\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps &\n    WithCheckoutShippingOptionsProps &\n    AnalyticsContextProps;\n\nconst getShippingOptionIds = ({ consignments }: ShippingOptionsFormProps) => {\n    const shippingOptionIds: { [id: string]: string } = {};\n\n    (consignments || []).forEach((consignment) => {\n        shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n            ? consignment.selectedShippingOption.id\n            : '';\n    });\n\n    return { shippingOptionIds };\n};\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate({ shippingFormRenderTimestamp }: ShippingOptionsFormProps): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions,\n            shippingFormRenderTimestamp: newShippingFormRenderTimestamp,\n            setValues,\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n\n        if (newShippingFormRenderTimestamp !== shippingFormRenderTimestamp) {\n            setValues(getShippingOptionIds(this.props));\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            isMultiShippingMode={isMultiShippingMode}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(\n    withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n        handleSubmit: noop,\n        mapPropsToValues: getShippingOptionIds,\n    })(ShippingOptionsForm),\n);\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isInitialValueLoaded: boolean;\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n    shippingFormRenderTimestamp?: number;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nexport const isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, isUpdatingAddress?: boolean) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props.isUpdatingAddress),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\n\nimport MultiShippingOptionsListV2 from './MultiShippingOptionsList';\nimport { isLoadingSelector } from './ShippingOptions';\n\ninterface MultiShippingOptionsV2Props {\n    consignment: Consignment;\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    resetErrorConsignmentNumber(): void;\n}\n\nexport const MultiShippingOptions = ({\n    consignment,\n    isLoading,\n    resetErrorConsignmentNumber,\n    shippingQuoteFailedMessage,\n}: MultiShippingOptionsV2Props) => {\n    const { checkoutService, checkoutState } = useCheckout();\n\n    const selectShippingOption = async (consignmentId: string, shippingOptionId: string) => {\n        await checkoutService.selectConsignmentShippingOption(consignmentId, shippingOptionId);\n        resetErrorConsignmentNumber();\n    };\n    const isLoadingOptions = isLoadingSelector(checkoutState, isLoading)(consignment.id);\n\n    return (\n        <div>\n            <h3 className=\"shipping-option-header\">\n                <TranslatedString id=\"shipping.shipping_method_label\" />\n            </h3>\n            {(!consignment.availableShippingOptions ||\n                !consignment.availableShippingOptions.length) && (\n                    <Alert type={AlertType.Error}>{shippingQuoteFailedMessage}</Alert>\n                )}\n            {Boolean(consignment.availableShippingOptions) &&\n                consignment.availableShippingOptions && (\n                    <MultiShippingOptionsListV2\n                        consignmentId={consignment.id}\n                        isLoading={isLoadingOptions}\n                        onSelectedOption={selectShippingOption}\n                        selectedShippingOptionId={\n                            consignment.selectedShippingOption &&\n                            consignment.selectedShippingOption.id\n                        }\n                        shippingOptions={consignment.availableShippingOptions}\n                    />\n                )}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { IconClose, IconSize } from \"../ui/icon\";\n\n\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport ConsignmentLineItem from './ConsignmentLineItem';\nimport { MultiShippingConsignmentData } from './MultishippingType';\nimport { MultiShippingOptions } from './shippingOption/MultiShippingOptions';\n\nexport interface ConsignmentListItemProps {\n    consignment: MultiShippingConsignmentData;\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst ConsignmentListItem: FunctionComponent<ConsignmentListItemProps> = ({\n    consignment,\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    shippingQuoteFailedMessage,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n}: ConsignmentListItemProps) => {\n\n    const { checkoutService: { deleteConsignment } } = useCheckout();\n\n    const handleClose = async () => {\n        await deleteConsignment(consignment.id);\n        resetErrorConsignmentNumber();\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className='consignment-header'>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n                <a\n                    className=\"delete-consignment\"\n                    data-test=\"delete-consignment-button\"\n                    href=\"#\"\n                    onClick={preventDefault(handleClose)}\n                >\n                    <IconClose size={IconSize.Small} />\n                </a>\n            </div>\n            <ConsignmentAddressSelector\n                consignment={consignment}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={consignment.shippingAddress}\n            />\n            <ConsignmentLineItem\n                consignment={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n            />\n            <MultiShippingOptions\n                consignment={consignment}\n                isLoading={isLoading}\n                resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n            />\n        </div>\n    );\n};\n\nexport default ConsignmentListItem;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\n\nexport interface ShippingFormFooterProps {\n    shouldShowOrderComments: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    cartHasChanged: boolean;\n}\n\nconst MultiShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    shouldShowOrderComments,\n    shouldDisableSubmit,\n    isLoading,\n    cartHasChanged,\n}) => {\n    return (\n        <Form>\n            {cartHasChanged && (\n                <Alert type={AlertType.Error}>\n                    <strong>\n                        <TranslatedString id=\"shipping.cart_change_error\" />\n                    </strong>\n                </Alert>\n            )}\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default MultiShippingFormFooter;\n","import { Consignment, ConsignmentCreateRequestBody, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport { find } from \"lodash\";\nimport React, { useMemo, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { EMPTY_ARRAY } from \"../common/utility\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport { AssignItemFailedError } from \"./errors\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface NewConsignmentProps {\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    setIsAddShippingDestination: React.Dispatch<React.SetStateAction<boolean>>;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst NewConsignment = ({\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n    setIsAddShippingDestination,\n}: NewConsignmentProps) => {\n    const [consignmentRequest, setConsignmentRequest] = useState<ConsignmentCreateRequestBody | undefined>();\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n\n    const {\n        checkoutState: {\n            data: { getShippingCountries, getConsignments: getPreviousConsignments },\n        },\n        checkoutService: { assignItemsToAddress: assignItem, selectConsignmentShippingOption },\n    } = useCheckout();\n\n    const selectedAddress = useMemo(() => {\n        if (!consignmentRequest?.address) {\n            return undefined;\n        }\n\n        const countries = getShippingCountries() || EMPTY_ARRAY;\n        const country = find(countries, { code: consignmentRequest.address.countryCode });\n\n        return {\n            ...consignmentRequest.address,\n            country: country ? country.name : consignmentRequest.address.countryCode,\n        };\n    }, [consignmentRequest]);\n\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAllocateItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        let currentConsignments: Consignment[] | undefined;\n\n        if (!selectedAddress) {\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await assignItem({\n                address: selectedAddress,\n                lineItems: consignmentLineItems,\n            });\n\n            currentConsignments = getConsignments();\n        } catch (error) {\n            if (error instanceof AssignItemFailedError) {\n                onUnhandledError(error);\n            }\n        } finally {\n            toggleAllocateItemsModal();\n            setIsAddShippingDestination(false);\n            resetErrorConsignmentNumber();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        }\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className='consignment-header'>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n            </div>\n            <ConsignmentAddressSelector\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={selectedAddress}\n                setConsignmentRequest={setConsignmentRequest}\n            />\n            {selectedAddress && (<>\n                <AllocateItemsModal\n                    address={selectedAddress}\n                    consignmentNumber={consignmentNumber}\n                    isLoading={isLoading}\n                    isOpen={isOpenAllocateItemsModal}\n                    onAllocateItems={handleAllocateItems}\n                    onRequestClose={toggleAllocateItemsModal}\n                    unassignedItems={unassignedItems}\n                />\n                <div className=\"new-consignment-line-item-header\">\n                    <h3><TranslatedString id=\"shipping.multishipping_no_item_allocated_message\" /></h3>\n                    <a\n                        data-test=\"allocate-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleAllocateItemsModal)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_allocate_items\" />\n                    </a>\n                </div>\n            </>\n            )}\n        </div>\n    )\n}\n\nexport default NewConsignment;\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { every } from 'lodash';\n\nexport default function isSelectedShippingOptionValid(consignments: Consignment[]): boolean {\n    if (!consignments.length) {\n        return false;\n    }\n\n    return every(\n        consignments,\n        (consignment) =>\n        (consignment.availableShippingOptions &&\n            consignment.availableShippingOptions.filter(\n                ({ id }) => id === consignment.selectedShippingOption?.id,\n            ).length)\n    );\n}\n","import React, { FunctionComponent, useMemo, useState } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\n\nimport { withFormikExtended } from '../common/form';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { Button, ButtonVariant } from '../ui/button';\n\nimport ConsignmentListItem from './ConsignmentListItem';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport { useMultiShippingConsignmentItems } from './hooks/useMultishippingConsignmentItems';\nimport MultiShippingFormFooter from './MultiShippingFormFooter';\nimport { MultiShippingConsignmentData } from './MultishippingType';\nimport './MultiShippingForm.scss';\nimport NewConsignment from './NewConsignment';\nimport isSelectedShippingOptionValid from './isSelectedShippingOptionValid';\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport interface MultiShippingFormProps {\n    cartHasChanged: boolean;\n    customerMessage: string;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: MultiShippingFormValues): void;\n}\n\nconst MultiShippingForm: FunctionComponent<MultiShippingFormProps> = ({\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    cartHasChanged,\n}: MultiShippingFormProps) => {\n    const [errorConsignmentNumber, setErrorConsignmentNumber] = useState<number | undefined>();\n\n    const {\n        checkoutState: {\n            data: { getConsignments, getConfig },\n        },\n    } = useCheckout();\n    const { unassignedItems: { lineItems: unassignedLineItems, shippableItemsCount }, consignmentList } = useMultiShippingConsignmentItems();\n\n    const consignments = getConsignments() || EMPTY_ARRAY;\n    const config = getConfig();\n\n    const [isAddShippingDestination, setIsAddShippingDestination] = useState(\n        consignments.length === 0,\n    );\n\n    const isEveryConsignmentHasShippingOption = hasSelectedShippingOptions(consignments);\n    const shouldDisableSubmit = useMemo(() => {\n        return isLoading || !!unassignedLineItems.length || !isEveryConsignmentHasShippingOption || !isSelectedShippingOptionValid(consignments);\n    }, [isLoading, consignments]);\n\n    if (!config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments: shouldShowOrderComments,\n            shippingQuoteFailedMessage,\n        },\n    } = config;\n\n    const handleAddShippingDestination = () => {\n        if (!isAddShippingDestination && !isEveryConsignmentHasShippingOption) {\n            const errorConsignmentIndex = consignments.findIndex(\n                (consignment) => !consignment.selectedShippingOption,\n            );\n\n            if (errorConsignmentIndex === -1) {\n                setIsAddShippingDestination(true);\n\n                return;\n            }\n\n            setErrorConsignmentNumber(errorConsignmentIndex + 1);\n        } else if (isAddShippingDestination) {\n            setErrorConsignmentNumber(consignments.length + 1);\n        } else {\n            setErrorConsignmentNumber(undefined);\n            setIsAddShippingDestination(true);\n        }\n    };\n\n    const hasUnassignedItems = shippableItemsCount > 0;\n\n    const renderAllocatedBanner = (shippableItemsCount: number): React.JSX.Element => {\n        if (shippableItemsCount > 0) {\n            return <Alert type={AlertType.Info}>\n                <TranslatedString data={{ count: shippableItemsCount }} id=\"shipping.multishipping_item_to_allocate_message\" />\n            </Alert>;\n        }\n\n        return <Alert type={AlertType.Success}>\n            <TranslatedString id=\"shipping.multishipping_all_items_allocated_message\" />\n        </Alert>;\n    }\n    const resetErrorConsignmentNumber = () => {\n        setErrorConsignmentNumber(undefined);\n    };\n\n    return (\n        <>\n            {renderAllocatedBanner(shippableItemsCount)}\n            {consignmentList.map((consignment: MultiShippingConsignmentData) => (\n                <ConsignmentListItem\n                    consignment={consignment}\n                    consignmentNumber={consignment.consignmentNumber}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    key={consignment.id}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n                />\n            ))}\n            {isAddShippingDestination && (\n                <NewConsignment\n                    consignmentNumber={consignments.length === 0 ? 1 : (consignments.length + 1)}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    setIsAddShippingDestination={setIsAddShippingDestination}\n                />)\n            }\n            {hasUnassignedItems &&\n                <Button className='add-consignment-button' onClick={handleAddShippingDestination} variant={ButtonVariant.Secondary}>\n                    <TranslatedString id=\"shipping.multishipping_add_new_destination\" />\n                </Button>\n            }\n            {Boolean(errorConsignmentNumber) && (\n                <div className=\"form-field--error\">\n                    <span className=\"form-inlineMessage\">\n                        <TranslatedString\n                            data={{ consignmentNumber: errorConsignmentNumber }}\n                            id=\"shipping.multishipping_incomplete_consignment_error\"\n                        />\n                    </span>\n                </div>\n            )}\n            <MultiShippingFormFooter\n                cartHasChanged={cartHasChanged}\n                isLoading={isLoading}\n                shouldDisableSubmit={shouldDisableSubmit}\n                shouldShowOrderComments={shouldShowOrderComments}\n            />\n        </>\n    );\n}\n\nexport default withLanguage(\n    withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import React, { FunctionComponent } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedLink, TranslatedString } from \"@bigcommerce/checkout/locale\";\n\ninterface MultiShippingGuestFormProps {\n    onSignIn(): void;\n    onCreateAccount(): void;\n}\n\nconst MultiShippingGuestForm: FunctionComponent<MultiShippingGuestFormProps> = ({\n    onSignIn,\n    onCreateAccount\n}: MultiShippingGuestFormProps) => {\n    return (\n        <div className=\"checkout-step-info\">\n            <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n            <a\n                data-test=\"shipping-sign-in-link\"\n                href=\"#\"\n                onClick={preventDefault(onSignIn)}\n            >\n                <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n            </a>{' '}\n            <TranslatedLink\n                id=\"shipping.multishipping_guest_create\"\n                onClick={onCreateAccount}\n            />\n        </div>\n    )\n};\n\nexport default MultiShippingGuestForm;\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, MutableRefObject } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    countries?: Country[];\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    paypalFastlaneShippingComponentRef: MutableRefObject<PayPalFastlaneAddressComponentRef>;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        formFields,\n        isLoading,\n        onFieldChange,\n        countries,\n        paypalFastlaneShippingComponentRef\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponentRef.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponentRef.current.showAddressSelector();\n\n            if (selectedAddress) {\n                props.onAddressSelect({\n                    ...selectedAddress,\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                                type={AddressType.Shipping}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions\n} from '@bigcommerce/checkout-sdk';\nimport React, {FC, useEffect, useRef, useState} from 'react';\n\nimport {\n    isPayPalCommerceFastlaneMethod,\n    isPayPalFastlaneMethod,\n    PayPalFastlaneShippingAddressForm,\n    usePayPalFastlaneAddress,\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId?: string,\n    shippingAddress?:  Address,\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[],\n    googleMapsApiKey?: string;\n    handleFieldChange(fieldName: string, value: string): void,\n    onAddressSelect(address: Address): void;\n}\n\ninterface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        addresses,\n        handleFieldChange,\n        isLoading\n    } = props;\n    const [isLoadingStrategy, setIsLoadingStrategyStrategy] = useState<boolean>(true);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n    const fastlaneOptions = (provider: string) => {\n        return {\n            [provider]: {\n                onPayPalFastlaneAddressChange: (\n                    showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n                ) => {\n                    paypalFastlaneShippingComponent.current.showAddressSelector =\n                        showPayPalFastlaneAddressSelector;\n                },\n            },\n        };\n    }\n\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(\n        methodId,\n    )\n        ? fastlaneOptions('paypalcommercefastlane')\n        : fastlaneOptions('braintreefastlane');\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...initializationOptions,\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n\n        setIsLoadingStrategyStrategy(false);\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoadingStrategy || isLoading}>\n            {methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm ? (\n                <PayPalFastlaneShippingAddressForm\n                    address={shippingAddress}\n                    countries={countries}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initialize}\n                    isLoading={isLoadingStrategy}\n                    methodId={methodId}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={onFieldChange}\n                    onUnhandledError={onUnhandledError}\n                    paypalFastlaneShippingComponentRef={paypalFastlaneShippingComponent}\n                />\n            ) : (\n                <ShippingAddressForm\n                    address={shippingAddress}\n                    addresses={addresses}\n                    consignments={props.consignments}\n                    countries={countries}\n                    countriesWithAutocomplete={props.countriesWithAutocomplete}\n                    formFields={formFields}\n                    googleMapsApiKey={props.googleMapsApiKey}\n                    isFloatingLabelEnabled={props.isFloatingLabelEnabled}\n                    isLoading={isLoadingStrategy}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={handleFieldChange}\n                    onUseNewAddress={props.onUseNewAddress}\n                    shouldShowSaveAddress={props.shouldShowSaveAddress}\n                />\n            )}\n        </LoadingOverlay>\n    );\n};","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport { isPayPalFastlaneMethod } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress) {\n        return (\n            <PayPalFastlaneShippingAddress\n                {...props}\n                handleFieldChange={handleFieldChange}\n                methodId={methodId}\n                shippingAddress={shippingAddress}\n            />\n        )\n    }\n\n    if (methodId === 'amazonpay' && shippingAddress) {\n        return (\n            <AmazonPayShippingAddress\n                {...props}\n                shippingAddress={shippingAddress}\n            />\n        );\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    shippingFormRenderTimestamp?: number;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isInitialValueLoaded,\n    isLoading,\n    shippingFormRenderTimestamp,\n}) => {\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport isSelectedShippingOptionValid from './isSelectedShippingOptionValid';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shippingAutosaveDelay?: number;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    shippingFormRenderTimestamp?: number;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n    const methodIdsWithoutCustomValidation: string[] = [\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    componentDidUpdate({ shippingFormRenderTimestamp }: SingleShippingFormProps) {\n        const {\n            shippingFormRenderTimestamp: newShippingFormRenderTimestamp,\n            setValues,\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n            values,\n            setFieldValue,\n        } = this.props;\n\n        const stateOrProvinceCodeFormField = getFields(values && values.shippingAddress?.countryCode).find(\n            ({ name }) => name === 'stateOrProvinceCode',\n        );\n\n        // Workaround for a bug found during manual testing:\n        // When the shipping step first loads, the `stateOrProvinceCode` field may not be there.\n        // It later appears with an empty value if the selected country has states/provinces.\n        // To address this, we manually set `stateOrProvinceCode` in Formik.\n        if (\n            stateOrProvinceCodeFormField &&\n            shippingAddress?.stateOrProvinceCode &&\n            !values.shippingAddress?.stateOrProvinceCode\n        ) {\n            setFieldValue('shippingAddress.stateOrProvinceCode', shippingAddress.stateOrProvinceCode);\n        }\n\n        // This is for executing extension command, `ReRenderShippingForm`.\n        if (newShippingFormRenderTimestamp !== shippingFormRenderTimestamp) {\n            setValues({\n                billingSameAsShipping: isBillingSameAsShipping,\n                orderComment: customerMessage,\n                shippingAddress: mapAddressToFormValues(\n                    getFields(shippingAddress && shippingAddress.countryCode),\n                    shippingAddress,\n                ),\n            });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n            shippingFormRenderTimestamp,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments) || !isSelectedShippingOptionValid(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            shouldHaveCustomValidation(methodId)\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport MultiShippingGuestForm from './MultiShippingGuestForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n    addresses,\n    cartHasChanged,\n      consignments,\n      countries,\n      countriesWithAutocomplete,\n      onCreateAccount,\n      customerMessage,\n      deinitialize,\n      deleteConsignments,\n      getFields,\n      googleMapsApiKey,\n      initialize,\n      isBillingSameAsShipping,\n      isGuest,\n      isLoading,\n      isMultiShippingMode,\n      methodId,\n      onMultiShippingSubmit,\n      onSignIn,\n      onSingleShippingSubmit,\n    onUnhandledError,\n      shippingAddress,\n      shouldShowOrderComments,\n      shouldShowSaveAddress,\n      signOut,\n      updateAddress,\n      isShippingStepPending,\n      isFloatingLabelEnabled,\n    isInitialValueLoaded,\n  }: ShippingFormProps & WithLanguageProps) => {\n\n    const {\n        extensionState: { shippingFormRenderTimestamp },\n    } = useExtensions();\n\n    const getMultiShippingForm = () => {\n        if (isGuest) {\n            return (\n                <MultiShippingGuestForm onCreateAccount={onCreateAccount} onSignIn={onSignIn} />\n            );\n        }\n\n        return <MultiShippingForm\n            cartHasChanged={cartHasChanged}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            isLoading={isLoading}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n        />;\n    };\n\n    return isMultiShippingMode ? (\n        getMultiShippingForm()\n    ) : (\n        <SingleShippingForm\n            addresses={addresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, memo, useState } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ConfirmationModal } from '@bigcommerce/checkout/ui';\n\nimport { Legend } from '../ui/form';\nimport './ShippingHeader.scss';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n    cartHasPromotionalItems?: boolean;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n    cartHasPromotionalItems,\n}) => {\n    const [isSingleShippingConfirmationModalOpen, setIsSingleShippingConfirmationModalOpen] = useState(false);\n    const [isMultiShippingUnavailableModalOpen, setIsMultiShippingUnavailableModalOpen] = useState(false);\n\n    const handleShipToSingleConfirmation = () => {\n        setIsSingleShippingConfirmationModalOpen(false);\n        onMultiShippingChange();\n    }\n\n    const showConfirmationModal = shouldShowMultiShipping && isMultiShippingMode;\n    const showMultiShippingUnavailableModal = shouldShowMultiShipping && !isMultiShippingMode && cartHasPromotionalItems;\n\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n            <div className={classNames(['form-legend-container', 'shipping-header'])}>\n                <Legend testId=\"shipping-address-heading\">\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {showConfirmationModal && (\n                    <>\n                        <ConfirmationModal\n                            action={handleShipToSingleConfirmation}\n                            actionButtonLabel={<TranslatedString id=\"common.proceed_action\" />}\n                            headerId=\"shipping.ship_to_single_action\"\n                            isModalOpen={isSingleShippingConfirmationModalOpen}\n                            messageId=\"shipping.ship_to_single_message\"\n                            onRequestClose={() => setIsSingleShippingConfirmationModalOpen(false)}\n                        />\n                        <a\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsSingleShippingConfirmationModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_single\" />\n                        </a>\n                    </>\n                )}\n                {showMultiShippingUnavailableModal && (\n                    <>\n                        <ConfirmationModal\n                            action={() => setIsMultiShippingUnavailableModalOpen(false)}\n                            actionButtonLabel={<TranslatedString id=\"common.back_action\" />}\n                            headerId=\"shipping.multishipping_unavailable_action\"\n                            isModalOpen={isMultiShippingUnavailableModalOpen}\n                            messageId=\"shipping.multishipping_unavailable_message\"\n                            onRequestClose={() => setIsMultiShippingUnavailableModalOpen(false)}\n                        />\n                        <a\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsMultiShippingUnavailableModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_multi\" />\n                        </a>\n                    </>\n                )}\n                {!showConfirmationModal && !showMultiShippingUnavailableModal && shouldShowMultiShipping && (\n                    <a\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(\n    country: string,\n    state: string,\n): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n            const country = availableShippingList?.find(country => country.code === address.country)?.name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { withFormikExtended } from '../../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isInitialValueLoaded: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton, ConfirmationModal } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport hasPromotionalItems from './hasPromotionalItems';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    cartHasPromotionalItems: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    shouldRenderWhileLoading: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    isMultiShippingUnavailableModalOpen: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            isMultiShippingUnavailableModalOpen: false,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadBillingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n            cartHasPromotionalItems,\n            isMultiShippingMode,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\n\n            if (cartHasPromotionalItems && isMultiShippingMode) {\n                this.setState({ isMultiShippingUnavailableModalOpen: true });\n            }\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            step,\n            isFloatingLabelEnabled,\n            shouldRenderStripeForm,\n            shouldRenderWhileLoading,\n            cartHasPromotionalItems,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            isMultiShippingUnavailableModalOpen,\n        } = this.state;\n\n        const handleSwitchToSingleShipping = async () => {\n            this.setState({ isMultiShippingUnavailableModalOpen: false });\n            await this.handleMultiShippingModeSwitch();\n        }\n\n        if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\n                <div className=\"checkout-form\">\n                    <ConfirmationModal \n                        action={handleSwitchToSingleShipping}\n                        actionButtonLabel={<TranslatedString id=\"common.ok_action\" />}\n                        headerId=\"shipping.multishipping_unavailable_action\"\n                        isModalOpen={isMultiShippingUnavailableModalOpen}\n                        messageId=\"shipping.checkout_switched_to_single_shipping\"\n                        shouldShowCloseButton={false}\n                    />\n                    <ShippingHeader\n                        cartHasPromotionalItems={cartHasPromotionalItems}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n            deleteConsignments,\n        } = this.props;\n\n        try {\n            this.setState({ isInitializing: true });\n\n            if (isMultiShippingMode && consignments.length) {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            }\n            else {\n                await deleteConsignments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n            isDeletingConsignment,\n            isLoadingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress() ||\n        isDeletingConsignment() ||\n        isLoadingCheckout();\n\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings.providerWithCustomCheckout,\n    );\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        cartHasPromotionalItems: hasPromotionalItems(cart),\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout,\n        shippingAddress,\n        shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { noop } from 'lodash';\nimport React, { ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize, ButtonVariant } from '../button';\n\nimport Modal from './Modal';\nimport ModalHeader from './ModalHeader';\n\ninterface ConfirmationModalProps {\n    headerId: string;\n    messageId: string;\n    isModalOpen: boolean;\n    onRequestClose?: () => void;\n    action: () => void;\n    actionButtonLabel?: ReactNode;\n    shouldShowCloseButton?: boolean;\n}\n\nconst ConfirmationModal = ({\n    headerId,\n    messageId,\n    isModalOpen,\n    action,\n    actionButtonLabel,\n    onRequestClose = noop,\n    shouldShowCloseButton = true,\n}: ConfirmationModalProps) => {\n    return (\n        <Modal\n            additionalModalClassName=\"modal--confirm\"\n            footer={\n                <Button onClick={action} size={ButtonSize.Small} variant={ButtonVariant.Primary}>\n                    {actionButtonLabel ?? <TranslatedString id=\"common.confirm_action\" />}\n                </Button>\n            }\n            header={\n                <ModalHeader>\n                    <span aria-live=\"assertive\" role=\"alert\">\n                        <TranslatedString id={headerId} />\n                    </span>\n                </ModalHeader>\n            }\n            isOpen={isModalOpen}\n            onRequestClose={onRequestClose}\n            shouldShowCloseButton={shouldShowCloseButton}\n        >\n            <p aria-live=\"assertive\" role=\"alert\">\n                <TranslatedString id={messageId} />\n            </p>\n        </Modal>\n    );\n};\n\nexport default ConfirmationModal;\n"],"names":["height","viewBox","width","xmlns","d","children","closeButtonLabel","footer","header","additionalHeaderClassName","additionalBodyClassName","additionalModalClassName","onRequestClose","noop","shouldShowCloseButton","rest","handleClose","useCallback","event","ariaHideApp","bodyOpenClassName","className","base","afterOpen","beforeClose","closeTimeoutMS","overlayClassName","shouldCloseOnEsc","shouldCloseOnOverlayClick","href","onClick","preventDefault","Boolean","ButtonVariant","ButtonSize","getClassName","props","isFullWidth","isLoading","size","variant","Primary","Secondary","Action","Small","Tiny","Large","disabled","testId","type","additionalClassName","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","AmazonPay","BraintreeAcceleratedCheckout","PayPalCommerceAcceleratedCheckout","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","hasPromotionalItems","cart","lineItems","digitalItems","physicalItems","filter","item","addedByPromotion","length","withFormikExtended","OriginalComponent","DecoratedComponent","resetForm","isInitialValueLoaded","initialValues","previousIsInitialValueLoadedRef","useRef","useEffect","current","values","displayName","name","SaveAddressForm","withLanguage","handleSubmit","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","A","shouldShowSaveAddress","Button","TranslatedString","id","isOpen","onAfterOpen","addressFormProps","Modal","ModalHeader","data","message","getLanguageService","translate","title","AssignItemInvalidAddressError","prototype","CustomError","AssignItemFailedError","setRecommendedOrMissingShippingOption","previousConsignment","currentConsignments","selectConsignmentShippingOption","previousShippingOptions","Map","map","consignment","selectedShippingOption","previousShippingOptionId","get","recommendedOption","availableShippingOptions","find","option","isRecommended","onUnhandledError","selectedAddress","setConsignmentRequest","useState","isOpenNewAddressModal","setIsOpenNewAddressModal","createCustomerAddressError","setCreateCustomerAddressError","getShippingCountries","getCustomer","getConfig","getPreviousConsignments","checkoutService","updateConsignment","createCustomerAddress","customer","isFloatingLabelEnabledFlag","addresses","handleSelectAddress","address","isValidAddress","shippingAddress","itemId","quantity","getConsignments","Error","ErrorModal","error","onClose","shouldShowErrorCode","addressFormValues","mapAddressFromFormValues","AddressSelect","onSelectAddress","onUseNewAddress","placeholderText","showSingleLineAddress","AddressType","Shipping","ItemSplitTooltip","TooltipTrigger","placement","tooltip","Tooltip","IconHelp","assignedItems","onUnassignItem","count","shippableItemsCount","hasSplitItems","key","toString","IconClose","isMobileView","imageUrl","alt","src","options","nameId","value","FormField","input","field","TextInput","min","items","formErrors","LineItemType","onAllocateItems","Object","keys","lineItemId","unassignedItems","forEach","enableReinitialize","createItemSchema","baseSchema","required","integer","max","Custom","oneOf","schemaObject","fromEntries","shape","validateOnBlur","validateOnChange","consignmentNumber","setValues","dirty","submitForm","errors","allocatedOrSelectedItemsMessage","useMemo","leftItemsTotal","selectedItems","reduce","acc","push","Array","from","Set","hasItemsAssigned","hasUnassignedItems","modalFooter","index","Alert","hasDigitalItems","Info","UnassignItemError","generateHash","btoa","encodeURIComponent","join","calculateShippableItemsCount","total","hasSplitItem","itemHashMap","processedHashes","hash","has","add","mapConsignmentsItems","consignments","unassignedItemsMap","digitalItemsMap","consignmentList","set","Physical","productId","variantId","sku","valueId","generateItemHash","customItems","Digital","consignmentLineItems","lineItemIds","delete","unassignedItemsList","defaultMultiShippingConsignmentItems","useMultiShippingConsignmentItems","getCheckout","nonBundledLineItems","parentId","removeBundledItems","isOpenAllocateItemsModal","setIsOpenAllocateItemsModal","showItems","setShowItems","assignItem","deleteItem","createConsignments","deleteConsignment","consignmentRequest","consignmentIdToBeDeleted","checkoutResponse","consignmentsReponse","c","useDeallocateItem","toggleAllocateItemsModal","itemsCount","itemToDelete","IconChevronUp","IconChevronDown","ConsignmentLineItemDetail","MultiShippingOptionsListItem","consignmentId","selectedShippingOptionId","shippingOption","handleSelect","label","description","ShopperCurrency","amount","cost","RadioInput","checked","readOnly","memo","shippingOptions","onSelectedOption","getShippableLineItems","result","i","isNil","concat","lineItemIndex","splitItems","includes","findConsignment","splitItem","getRecommendedShippingOption","ShippingOptionListItem","isMultiShippingMode","isSelected","renderLabel","StaticShippingOption","displayAdditionalInformation","method","Extension","region","ChecklistItem","htmlId","inputName","Checklist","defaultSelectedItemId","onSelect","getShippingOptionIds","shippingOptionIds","selectDefaultShippingOptions","this","selectShippingOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","shippingFormRenderTimestamp","analyticsTracker","shouldShowShippingOptions","newShippingFormRenderTimestamp","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isUpdatingAddress","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","withCheckout","checkoutState","getCart","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","MultiShippingOptions","resetErrorConsignmentNumber","shippingQuoteFailedMessage","isLoadingOptions","MultiShippingOptionsList","shippingOptionId","shouldShowOrderComments","shouldDisableSubmit","cartHasChanged","OrderComments","setIsAddShippingDestination","code","isSelectedShippingOptionValid","every","onSubmit","orderComment","errorConsignmentNumber","setErrorConsignmentNumber","unassignedLineItems","isAddShippingDestination","isEveryConsignmentHasShippingOption","hasSelectedShippingOptions","Success","renderAllocatedBanner","errorConsignmentIndex","findIndex","onSignIn","onCreateAccount","TranslatedLink","onChange","labelContent","CheckboxFormField","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","Fieldset","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","paypalFastlaneShippingComponentRef","localizeAddress","hideContentWhenLoading","localizedProvince","localizedCountry","PoweredByPayPalFastlaneLabel","showAddressSelector","onAddressSelect","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","connectFormik","ShippingAddressForm","PayPalFastlaneShippingAddress","handleFieldChange","isLoadingStrategy","setIsLoadingStrategyStrategy","paypalFastlaneShippingComponent","fastlaneOptions","provider","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","initializationOptions","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","hasRequestedShippingOptions","setSubmitted","useContext","FormContext","SHIPPING_ADDRESS_FIELDS","legend","Legend","ShippingOptions","state","isResettingAddress","isUpdatingShippingData","isValid","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setState","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","isBillingSameAsShipping","customerMessage","stateOrProvinceCodeFormField","billingSameAsShipping","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","isArray","isEqual","isEqualAddress","contextType","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","isGuest","onMultiShippingSubmit","onSingleShippingSubmit","signOut","useExtensions","onMultiShippingChange","shouldShowMultiShipping","cartHasPromotionalItems","isSingleShippingConfirmationModalOpen","setIsSingleShippingConfirmationModalOpen","isMultiShippingUnavailableModalOpen","setIsMultiShippingUnavailableModalOpen","showConfirmationModal","showMultiShippingUnavailableModal","ConfirmationModal","action","actionButtonLabel","headerId","isModalOpen","messageId","StripeStateMapper","stateList","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","allowedCountries","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","shouldRenderWhileLoading","email","renderWhileLoading","deleteConsignmentsSelector","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","isDeletingConsignment","isLoadingCheckout","enableOrderComments","features","hasMultiShippingEnabled","getShippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItem","unassignItemsToAddress","StripeUPE","shouldUseStripeLinkByMinimumAmount"],"sourceRoot":""}