{"version":3,"file":"shipping-4fc976d5.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/icon/IconHelp.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/ui/src/modal/ConfirmationModal.tsx","webpack://checkout/./packages/ui/src/icon/IconClose.tsx","webpack://checkout/./packages/ui/src/modal/Modal.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronDown.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/ui/src/icon/IconError.tsx","webpack://checkout/./packages/ui/src/icon/IconSuccess.tsx","webpack://checkout/./packages/ui/src/icon/IconInfo.tsx","webpack://checkout/./packages/ui/src/alert/Alert.tsx","webpack://checkout/./packages/ui/src/modal/ModalHeader.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronUp.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/shipping/hasPromotionalItems.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/ui/src/icon/IconEdit.tsx","webpack://checkout/./packages/core/src/app/shipping/GuestCustomerAddressSelector.tsx","webpack://checkout/./packages/core/src/app/shipping/utils/setRecommendedOrMissingShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentAddressSelector.tsx","webpack://checkout/./packages/core/src/app/shipping/ItemSplitTooltip.tsx","webpack://checkout/./packages/core/src/app/shipping/AllocatedItemsList.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItem.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItemsTable.tsx","webpack://checkout/./packages/core/src/app/shipping/MultishippingType.ts","webpack://checkout/./packages/core/src/app/shipping/AllocateItemsModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/hooks/useDeallocateItem.ts","webpack://checkout/./packages/core/src/app/shipping/utils/generateItemHash.tsx","webpack://checkout/./packages/core/src/app/shipping/hooks/useMultishippingConsignmentItems.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentLineItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ConsignmentListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/isSelectedShippingOptionValid.ts","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/NewConsignment.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingGuestForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/ui/src/tooltip/TooltipTrigger.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div aria-live=\"polite\" className={bodyClassName}>\n                        {children}\n                    </div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { noop } from 'lodash';\nimport React, { ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize, ButtonVariant } from '../button';\n\nimport Modal from './Modal';\nimport ModalHeader from './ModalHeader';\n\ninterface ConfirmationModalProps {\n    headerId: string;\n    messageId: string;\n    isModalOpen: boolean;\n    onRequestClose?: () => void;\n    action: () => void;\n    actionButtonLabel?: ReactNode;\n    shouldShowCloseButton?: boolean;\n}\n\nconst ConfirmationModal = ({\n    headerId,\n    messageId,\n    isModalOpen,\n    action,\n    actionButtonLabel,\n    onRequestClose = noop,\n    shouldShowCloseButton = true,\n}: ConfirmationModalProps) => {\n    return (\n        <Modal\n            additionalModalClassName=\"modal--confirm\"\n            footer={\n                <Button onClick={action} size={ButtonSize.Small} variant={ButtonVariant.Primary}>\n                    {actionButtonLabel ?? <TranslatedString id=\"common.confirm_action\" />}\n                </Button>\n            }\n            header={\n                <ModalHeader>\n                    <span aria-live=\"assertive\" role=\"alert\">\n                        <TranslatedString id={headerId} />\n                    </span>\n                </ModalHeader>\n            }\n            isOpen={isModalOpen}\n            onRequestClose={onRequestClose}\n            shouldShowCloseButton={shouldShowCloseButton}\n        >\n            <p aria-live=\"assertive\" role=\"alert\">\n                <TranslatedString id={messageId} />\n            </p>\n        </Modal>\n    );\n};\n\nexport default ConfirmationModal;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconClose: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconClose);\n","import classNames from 'classnames';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, KeyboardEvent, MouseEvent, ReactNode, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport { Omit } from 'utility-types';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\n\nimport { IconClose } from '../icon';\n\nexport type ModalProps = Omit<\n    ReactModal.Props,\n    'bodyOpenClassName' | 'className' | 'closeTimeoutMS' | 'overlayClassName'\n> & {\n    children?: ReactNode;\n    closeButtonLabel?: string | ReactNode;\n    footer?: ReactNode;\n    header?: ReactNode;\n    additionalHeaderClassName?: string;\n    additionalBodyClassName?: string;\n    additionalModalClassName?: string;\n    shouldShowCloseButton?: boolean;\n};\n\nconst Modal: FunctionComponent<ModalProps> = ({\n    children,\n    closeButtonLabel = 'Close',\n    footer,\n    header,\n    additionalHeaderClassName,\n    additionalBodyClassName,\n    additionalModalClassName,\n    onRequestClose = noop,\n    shouldShowCloseButton = false,\n    ...rest\n}) => {\n    const handleClose = useCallback(\n        (event: MouseEvent | KeyboardEvent) => {\n            onRequestClose(event);\n        },\n        [onRequestClose],\n    );\n\n    return (\n        <ReactModal\n            {...rest}\n            ariaHideApp={process.env.NODE_ENV !== 'test'}\n            bodyOpenClassName=\"has-activeModal\"\n            className={{\n                base: classNames(\n                    'modal optimizedCheckout-contentPrimary',\n                    additionalModalClassName,\n                ),\n                afterOpen: 'modal--afterOpen',\n                beforeClose: 'modal--beforeClose',\n            }}\n            closeTimeoutMS={200}\n            onRequestClose={onRequestClose}\n            overlayClassName={{\n                base: 'modalOverlay',\n                afterOpen: 'modalOverlay--afterOpen',\n                beforeClose: 'modalOverlay--beforeClose',\n            }}\n            shouldCloseOnEsc={true}\n            shouldCloseOnOverlayClick={false}\n        >\n            <div className={classNames('modal-header', additionalHeaderClassName)}>\n                {header}\n\n                {shouldShowCloseButton && (\n                    <a\n                        className=\"modal-close\"\n                        data-test=\"modal-close-button\"\n                        href=\"#\"\n                        onClick={preventDefault(handleClose)}\n                    >\n                        {Boolean(closeButtonLabel) && (\n                            <span className=\"is-srOnly\">{closeButtonLabel}</span>\n                        )}\n\n                        <IconClose />\n                    </a>\n                )}\n            </div>\n\n            <div\n                className={classNames('modal-body', additionalBodyClassName)}\n                data-test=\"modal-body\"\n            >\n                {children}\n            </div>\n\n            {Boolean(footer) && (\n                <div className=\"modal-footer\" data-test=\"modal-footer\">\n                    {footer}\n                </div>\n            )}\n        </ReactModal>\n    );\n};\n\nexport default Modal;\n","import classNames from 'classnames';\nimport React, { FieldsetHTMLAttributes, forwardRef, ReactNode, Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef(\n    (\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\n        ref: Ref<HTMLFieldSetElement>,\n    ) => (\n        <fieldset\n            {...rest}\n            className={className || classNames('form-fieldset', additionalClassName)}\n            data-test={testId}\n            ref={ref}\n        >\n            {legend}\n\n            <div className=\"form-body\">{children}</div>\n        </fieldset>\n    ),\n);\n\nexport default Fieldset;\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import React, { FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    children: React.ReactNode;\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconError: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconError);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSuccess: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconSuccess);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconInfo: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconInfo);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode, useId } from 'react';\n\nimport { IconError, IconInfo, IconSuccess } from '../icon';\n\nexport interface AlertProps {\n    additionalClassName?: string;\n    icon?: ReactNode;\n    testId?: string;\n    type?: AlertType;\n    children?: ReactNode;\n}\n\nexport enum AlertType {\n    Error = 'error',\n    Info = 'info',\n    Success = 'success',\n    Warning = 'warning',\n}\n\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\n    switch (type) {\n        case AlertType.Error:\n        case AlertType.Warning:\n            return <IconError />;\n\n        case AlertType.Success:\n            return <IconSuccess />;\n\n        case AlertType.Info:\n        default:\n            return <IconInfo />;\n    }\n}\n\nconst Alert: FunctionComponent<AlertProps> = ({\n    additionalClassName,\n    children,\n    icon,\n    testId,\n    type,\n}) => {\n    const describedBy = useId();\n\n    return (\n        <div\n            aria-describedby={describedBy}\n            className={classNames(\n                'alertBox',\n                additionalClassName,\n                { 'alertBox--info': type === AlertType.Info || !type },\n                { 'alertBox--error': type === AlertType.Error },\n                { 'alertBox--success': type === AlertType.Success },\n                { 'alertBox--warning': type === AlertType.Warning },\n            )}\n            data-test={testId}\n        >\n            <div className=\"alertBox-column alertBox-icon\">{icon || renderDefaultIcon(type)}</div>\n\n            <div\n                aria-live={type === AlertType.Error ? 'assertive' : 'polite'}\n                className=\"alertBox-column alertBox-message\"\n                id={describedBy}\n                role={type === AlertType.Error ? 'alert' : 'status'}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default Alert;\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\ninterface ModalHeaderProps {\n    children: React.ReactNode;\n    additionalClassName?: string;\n}\n\nconst ModalHeader: FunctionComponent<ModalHeaderProps> = ({ children, additionalClassName }) => (\n    <h2\n        className={classNames(\n            'modal-header-title optimizedCheckout-headingSecondary',\n            additionalClassName,\n        )}\n        data-test=\"modal-heading\"\n    >\n        {children}\n    </h2>\n);\n\nexport default ModalHeader;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children?: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children?: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    useEffect(() => {\n        return () => {\n            setFieldValue(name, '');\n        };\n    }, []);\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronUp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronUp);\n","import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.includes(preselectedPayment.providerId)) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.includes(providerWithCustomCheckout)\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nexport default function hasPromotionalItems(cart: Cart): boolean {\n    const { digitalItems = [], physicalItems } = cart.lineItems;\n    \n    return [...digitalItems, ...physicalItems].filter((item) => item.addedByPromotion)?.length > 0;\n}\n","import {\n    FormikProps,\n    FormikValues,\n    withFormik,\n    WithFormikConfig,\n} from 'formik';\nimport React, {\n    ComponentType,\n    useEffect,\n    useRef,\n} from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<\n    TOuterProps extends object,\n    TValues extends FormikValues = FormikValues,\n    TPayload = TValues\n>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (\n        OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>\n    ) => {\n        const DecoratedComponent: ComponentType<\n            TOuterProps & FormikProps<TValues> & WithFormikExtendedProps\n        > = (props) => {\n            const { resetForm, isInitialValueLoaded, initialValues } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false &&\n                    isInitialValueLoaded === true\n                ) {\n                    resetForm({ values: initialValues ?? {} });\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded, initialValues, resetForm]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport mapAddressToFormValues, { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n    selectedAddress?: Address;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <Button\n                    onClick={onRequestClose}\n                    variant={ButtonVariant.Secondary}>\n                    <TranslatedString id=\"common.cancel_action\" />\n                </Button>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ getFields, selectedAddress }) => {\n            return mapAddressToFormValues(\n                getFields(selectedAddress && selectedAddress.countryCode),\n                selectedAddress,\n            )\n        },\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEdit: FunctionComponent = () => (\n    <svg fill=\"none\" height=\"20\" viewBox=\"0 0 20 20\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M2.49902 14.5511V17.0844C2.49902 17.3178 2.68236 17.5011 2.91569 17.5011H5.44902C5.55736 17.5011 5.66569 17.4594 5.74069 17.3761L14.8407 8.28444L11.7157 5.15944L2.62402 14.2511C2.54069 14.3344 2.49902 14.4344 2.49902 14.5511ZM17.2574 5.86777C17.5824 5.54277 17.5824 5.01777 17.2574 4.69277L15.3074 2.74277C14.9824 2.41777 14.4574 2.41777 14.1324 2.74277L12.6074 4.26777L15.7324 7.39277L17.2574 5.86777Z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEdit);\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport React from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconEdit, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport SingleLineStaticAddress from '../address/SingleLineStaticAddress';\n\ninterface GuestCustomerAddressSelectorProps {\n    onUseNewAddress(): void;\n    selectedAddress?: Address;\n}\n\nconst GuestCustomerAddressSelector = ({ onUseNewAddress, selectedAddress }: GuestCustomerAddressSelectorProps) => {\n    const { themeV2 } = useThemeContext();\n\n    return <div className='guest-consignment-line-item-header'>\n        {\n            !selectedAddress\n                ? <>\n                    <h3 className={themeV2 ? 'body-bold' : ''}>\n                        <TranslatedString id=\"shipping.guest_multishipping_no_shipping_address_message\" />\n                    </h3>\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"enter-shipping-address\"\n                        href=\"#\"\n                        onClick={preventDefault(onUseNewAddress)}\n                    >\n                        <TranslatedString id=\"shipping.guest_multishipping_enter_shipping_address_action\" />\n                    </a>\n                </>\n                : <>\n                    <SingleLineStaticAddress address={selectedAddress} />\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"edit-shipping-address\"\n                        href=\"#\"\n                        onClick={preventDefault(onUseNewAddress)}\n                    >\n                        <IconEdit />\n                    </a>\n                </>\n        }\n    </div>;\n}\n\nexport default GuestCustomerAddressSelector;\n","import { CheckoutSelectors, Consignment, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\n\nconst createShippingOptionsMap = (consignments: Consignment[]): Map<string, string | undefined> => {\n    return new Map(\n        consignments.map((consignment) => [consignment.id, consignment.selectedShippingOption?.id]),\n    );\n};\n\nexport const setRecommendedOrMissingShippingOption = async (\n    previousConsignment: Consignment[],\n    currentConsignments: Consignment[],\n    selectConsignmentShippingOption: (\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions<object>,\n    ) => Promise<CheckoutSelectors>,\n): Promise<void> => {\n    const previousShippingOptions = createShippingOptionsMap(previousConsignment);\n\n    for (const consignment of currentConsignments) {\n        if (!consignment.selectedShippingOption) {\n            const previousShippingOptionId = previousShippingOptions.get(consignment.id);\n\n            if (previousShippingOptionId) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, previousShippingOptionId);\n\n                continue;\n            }\n\n            const recommendedOption = consignment.availableShippingOptions?.find(\n                (option) => option.isRecommended,\n            );\n\n            if (recommendedOption) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, recommendedOption.id);\n            }\n        }\n    }\n};\n","import { Address, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\nimport React, { useState } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { AddressFormModal, AddressFormValues, AddressSelect, AddressType, isValidAddress, mapAddressFromFormValues } from \"../address\";\nimport { ErrorModal } from \"../common/error\";\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from \"../common/utility\";\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from \"./errors\";\nimport GuestCustomerAddressSelector from \"./GuestCustomerAddressSelector\";\nimport { MultiShippingConsignmentData } from \"./MultishippingType\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface ConsignmentAddressSelectorProps {\n    consignment?: MultiShippingConsignmentData;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    setConsignmentRequest?(consignmentRequest: ConsignmentCreateRequestBody): void;\n    selectedAddress?: Address;\n}\n\nconst ConsignmentAddressSelector = ({\n    consignment,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    selectedAddress,\n    setConsignmentRequest,\n}: ConsignmentAddressSelectorProps) => {\n    const [isOpenNewAddressModal, setIsOpenNewAddressModal] = useState(false);\n    const [createCustomerAddressError, setCreateCustomerAddressError] = useState<Error>();\n\n    const {\n        checkoutState: {\n            data: {\n                getShippingCountries,\n                getCustomer,\n                getConfig,\n                getConsignments: getPreviousConsignments,\n                getShippingAddressFields: getFields,\n            },\n        },\n        checkoutService: {\n            updateConsignment,\n            createCustomerAddress,\n            selectConsignmentShippingOption,\n        },\n    } = useCheckout();\n\n    const countries = getShippingCountries() || EMPTY_ARRAY;\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!config || !customer) {\n        return null;\n    }\n\n    const isFloatingLabelEnabledFlag = isFloatingLabelEnabled(config.checkoutSettings);\n    // TODO: add filter for addresses\n    const addresses = customer.addresses || EMPTY_ARRAY;\n    const {\n        checkoutSettings: {\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const isGuest = customer.isGuest;\n\n    const handleSelectAddress = async (address: Address) => {\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        if (!consignment) {\n            setConsignmentRequest?.({\n                address,\n                shippingAddress: address,\n                lineItems: [],\n            });\n\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await updateConsignment({\n                id: consignment.id,\n                address,\n                shippingAddress: address,\n                lineItems: consignment.lineItems.map(({ id, quantity }) => ({ itemId: id, quantity })),\n            });\n\n            const currentConsignments = getConsignments();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    }\n\n    const handleUseNewAddress = () => {\n        setIsOpenNewAddressModal(true);\n    }\n\n    const handleCloseAddAddressForm = () => {\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleSaveAddress = async (addressFormValues: AddressFormValues) => {\n        const address = mapAddressFromFormValues(addressFormValues);\n\n        await handleSelectAddress(address);\n\n        if (!isGuest) {\n            try {\n                await createCustomerAddress(address);\n            } catch (error) {\n                if (error instanceof Error) {\n                    setCreateCustomerAddressError(error);\n                }\n            }\n        }\n\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleCloseErrorModal = () => {\n        setCreateCustomerAddressError(undefined);\n    }\n\n    return (\n        <>\n            <ErrorModal\n                error={createCustomerAddressError}\n                message={\n                    <>\n                        <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                        <TranslatedString id=\"customer.create_address_error\" />\n                    </>\n                }\n                onClose={handleCloseErrorModal}\n                shouldShowErrorCode={false}\n            />\n            <AddressFormModal\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabledFlag}\n                isLoading={isLoading}\n                isOpen={isOpenNewAddressModal}\n                onRequestClose={handleCloseAddAddressForm}\n                onSaveAddress={handleSaveAddress}\n                selectedAddress={isGuest ? selectedAddress : undefined}\n            />\n            {isGuest\n                ? <GuestCustomerAddressSelector\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={selectedAddress}\n                />\n                : <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    placeholderText={<TranslatedString id=\"shipping.choose_shipping_address\" />}\n                    selectedAddress={selectedAddress}\n                    showSingleLineAddress\n                    type={AddressType.Shipping}\n                />\n            }\n        </>\n    )\n}\n\nexport default ConsignmentAddressSelector;\n","import React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { IconHelp, TooltipTrigger } from \"@bigcommerce/checkout/ui\";\n\nimport { Tooltip } from \"../ui/tooltip\";\nimport \"./ItemSplitTooltip.scss\";\n\nexport const ItemSplitTooltip: FunctionComponent = () => {\n    return (\n        <TooltipTrigger\n            placement=\"right-start\"\n            tooltip={\n                <Tooltip>\n                    <TranslatedString\n                        id=\"shipping.multishipping_item_split_tooltip_message\"\n                    />\n                </Tooltip>\n            }\n        >\n            <span className=\"item-split-tooltip\" data-test=\"split-item-tooltip\">\n                <IconHelp />\n            </span>\n        </TooltipTrigger>\n    )\n};\n","import React from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { IconClose } from \"../ui/icon\";\n\nimport { renderItemContent } from \"./ConsignmentLineItemDetail\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface AllocatedItemsListProps {\n    assignedItems: MultiShippingTableData;\n    onUnassignItem(itemToDelete: MultiShippingTableItemWithType): void;\n}\n\nconst AllocatedItemsList = ({ assignedItems, onUnassignItem }: AllocatedItemsListProps) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <div className=\"allocated-line-items\">\n            <h3 className={themeV2 ? 'body-bold' : ''}>\n                <TranslatedString data={{ count: assignedItems.shippableItemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\n                {assignedItems.hasSplitItems && (\n                    <ItemSplitTooltip />\n                )}\n            </h3>\n            <ul className=\"allocated-line-items-list\">\n                {assignedItems.lineItems.map(item => (\n                    <li key={item.id}>\n                        {renderItemContent(item, themeV2)}\n                        <span data-test={`remove-${item.id.toString()}-button`} onClick={() => onUnassignItem(item)}>\n                            <IconClose />\n                        </span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default AllocatedItemsList;\n","import classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { FormField, TextInput } from \"../ui/form\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface LeftToAllocateItemProps {\n    item: MultiShippingTableItemWithType;\n    error?: string;\n}\n\nconst LeftToAllocateItem: FunctionComponent<LeftToAllocateItemProps> = ({ item, error }: LeftToAllocateItemProps) => {\n    const isMobileView = isMobileViewUI();\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <tr>\n            <td className=\"left-to-allocate-item-name-container\">\n                <figure className=\"left-to-allocate-item-figure\">\n                    {item.imageUrl && <img alt={item.name} src={item.imageUrl} />}\n                </figure>\n                <div>\n                    <p className={classNames('left-to-allocate-item-name',\n                        { 'body-regular': themeV2 })}>\n                        {item.name}\n                    </p>\n                    {item.options?.map(option => (\n                        <p className={classNames('left-to-allocate-item-option',\n                            { 'sub-text-medium': themeV2 })}\n                            key={option.nameId}>\n                            {option.name}: {option.value}\n                        </p>\n                    ))}\n                </div>\n            </td>\n            {!isMobileView && <td className={themeV2 ? 'body-regular' : ''}>{item.quantity}</td>}\n            <td className={themeV2 ? 'body-regular' : ''}>\n                {isMobileView && <TranslatedString data={{ count: item.quantity }} id=\"shipping.multishipping_left_to_allocate_message\" />}\n                <FormField\n                    additionalClassName={error ? \"form-field--error\" : \"\"}\n                    input={({ field }) => <TextInput\n                        {...field}\n                        aria-label={`Quantity of ${item.name}`}\n                        disabled={item.quantity === 0}\n                        id={field.name}\n                        min={0}\n                        themeV2={themeV2}\n                        type=\"number\"\n                    />}\n                    name={item.id.toString()}\n                />\n            </td>\n        </tr>\n    );\n}\n\nexport default LeftToAllocateItem;\n","import { FormikErrors } from \"formik\";\nimport React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { AllocateItemsModalFormValues } from \"./AllocateItemsModal\";\nimport LeftToAllocateItem from \"./LeftToAllocateItem\";\nimport { MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface LeftToAllocateItemsTableProps {\n    items: MultiShippingTableItemWithType[];\n    formErrors: FormikErrors<AllocateItemsModalFormValues>;\n}\n\nconst LeftToAllocateItemsTable: FunctionComponent<LeftToAllocateItemsTableProps> = ({ items, formErrors }: LeftToAllocateItemsTableProps) => {\n    const isMobileView = isMobileViewUI();\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <table className=\"table left-to-allocate-items-table\">\n            <thead>\n                <tr>\n                    <th className={themeV2 ? 'body-medium' : ''}><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_item\" /></th>\n                    {!isMobileView && <th className={themeV2 ? 'body-medium' : ''}><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_left_to_allocate\" /></th>}\n                    <th className={themeV2 ? 'body-medium' : ''}><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_quantity\" /></th>\n                </tr>\n            </thead>\n            <tbody>\n                {items.map(item => (\n                    <LeftToAllocateItem\n                        error={formErrors[item.id.toString()]}\n                        item={item}\n                        key={item.id}\n                    />\n                ))}\n            </tbody>\n        </table>\n    );\n}\n\nexport default LeftToAllocateItemsTable;\n","import { Consignment, LineItemOption, PhysicalItem } from \"@bigcommerce/checkout-sdk\";\n\nexport enum LineItemType {\n    Physical,\n    Digital,\n    GiftCertificate,\n    Custom,\n}\n\nexport interface MultiShippingTableItem {\n    name: string;\n    options?: LineItemOption[];\n    giftWrapping?: PhysicalItem['giftWrapping'];\n    sku: string;\n    quantity: number;\n    id: string | number;\n    imageUrl?: string;\n}\n\nexport interface MultiShippingTableItemWithType extends MultiShippingTableItem {\n    type: LineItemType;\n}\n\nexport interface MultiShippingTableData {\n    lineItems: MultiShippingTableItemWithType[];\n    hasDigitalItems: boolean;\n    hasSplitItems: boolean;\n    shippableItemsCount: number;\n};\n\nexport interface MultiShippingConsignmentData extends Consignment, MultiShippingTableData {\n    consignmentNumber: number;\n}\n","import { Address, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport { FormikProps } from \"formik\";\nimport React, { FunctionComponent, useMemo } from \"react\";\nimport { number, object } from \"yup\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString, withLanguage, WithLanguageProps } from \"@bigcommerce/checkout/locale\";\nimport { Alert, AlertType, ButtonVariant, useThemeContext } from \"@bigcommerce/checkout/ui\";\n\nimport { getAddressContent } from \"../address/SingleLineStaticAddress\";\nimport { withFormikExtended } from \"../common/form\";\nimport { Button } from \"../ui/button\";\nimport { Form } from \"../ui/form\";\nimport { Modal, ModalHeader } from \"../ui/modal\";\n\nimport AllocatedItemsList from \"./AllocatedItemsList\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport LeftToAllocateItemsTable from \"./LeftToAllocateItemsTable\";\nimport { LineItemType, MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingType\";\n\nexport interface AllocateItemsModalFormValues {\n    [key: string]: number;\n}\n\ninterface AllocateItemsModalProps {\n    consignmentNumber: number;\n    isOpen: boolean;\n    onRequestClose?(): void;\n    address: Address;\n    unassignedItems: MultiShippingTableData;\n    assignedItems?: MultiShippingTableData;\n    onAllocateItems(consignmentLineItems: ConsignmentLineItem[]): void;\n    onUnassignItem?(itemToDelete: MultiShippingTableItemWithType): void;\n    isLoading: boolean;\n}\n\nconst AllocateItemsModal: FunctionComponent<AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>> = ({\n    consignmentNumber,\n    isOpen,\n    onRequestClose,\n    address,\n    assignedItems,\n    unassignedItems,\n    setValues,\n    values,\n    dirty,\n    submitForm,\n    errors,\n    onUnassignItem,\n    isLoading,\n}: AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>) => {\n\n    const { themeV2 } = useThemeContext();\n\n    const allocatedOrSelectedItemsMessage = useMemo(() => {\n        const leftItemsTotal = unassignedItems.shippableItemsCount;\n\n        if (values && dirty) {\n            const selectedItems = Object.keys(values).reduce((acc, key) => {\n                if (values[key] > 0) {\n                    acc += values[key];\n                }\n\n                return acc;\n            }, 0);\n\n            return <TranslatedString data={{ count: `${selectedItems}/${leftItemsTotal}` }} id=\"shipping.multishipping_items_selected_message\" />;\n        }\n\n        return <TranslatedString data={{ count: leftItemsTotal }} id=\"shipping.multishipping_item_to_allocate_message\" />;\n    }, [values]);\n\n    const handleSelectAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = item.quantity;\n        });\n        setValues(values);\n    };\n\n    const handleClearAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = 0;\n        });\n        setValues(values);\n    }\n\n    const formErrors = useMemo(() => {\n        const errorKeys = Object.keys(errors);\n\n        return errorKeys.reduce((acc: string[], key: string) => {\n            const error = errors[key];\n\n            if (error) {\n                acc.push(error);\n            }\n\n            return Array.from(new Set(acc));\n        }, []);\n    }, [errors]);\n\n    const hasItemsAssigned = !!assignedItems && assignedItems.lineItems.length > 0 && !!onUnassignItem;\n    const hasUnassignedItems = !!unassignedItems && unassignedItems.lineItems.length > 0;\n\n    const modalFooter = (\n        <>\n            <Button\n                className={themeV2 ? 'body-medium' : ''}\n                disabled={isLoading}\n                onClick={onRequestClose}\n                variant={ButtonVariant.Secondary}\n            >\n                <TranslatedString id=\"shipping.multishipping_items_allocate_cancel\" />\n            </Button>\n            <Button\n                className={themeV2 ? 'body-medium' : ''}\n                disabled={!hasItemsAssigned && !dirty}\n                isLoading={isLoading}\n                onClick={submitForm}\n                type=\"submit\"\n                variant={ButtonVariant.Primary}\n            >\n                {hasItemsAssigned\n                    ? <TranslatedString id=\"shipping.multishipping_items_allocate_save\" />\n                    : <TranslatedString id=\"shipping.multishipping_items_allocate_allocate\" />\n                }\n            </Button>\n        </>\n    );\n\n    return (\n        <Modal\n            additionalModalClassName=\"allocate-items-modal\"\n            footer={modalFooter}\n            header={\n                <>\n                    <ModalHeader additionalClassName={themeV2 ? 'header' : ''}>\n                        <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                    </ModalHeader>\n                    <h4 className={themeV2 ? 'body-medium' : ''}>{getAddressContent(address)}</h4>\n                </>\n            }\n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n        >\n            <Form>\n                {formErrors.length > 0 && (\n                    <div className=\"form-errors\">\n                        {formErrors.map((error, index) => (\n                            <Alert key={index} type={AlertType.Error}>{error}</Alert>\n                        ))}\n                    </div>\n                )}\n                {unassignedItems.hasDigitalItems && (\n                    <Alert type={AlertType.Info}>\n                        <TranslatedString id=\"shipping.multishipping_digital_item_no_shipping_banner\" />\n                    </Alert>\n                )}\n                {hasItemsAssigned && (\n                    <AllocatedItemsList assignedItems={assignedItems} onUnassignItem={onUnassignItem} />\n                )}\n                {hasUnassignedItems\n                    ? <>\n                        <div className=\"left-to-allocate-items-table-actions\">\n                            <p className={themeV2 ? 'body-regular' : ''}>\n                                {allocatedOrSelectedItemsMessage}\n                                {unassignedItems.hasSplitItems && (\n                                    <ItemSplitTooltip />\n                                )}\n                            </p>\n\n                            <div className=\"button-group\">\n                                <a\n                                    className={themeV2 ? 'body-cta' : ''}\n                                    data-test=\"clear-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleClearAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_clear_all\" />\n                                </a>\n                                <a\n                                    className={themeV2 ? 'body-cta' : ''}\n                                    data-test=\"allocate-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleSelectAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_select_all_items_left\" />\n                                </a>\n                            </div>\n                        </div>\n                        <LeftToAllocateItemsTable\n                            formErrors={errors}\n                            items={unassignedItems.lineItems}\n                        />\n                    </>\n                    : null\n                }\n            </Form>\n        </Modal>\n    )\n}\n\nexport default withLanguage(\n    withFormikExtended<AllocateItemsModalProps & WithLanguageProps, AllocateItemsModalFormValues>({\n        handleSubmit: (values, { props: { onAllocateItems } }) => {\n            const consignmentLineItems = Object.keys(values).filter(key => values[key] > 0).map((lineItemId: string) => ({\n                itemId: lineItemId,\n                quantity: values[lineItemId],\n            }));\n\n            onAllocateItems(consignmentLineItems);\n        },\n        mapPropsToValues: ({ unassignedItems }) => {\n            const values: AllocateItemsModalFormValues = {};\n\n            unassignedItems.lineItems.forEach(item => {\n                values[item.id.toString()] = 0;\n            });\n\n            return values;\n        },\n        enableReinitialize: true,\n        validationSchema: ({ language, unassignedItems }: AllocateItemsModalProps & WithLanguageProps) => {\n            const createItemSchema = (item: MultiShippingTableItemWithType) => {\n                const baseSchema = number()\n                    .required(language.translate('shipping.quantity_required_error'))\n                    .integer(language.translate('shipping.quantity_invalid_error'))\n                    .min(0, language.translate('shipping.quantity_min_error'))\n                    .max(item.quantity, language.translate('shipping.quantity_max_error'))\n\n                if (item.type === LineItemType.Custom) {\n                    return baseSchema\n                        .oneOf([0, item.quantity], language.translate('shipping.custom_item_quantity_error'))\n                }\n\n                return baseSchema;\n            };\n\n            const schemaObject = Object.fromEntries(\n                unassignedItems.lineItems.map((item) => [item.id.toString(), createItemSchema(item)]),\n            );\n\n            return object().shape(schemaObject);\n        },\n        validateOnBlur: true,\n        validateOnChange: false,\n    })(AllocateItemsModal),\n);\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Consignment, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nexport const useDeallocateItem = () => {\n    const {\n        checkoutService: { createConsignments, deleteConsignment },\n    } = useCheckout();\n\n    // this is a workaround to handle removing an item from a consignment\n    // current consignment API does not support removing an item directly - Oct 2024\n\n    const deleteItem = async (consignmentRequest: ConsignmentCreateRequestBody, itemId: string, consignment: Consignment) => {\n        let consignmentIdToBeDeleted: string | undefined = consignment.id;\n\n        if (consignment.lineItemIds.length > 1) {\n            const checkoutResponse = await createConsignments([consignmentRequest]);\n\n            const consignmentsReponse = checkoutResponse.data.getConsignments();\n\n            consignmentIdToBeDeleted = consignmentsReponse?.find((c) =>\n                c.lineItemIds.find((lineItemId) => lineItemId === itemId),\n            )?.id;\n        }\n\n        if (!consignmentIdToBeDeleted) {\n            throw new Error('Unable to find consignment to delete');\n        }\n\n        deleteConsignment(consignmentIdToBeDeleted);\n    }\n\n    return deleteItem;\n}\n","import { LineItem, LineItemOption } from \"@bigcommerce/checkout-sdk\";\n\nconst generateHash = (values: string[]): string => {\n  return btoa(encodeURIComponent(values.join('-')));\n};\n\nconst generateProductOptionsHash = (options: LineItemOption[] | undefined): string => {\n  if (!options) {\n    return '';\n  }\n\n  return generateHash(\n    options.map((option) =>\n      generateHash([\n        option.name,\n        option.nameId.toString(),\n        option.value,\n        option.valueId ? option.valueId.toString() : '',\n      ]),\n    ),\n  );\n};\n\nexport const generateItemHash = (item: LineItem): string => {\n  return generateHash([\n    item.productId.toString(),\n    item.variantId.toString(),\n    item.sku,\n    generateProductOptionsHash(item.options),\n  ]);\n};\n","import { Consignment, LineItemMap } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { LineItemType, MultiShippingConsignmentData, MultiShippingTableData, MultiShippingTableItemWithType } from \"../MultishippingType\";\nimport { generateItemHash } from \"../utils\";\n\ninterface MultiShippingConsignmentItemsHook {\n    unassignedItems: MultiShippingTableData;\n    consignmentList: MultiShippingConsignmentData[];\n}\n\n// TODO: consolidate this from /app/order/removeBundledItems\nfunction removeBundledItems(lineItems: LineItemMap): LineItemMap {\n    return {\n        ...lineItems,\n        physicalItems: lineItems.physicalItems.filter((item) => typeof item.parentId !== 'string'),\n        digitalItems: lineItems.digitalItems.filter((item) => typeof item.parentId !== 'string'),\n    };\n}\n\nconst calculateShippableItemsCount = (items: MultiShippingTableItemWithType[]): number => {\n    return items.reduce((total, item) => total + item.quantity, 0);\n};\n\nconst hasSplitItem = (\n    items: MultiShippingTableItemWithType[],\n    itemHashMap: Map<string, string>,\n  ): boolean => {\n    const processedHashes = new Set<string>();\n  \n    for (const item of items) {\n      const hash = itemHashMap.get(item.id.toString());\n\n      if (!hash) continue;\n  \n      if (processedHashes.has(hash)) {\n        return true;\n      }\n  \n      processedHashes.add(hash);\n    }\n  \n    return false;\n  };\n\nfunction mapConsignmentsItems(\n    lineItems: LineItemMap,\n    consignments: Consignment[],\n): {\n        consignmentList: MultiShippingConsignmentData[];\n        unassignedItems: MultiShippingTableData;\n    } {\n    const unassignedItemsMap = new Map<string, MultiShippingTableItemWithType>();\n    const digitalItemsMap = new Map<string, MultiShippingTableItemWithType>();\n\n    const itemHashMap = new Map<string, string>();\n\n    const consignmentList: MultiShippingConsignmentData[] = [];\n\n    lineItems.physicalItems.forEach((item) => {\n        unassignedItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Physical });\n        itemHashMap.set(item.id.toString(), generateItemHash(item));\n    });\n    lineItems.customItems?.forEach((item) =>\n        unassignedItemsMap.set(item.id, { ...item, type: LineItemType.Custom }),\n    );\n    lineItems.digitalItems.forEach((item) =>\n        digitalItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Digital }),\n    );\n\n    consignments.forEach((consignment, index) => {\n        const consignmentLineItems: MultiShippingTableItemWithType[] = [];\n\n        consignment.lineItemIds.forEach((itemId) => {\n            const item = unassignedItemsMap.get(itemId);\n\n            if (item) {\n                consignmentLineItems.push(item);\n                unassignedItemsMap.delete(itemId);\n            }\n        });\n\n        consignmentList.push({\n            ...consignment,\n            consignmentNumber: index + 1,\n            hasDigitalItems: false,\n            hasSplitItems: hasSplitItem(consignmentLineItems, itemHashMap),\n            shippableItemsCount: calculateShippableItemsCount(consignmentLineItems),\n            lineItems: consignmentLineItems,\n        });\n    });\n\n    const unassignedItemsList = Array.from(unassignedItemsMap.values());\n\n    const unassignedItems: MultiShippingTableData = {\n        lineItems: unassignedItemsList,\n        hasDigitalItems: digitalItemsMap.size > 0,\n        hasSplitItems: hasSplitItem(unassignedItemsList, itemHashMap),\n        shippableItemsCount: calculateShippableItemsCount(unassignedItemsList),\n    };\n\n    return { consignmentList, unassignedItems };\n}\n\nconst defaultMultiShippingConsignmentItems: MultiShippingConsignmentItemsHook = {\n    unassignedItems: {\n        lineItems: [],\n        hasDigitalItems: false,\n        hasSplitItems: false,\n        shippableItemsCount: 0,\n    },\n    consignmentList: [],\n};\n\nexport const useMultiShippingConsignmentItems = (): MultiShippingConsignmentItemsHook => {\n    const { checkoutState: {\n        data: { getCheckout },\n    },\n    } = useCheckout();\n\n    const checkout = getCheckout();\n\n    if (!checkout) {\n        return defaultMultiShippingConsignmentItems;\n    }\n\n    const {\n        cart: { lineItems },\n        consignments,\n    } = checkout;\n\n    const nonBundledLineItems = removeBundledItems(lineItems);\n\n    const { consignmentList, unassignedItems } =\n        mapConsignmentsItems(nonBundledLineItems, consignments);\n\n    return {\n        unassignedItems,\n        consignmentList,\n    };\n};\n","import { ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { IconChevronDown, IconChevronUp } from \"../ui/icon\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentLineItemDetail from \"./ConsignmentLineItemDetail\";\nimport { AssignItemFailedError, UnassignItemError } from \"./errors\";\nimport { useDeallocateItem } from \"./hooks/useDeallocateItem\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { MultiShippingConsignmentData, MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface ConsignmentLineItemProps {\n    consignmentNumber: number;\n    consignment: MultiShippingConsignmentData;\n    onUnhandledError(error: Error): void;\n    isLoading: boolean;\n}\n\nconst ConsignmentLineItem: FunctionComponent<ConsignmentLineItemProps> = ({ consignmentNumber, consignment, onUnhandledError, isLoading }: ConsignmentLineItemProps) => {\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const [showItems, setShowItems] = useState(true);\n\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n    const { checkoutService: { assignItemsToAddress: assignItem } } = useCheckout();\n    const deleteItem = useDeallocateItem();\n    const { themeV2 } = useThemeContext();\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAssignItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        try {\n            await assignItem({\n                address: consignment.address,\n                lineItems: consignmentLineItems,\n            });\n\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        } finally {\n            toggleAllocateItemsModal();\n        }\n    }\n\n    const handleUnassignItems = async (itemToDelete: MultiShippingTableItemWithType) => {\n        try {\n            const consignmentRequest = {\n                address: consignment.address,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: [\n                    {\n                        quantity: itemToDelete.quantity,\n                        itemId: itemToDelete.id,\n                    },\n                ],\n            }\n\n            await deleteItem(consignmentRequest, itemToDelete.id.toString(), consignment);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    }\n\n    const toggleShowItems = () => {\n        setShowItems(!showItems);\n    }\n\n    const isMobileView = isMobileViewUI();\n\n    const itemsCount = consignment.shippableItemsCount;\n\n    return (\n        <div>\n            <AllocateItemsModal\n                address={consignment.shippingAddress}\n                assignedItems={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                isOpen={isOpenAllocateItemsModal}\n                onAllocateItems={handleAssignItems}\n                onRequestClose={toggleAllocateItemsModal}\n                onUnassignItem={handleUnassignItems}\n                unassignedItems={unassignedItems}\n            />\n            <div className=\"consignment-line-item-header\">\n                <div>\n                    <h3 className={themeV2 ? 'body-bold' : ''}>\n                        <TranslatedString data={{ count: itemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\n                    </h3>\n\n                    {consignment.hasSplitItems && (\n                        <ItemSplitTooltip />\n                    )}\n\n                    <a\n                        className={classNames('expand-items-button',\n                            { 'body-cta': themeV2 }\n                        )}\n                        data-test=\"expand-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleShowItems)}\n                    >\n                        {showItems ? (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_hide_items_message\" />}\n                                <IconChevronUp />\n                            </>\n                        ) : (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_show_items_message\" />}\n                                <IconChevronDown />\n                            </>\n                        )}\n                    </a>\n                </div>\n                <a\n                    className={themeV2 ? 'body-cta' : ''}\n                    data-test=\"reallocate-items-button\"\n                    href=\"#\"\n                    onClick={preventDefault(toggleAllocateItemsModal)}\n                >\n                    <TranslatedString id=\"shipping.multishipping_item_reallocated_message\" />\n                </a>\n            </div>\n            {showItems\n                ? <ConsignmentLineItemDetail lineItems={consignment.lineItems} />\n                : null\n            }\n        </div>\n    )\n}\n\nexport default ConsignmentLineItem;\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { RadioInput, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { ShopperCurrency } from '../../currency';\n\ninterface MultiShippingOptionsListItemProps {\n    consignmentId: string;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n    handleSelect: (consignmentId: string, shippingOptionId: string) => void;\n}\n\nexport const MultiShippingOptionsListItem: FunctionComponent<\n    MultiShippingOptionsListItemProps\n> = ({ consignmentId, selectedShippingOptionId, shippingOption, handleSelect }) => {\n    const { themeV2 } = useThemeContext();\n\n    const label = (\n        <span className={themeV2 ? 'body-regular' : ''}>\n            {`${shippingOption.description} - `}\n            <ShopperCurrency amount={shippingOption.cost} />\n        </span>\n    );\n\n    const selectThisOption = () => {\n        handleSelect(consignmentId, shippingOption.id);\n    };\n\n    return (\n        <ul className=\"shipping-option-item\">\n            <RadioInput\n                checked={selectedShippingOptionId === shippingOption.id}\n                id={`shippingOption-${consignmentId}-${shippingOption.id}`}\n                key={`key-${consignmentId}-${shippingOption.id}`}\n                label={label}\n                name={`${consignmentId}-shippingMethod`}\n                onClick={selectThisOption}\n                readOnly\n                value={shippingOption.id}\n            />\n        </ul>\n    );\n};\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { MultiShippingOptionsListItem } from './MultiShippingOptionsListItem';\n\ninterface MultiShippingOptionsListV2Props {\n    consignmentId: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst MultiShippingOptionsListV2: FunctionComponent<MultiShippingOptionsListV2Props> = ({\n    consignmentId,\n    isLoading,\n    shippingOptions,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            {shippingOptions.map((shippingOption) => (\n                <MultiShippingOptionsListItem\n                    consignmentId={consignmentId}\n                    handleSelect={onSelectedOption}\n                    key={shippingOption.id}\n                    selectedShippingOptionId={selectedShippingOptionId}\n                    shippingOption={shippingOption}\n                />\n            ))}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(MultiShippingOptionsListV2);\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps &\n    WithCheckoutShippingOptionsProps &\n    AnalyticsContextProps;\n\nconst getShippingOptionIds = ({ consignments }: ShippingOptionsFormProps) => {\n    const shippingOptionIds: { [id: string]: string } = {};\n\n    (consignments || []).forEach((consignment) => {\n        shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n            ? consignment.selectedShippingOption.id\n            : '';\n    });\n\n    return { shippingOptionIds };\n};\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate({ shippingFormRenderTimestamp }: ShippingOptionsFormProps): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions,\n            shippingFormRenderTimestamp: newShippingFormRenderTimestamp,\n            setValues,\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n\n        if (newShippingFormRenderTimestamp !== shippingFormRenderTimestamp) {\n            setValues(getShippingOptionIds(this.props));\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            isMultiShippingMode={isMultiShippingMode}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(\n    withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n        handleSubmit: noop,\n        mapPropsToValues: getShippingOptionIds,\n    })(ShippingOptionsForm),\n);\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isInitialValueLoaded: boolean;\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n    shippingFormRenderTimestamp?: number;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nexport const isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, isUpdatingAddress?: boolean) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props.isUpdatingAddress),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport MultiShippingOptionsListV2 from './MultiShippingOptionsList';\nimport { isLoadingSelector } from './ShippingOptions';\n\ninterface MultiShippingOptionsV2Props {\n    consignment: Consignment;\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    resetErrorConsignmentNumber(): void;\n}\n\nexport const MultiShippingOptions = ({\n    consignment,\n    isLoading,\n    resetErrorConsignmentNumber,\n    shippingQuoteFailedMessage,\n}: MultiShippingOptionsV2Props) => {\n    const { checkoutService, checkoutState } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const selectShippingOption = async (consignmentId: string, shippingOptionId: string) => {\n        await checkoutService.selectConsignmentShippingOption(consignmentId, shippingOptionId);\n        resetErrorConsignmentNumber();\n    };\n    const isLoadingOptions = isLoadingSelector(checkoutState, isLoading)(consignment.id);\n\n    return (\n        <div>\n            <h3 className={classNames('shipping-option-header',\n                { 'body-bold': themeV2 })}\n            >\n                <TranslatedString id=\"shipping.shipping_method_label\" />\n            </h3>\n            {(!consignment.availableShippingOptions ||\n                !consignment.availableShippingOptions.length) && (\n                    <Alert type={AlertType.Error}>{shippingQuoteFailedMessage}</Alert>\n                )}\n            {Boolean(consignment.availableShippingOptions) &&\n                consignment.availableShippingOptions && (\n                    <MultiShippingOptionsListV2\n                        consignmentId={consignment.id}\n                        isLoading={isLoadingOptions}\n                        onSelectedOption={selectShippingOption}\n                        selectedShippingOptionId={\n                            consignment.selectedShippingOption &&\n                            consignment.selectedShippingOption.id\n                        }\n                        shippingOptions={consignment.availableShippingOptions}\n                    />\n                )}\n        </div>\n    );\n};\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { IconClose, IconSize } from \"../ui/icon\";\n\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport ConsignmentLineItem from './ConsignmentLineItem';\nimport { MultiShippingConsignmentData } from './MultishippingType';\nimport { MultiShippingOptions } from './shippingOption/MultiShippingOptions';\n\nexport interface ConsignmentListItemProps {\n    consignment: MultiShippingConsignmentData;\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst ConsignmentListItem: FunctionComponent<ConsignmentListItemProps> = ({\n    consignment,\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    shippingQuoteFailedMessage,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n}: ConsignmentListItemProps) => {\n\n    const { checkoutService: { deleteConsignment } } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleClose = async () => {\n        await deleteConsignment(consignment.id);\n        resetErrorConsignmentNumber();\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className={classNames('consignment-header', { 'sub-header': themeV2 })}>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n                <a\n                    className=\"delete-consignment\"\n                    data-test=\"delete-consignment-button\"\n                    href=\"#\"\n                    onClick={preventDefault(handleClose)}\n                >\n                    <IconClose size={IconSize.Small} />\n                </a>\n            </div>\n            <ConsignmentAddressSelector\n                consignment={consignment}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={consignment.shippingAddress}\n            />\n            <ConsignmentLineItem\n                consignment={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n            />\n            <MultiShippingOptions\n                consignment={consignment}\n                isLoading={isLoading}\n                resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n            />\n        </div>\n    );\n};\n\nexport default ConsignmentListItem;\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { every } from 'lodash';\n\nexport default function isSelectedShippingOptionValid(consignments: Consignment[]): boolean {\n    if (!consignments.length) {\n        return false;\n    }\n\n    return every(\n        consignments,\n        consignment => {\n            if (consignment.selectedShippingOption?.type === 'custom') {\n                return true;\n            }\n\n            return consignment.availableShippingOptions &&\n                consignment.availableShippingOptions.find(\n                    ({ id }) => id === consignment.selectedShippingOption?.id\n                );\n        }\n    );\n}\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\n\nexport interface ShippingFormFooterProps {\n    shouldShowOrderComments: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    cartHasChanged: boolean;\n}\n\nconst MultiShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    shouldShowOrderComments,\n    shouldDisableSubmit,\n    isLoading,\n    cartHasChanged,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <Form>\n            {cartHasChanged && (\n                <Alert type={AlertType.Error}>\n                    <strong>\n                        <TranslatedString id=\"shipping.cart_change_error\" />\n                    </strong>\n                </Alert>\n            )}\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    className={themeV2 ? 'body-bold' : ''}\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default MultiShippingFormFooter;\n","import { Consignment, ConsignmentCreateRequestBody, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport classNames from \"classnames\";\nimport { find } from \"lodash\";\nimport React, { useMemo, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\nimport { useThemeContext } from \"@bigcommerce/checkout/ui\";\n\nimport { EMPTY_ARRAY } from \"../common/utility\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport { AssignItemFailedError } from \"./errors\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface NewConsignmentProps {\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    setIsAddShippingDestination: React.Dispatch<React.SetStateAction<boolean>>;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst NewConsignment = ({\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n    setIsAddShippingDestination,\n}: NewConsignmentProps) => {\n    const [consignmentRequest, setConsignmentRequest] = useState<ConsignmentCreateRequestBody | undefined>();\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n    const { themeV2 } = useThemeContext();\n    const {\n        checkoutState: {\n            data: { getShippingCountries, getConsignments: getPreviousConsignments },\n        },\n        checkoutService: { assignItemsToAddress: assignItem, selectConsignmentShippingOption },\n    } = useCheckout();\n\n    const selectedAddress = useMemo(() => {\n        if (!consignmentRequest?.address) {\n            return undefined;\n        }\n\n        const countries = getShippingCountries() || EMPTY_ARRAY;\n        const country = find(countries, { code: consignmentRequest.address.countryCode });\n\n        return {\n            ...consignmentRequest.address,\n            country: country ? country.name : consignmentRequest.address.countryCode,\n        };\n    }, [consignmentRequest]);\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAllocateItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        let currentConsignments: Consignment[] | undefined;\n\n        if (!selectedAddress) {\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await assignItem({\n                address: selectedAddress,\n                lineItems: consignmentLineItems,\n            });\n\n            currentConsignments = getConsignments();\n        } catch (error) {\n            if (error instanceof AssignItemFailedError) {\n                onUnhandledError(error);\n            }\n        } finally {\n            toggleAllocateItemsModal();\n            setIsAddShippingDestination(false);\n            resetErrorConsignmentNumber();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        }\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className={classNames('consignment-header', { 'sub-header': themeV2 })}>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n            </div>\n            <ConsignmentAddressSelector\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={selectedAddress}\n                setConsignmentRequest={setConsignmentRequest}\n            />\n            {selectedAddress && (<>\n                <AllocateItemsModal\n                    address={selectedAddress}\n                    consignmentNumber={consignmentNumber}\n                    isLoading={isLoading}\n                    isOpen={isOpenAllocateItemsModal}\n                    onAllocateItems={handleAllocateItems}\n                    onRequestClose={toggleAllocateItemsModal}\n                    unassignedItems={unassignedItems}\n                />\n                <div className=\"new-consignment-line-item-header\">\n                    <h3 className={themeV2 ? 'body-bold' : ''}>\n                        <TranslatedString id=\"shipping.multishipping_no_item_allocated_message\" />\n                    </h3>\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"allocate-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleAllocateItemsModal)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_allocate_items\" />\n                    </a>\n                </div>\n            </>\n            )}\n        </div>\n    )\n}\n\nexport default NewConsignment;\n","import classNames from 'classnames';\nimport React, {FunctionComponent, ReactNode, useMemo, useState} from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withFormikExtended } from '../common/form';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { Button, ButtonVariant } from '../ui/button';\n\nimport ConsignmentListItem from './ConsignmentListItem';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport { useMultiShippingConsignmentItems } from './hooks/useMultishippingConsignmentItems';\nimport isSelectedShippingOptionValid from './isSelectedShippingOptionValid';\nimport MultiShippingFormFooter from './MultiShippingFormFooter';\nimport { MultiShippingConsignmentData } from './MultishippingType';\nimport './MultiShippingForm.scss';\nimport NewConsignment from './NewConsignment';\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport interface MultiShippingFormProps {\n    cartHasChanged: boolean;\n    customerMessage: string;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: MultiShippingFormValues): void;\n}\n\nconst MultiShippingForm: FunctionComponent<MultiShippingFormProps> = ({\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    cartHasChanged,\n}: MultiShippingFormProps) => {\n    const [errorConsignmentNumber, setErrorConsignmentNumber] = useState<number | undefined>();\n\n    const { themeV2 } = useThemeContext();\n    const {\n        checkoutState: {\n            data: { getConsignments, getConfig },\n        },\n    } = useCheckout();\n    const { unassignedItems: { lineItems: unassignedLineItems, shippableItemsCount }, consignmentList } = useMultiShippingConsignmentItems();\n\n    const consignments = getConsignments() || EMPTY_ARRAY;\n    const config = getConfig();\n\n    const [isAddShippingDestination, setIsAddShippingDestination] = useState(\n        consignments.length === 0,\n    );\n\n    const isEveryConsignmentHasShippingOption = hasSelectedShippingOptions(consignments);\n    const shouldDisableSubmit = useMemo(() => {\n        return isLoading || !!unassignedLineItems.length || !isEveryConsignmentHasShippingOption || !isSelectedShippingOptionValid(consignments);\n    }, [isLoading, consignments]);\n\n    if (!config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments: shouldShowOrderComments,\n            shippingQuoteFailedMessage,\n        },\n    } = config;\n\n    const handleAddShippingDestination = () => {\n        if (!isAddShippingDestination && !isEveryConsignmentHasShippingOption) {\n            const errorConsignmentIndex = consignments.findIndex(\n                (consignment) => !consignment.selectedShippingOption,\n            );\n\n            if (errorConsignmentIndex === -1) {\n                setIsAddShippingDestination(true);\n\n                return;\n            }\n\n            setErrorConsignmentNumber(errorConsignmentIndex + 1);\n        } else if (isAddShippingDestination) {\n            setErrorConsignmentNumber(consignments.length + 1);\n        } else {\n            setErrorConsignmentNumber(undefined);\n            setIsAddShippingDestination(true);\n        }\n    };\n\n    const hasUnassignedItems = shippableItemsCount > 0;\n\n    const renderAllocatedBanner = (shippableItemsCount: number): ReactNode => {\n        if (shippableItemsCount > 0) {\n            return <Alert additionalClassName={themeV2 ? 'body-regular' : ''} type={AlertType.Info}>\n                <TranslatedString data={{ count: shippableItemsCount }} id=\"shipping.multishipping_item_to_allocate_message\" />\n            </Alert>;\n        }\n\n        return <Alert additionalClassName={themeV2 ? 'body-regular' : ''} type={AlertType.Success}>\n            <TranslatedString id=\"shipping.multishipping_all_items_allocated_message\" />\n        </Alert>;\n    }\n    const resetErrorConsignmentNumber = () => {\n        setErrorConsignmentNumber(undefined);\n    };\n\n    return (\n        <>\n            {renderAllocatedBanner(shippableItemsCount)}\n            {consignmentList.map((consignment: MultiShippingConsignmentData) => (\n                <ConsignmentListItem\n                    consignment={consignment}\n                    consignmentNumber={consignment.consignmentNumber}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    key={consignment.id}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n                />\n            ))}\n            {isAddShippingDestination && (\n                <NewConsignment\n                    consignmentNumber={consignments.length === 0 ? 1 : (consignments.length + 1)}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    setIsAddShippingDestination={setIsAddShippingDestination}\n                />)\n            }\n            {hasUnassignedItems &&\n                <Button\n                    className={classNames({ 'body-regular': themeV2 }, 'add-consignment-button')}\n                    onClick={handleAddShippingDestination}\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"shipping.multishipping_add_new_destination\" />\n                </Button>\n            }\n            {Boolean(errorConsignmentNumber) && (\n                <div className=\"form-field--error\">\n                    <span className=\"form-inlineMessage\">\n                        <TranslatedString\n                            data={{ consignmentNumber: errorConsignmentNumber }}\n                            id=\"shipping.multishipping_incomplete_consignment_error\"\n                        />\n                    </span>\n                </div>\n            )}\n            <MultiShippingFormFooter\n                cartHasChanged={cartHasChanged}\n                isLoading={isLoading}\n                shouldDisableSubmit={shouldDisableSubmit}\n                shouldShowOrderComments={shouldShowOrderComments}\n            />\n        </>\n    );\n}\n\nexport default withLanguage(\n    withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import React, { FunctionComponent } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedLink, TranslatedString } from \"@bigcommerce/checkout/locale\";\n\ninterface MultiShippingGuestFormProps {\n    onSignIn(): void;\n    onCreateAccount(): void;\n}\n\nconst MultiShippingGuestForm: FunctionComponent<MultiShippingGuestFormProps> = ({\n    onSignIn,\n    onCreateAccount\n}: MultiShippingGuestFormProps) => {\n    return (\n        <div className=\"checkout-step-info\">\n            <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n            <a\n                data-test=\"shipping-sign-in-link\"\n                href=\"#\"\n                onClick={preventDefault(onSignIn)}\n            >\n                <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n            </a>{' '}\n            <TranslatedLink\n                id=\"shipping.multishipping_guest_create\"\n                onClick={onCreateAccount}\n            />\n        </div>\n    )\n};\n\nexport default MultiShippingGuestForm;\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n            themeV2={themeV2}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { ReactElement, useEffect } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { DynamicFormField, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { Fieldset } from '../ui/form';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: unknown): void;\n}\n\nconst StaticAddressEditable = ({\n    address,\n    buttonId,\n    formFields,\n    isLoading,\n    methodId,\n    deinitialize,\n    initialize,\n    onFieldChange,\n    onUnhandledError = noop,\n}: StaticAddressEditableProps): ReactElement => {\n    const handleFieldValueChange = (name: string) => (value: string) => {\n        onFieldChange(name, value);\n    };\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const initialization = async () => {\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n    const deinitialization = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    useEffect(() => {\n        void initialization();\n\n        return () => {\n            void deinitialization();\n        };\n    }, []);\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <StaticAddress address={address} />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        id={buttonId}\n                        onClick={preventDefault()}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, MutableRefObject } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    countries?: Country[];\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    paypalFastlaneShippingComponentRef: MutableRefObject<PayPalFastlaneAddressComponentRef>;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        formFields,\n        isLoading,\n        onAddressSelect,\n        onFieldChange,\n        countries,\n        paypalFastlaneShippingComponentRef,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponentRef.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponentRef.current.showAddressSelector();\n\n            if (selectedAddress) {\n                const customFields = shouldShowCustomFormFields ? address.customFields : {};\n\n                onAddressSelect({\n                    ...selectedAddress,\n                    ...customFields,\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {!!(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {!!(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {!!address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {!!address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {!!address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {!!address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {!!address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                                type={AddressType.Shipping}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField\n} from '@bigcommerce/checkout-sdk';\nimport React, { FC, useEffect, useRef, useState } from 'react';\n\nimport {\n    isBigCommercePaymentsFastlaneMethod,\n    isBraintreeFastlaneMethod,\n    isPayPalCommerceFastlaneMethod,\n    isPayPalFastlaneMethod,\n    PayPalFastlaneShippingAddressForm,\n    usePayPalFastlaneAddress,\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId?: string,\n    shippingAddress?:  Address,\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[],\n    googleMapsApiKey?: string;\n    handleFieldChange(fieldName: string, value: string): void,\n    onAddressSelect(address: Address): void;\n}\n\ninterface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        addresses,\n        handleFieldChange,\n        isLoading\n    } = props;\n    const [isLoadingStrategy, setIsLoadingStrategyStrategy] = useState<boolean>(true);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n    const fastlaneOptions = (provider: string) => {\n        return {\n            [provider]: {\n                onPayPalFastlaneAddressChange: (\n                    showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n                ) => {\n                    paypalFastlaneShippingComponent.current.showAddressSelector =\n                        showPayPalFastlaneAddressSelector;\n                },\n            },\n        };\n    }\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...(isBigCommercePaymentsFastlaneMethod(methodId) ? fastlaneOptions('bigcommerce_payments_fastlane') : {}),\n                ...(isBraintreeFastlaneMethod(methodId) ? fastlaneOptions('braintreefastlane') : {}),\n                ...(isPayPalCommerceFastlaneMethod(methodId) ? fastlaneOptions('paypalcommercefastlane') : {})\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n\n        setIsLoadingStrategyStrategy(false);\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoadingStrategy || isLoading}>\n            {methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm ? (\n                <PayPalFastlaneShippingAddressForm\n                    address={shippingAddress}\n                    countries={countries}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initialize}\n                    isLoading={isLoadingStrategy}\n                    methodId={methodId}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={onFieldChange}\n                    onUnhandledError={onUnhandledError}\n                    paypalFastlaneShippingComponentRef={paypalFastlaneShippingComponent}\n                />\n            ) : (\n                <ShippingAddressForm\n                    address={shippingAddress}\n                    addresses={addresses}\n                    consignments={props.consignments}\n                    countries={countries}\n                    countriesWithAutocomplete={props.countriesWithAutocomplete}\n                    formFields={formFields}\n                    googleMapsApiKey={props.googleMapsApiKey}\n                    isFloatingLabelEnabled={props.isFloatingLabelEnabled}\n                    isLoading={isLoadingStrategy}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={handleFieldChange}\n                    onUseNewAddress={props.onUseNewAddress}\n                    shouldShowSaveAddress={props.shouldShowSaveAddress}\n                />\n            )}\n        </LoadingOverlay>\n    );\n};","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport { isPayPalFastlaneMethod } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress) {\n        return (\n            <PayPalFastlaneShippingAddress\n                {...props}\n                handleFieldChange={handleFieldChange}\n                methodId={methodId}\n                shippingAddress={shippingAddress}\n            />\n        )\n    }\n\n    if (methodId === 'amazonpay' && shippingAddress) {\n        return (\n            <AmazonPayShippingAddress\n                {...props}\n                shippingAddress={shippingAddress}\n            />\n        );\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    shippingFormRenderTimestamp?: number;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isInitialValueLoaded,\n    isLoading,\n    shippingFormRenderTimestamp,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend themeV2={themeV2}>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    className={themeV2 ? 'body-bold' : ''}\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport isSelectedShippingOptionValid from './isSelectedShippingOptionValid';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shippingAutosaveDelay?: number;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    shippingFormRenderTimestamp?: number;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n    const methodIdsWithoutCustomValidation: string[] = [\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    componentDidUpdate({ shippingFormRenderTimestamp }: SingleShippingFormProps) {\n        const {\n            shippingFormRenderTimestamp: newShippingFormRenderTimestamp,\n            setValues,\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n            values,\n            setFieldValue,\n        } = this.props;\n\n        const stateOrProvinceCodeFormField = getFields(values && values.shippingAddress?.countryCode).find(\n            ({ name }) => name === 'stateOrProvinceCode',\n        );\n\n        // Workaround for a bug found during manual testing:\n        // When the shipping step first loads, the `stateOrProvinceCode` field may not be there.\n        // It later appears with an empty value if the selected country has states/provinces.\n        // To address this, we manually set `stateOrProvinceCode` in Formik.\n        if (\n            stateOrProvinceCodeFormField &&\n            shippingAddress?.stateOrProvinceCode &&\n            !values.shippingAddress?.stateOrProvinceCode\n        ) {\n            setFieldValue('shippingAddress.stateOrProvinceCode', shippingAddress.stateOrProvinceCode);\n        }\n\n        // This is for executing extension command, `ReRenderShippingForm`.\n        if (newShippingFormRenderTimestamp !== shippingFormRenderTimestamp) {\n            setValues({\n                billingSameAsShipping: isBillingSameAsShipping,\n                orderComment: customerMessage,\n                shippingAddress: mapAddressToFormValues(\n                    getFields(shippingAddress && shippingAddress.countryCode),\n                    shippingAddress,\n                ),\n            });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n            shippingFormRenderTimestamp,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments) || !isSelectedShippingOptionValid(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            shouldHaveCustomValidation(methodId)\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false, // This is false due to the concern that a shopper may lose typed details if somehow checkout state changes in the middle.\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport isUsingMultiShipping from './isUsingMultiShipping';\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport MultiShippingGuestForm from './MultiShippingGuestForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    isGuestMultiShippingEnabled: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n    shippingFormRenderTimestamp?: number;\n    setIsMultishippingMode(isMultiShippingMode: boolean): void;\n}\n\nconst ShippingForm = ({\n    addresses,\n    cart,\n    cartHasChanged,\n      consignments,\n      countries,\n      countriesWithAutocomplete,\n      onCreateAccount,\n      customerMessage,\n      deinitialize,\n      deleteConsignments,\n      getFields,\n      googleMapsApiKey,\n      initialize,\n      isBillingSameAsShipping,\n      isGuest,\n      isLoading,\n      isMultiShippingMode,\n      isGuestMultiShippingEnabled,\n      methodId,\n      onMultiShippingSubmit,\n      onSignIn,\n      onSingleShippingSubmit,\n    onUnhandledError,\n      shippingAddress,\n      shouldShowOrderComments,\n      shouldShowSaveAddress,\n      signOut,\n      updateAddress,\n      isShippingStepPending,\n      isFloatingLabelEnabled,\n    isInitialValueLoaded,\n    shippingFormRenderTimestamp,\n    setIsMultishippingMode,\n}: ShippingFormProps & WithLanguageProps) => {\n    const {\n        checkoutState: {\n            data: { getConfig },\n        },\n    } = useCheckout();\n    const config = getConfig();\n\n    useEffect(() => {\n        if (shippingFormRenderTimestamp) {\n            const hasMultiShippingEnabled = config?.checkoutSettings?.hasMultiShippingEnabled ?? false;\n            const isMultiShippingMode =\n                !!cart &&\n                !!consignments &&\n                hasMultiShippingEnabled &&\n                isUsingMultiShipping(consignments, cart.lineItems);\n\n            setIsMultishippingMode(isMultiShippingMode);\n        }\n    }, [shippingFormRenderTimestamp]);\n\n    const getMultiShippingForm = () => {\n        if (isGuest && !isGuestMultiShippingEnabled) {\n            return (\n                <MultiShippingGuestForm onCreateAccount={onCreateAccount} onSignIn={onSignIn} />\n            );\n        }\n\n        return <MultiShippingForm\n            cartHasChanged={cartHasChanged}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            isLoading={isLoading}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n        />;\n    };\n\n    return isMultiShippingMode ? (\n        getMultiShippingForm()\n    ) : (\n        <SingleShippingForm\n            addresses={addresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, memo, useState } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ConfirmationModal , useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Legend } from '../ui/form';\n\nimport './ShippingHeader.scss';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n    cartHasPromotionalItems?: boolean;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n    cartHasPromotionalItems,\n}) => {\n    const [isSingleShippingConfirmationModalOpen, setIsSingleShippingConfirmationModalOpen] = useState(false);\n    const [isMultiShippingUnavailableModalOpen, setIsMultiShippingUnavailableModalOpen] = useState(false);\n\n    const { themeV2 } = useThemeContext();\n\n    const handleShipToSingleConfirmation = () => {\n        setIsSingleShippingConfirmationModalOpen(false);\n        onMultiShippingChange();\n    }\n\n    const showConfirmationModal = shouldShowMultiShipping && isMultiShippingMode;\n    const showMultiShippingUnavailableModal = shouldShowMultiShipping && !isMultiShippingMode && cartHasPromotionalItems;\n\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n            <div className={classNames(['form-legend-container', 'shipping-header'])}>\n                <Legend testId=\"shipping-address-heading\" themeV2={themeV2}>\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {showConfirmationModal && (\n                    <>\n                        <ConfirmationModal\n                            action={handleShipToSingleConfirmation}\n                            actionButtonLabel={<TranslatedString id=\"common.proceed_action\" />}\n                            headerId=\"shipping.ship_to_single_action\"\n                            isModalOpen={isSingleShippingConfirmationModalOpen}\n                            messageId=\"shipping.ship_to_single_message\"\n                            onRequestClose={() => setIsSingleShippingConfirmationModalOpen(false)}\n                        />\n                        <a\n                            className={themeV2 ? 'body-cta' : ''}\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsSingleShippingConfirmationModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_single\" />\n                        </a>\n                    </>\n                )}\n                {showMultiShippingUnavailableModal && (\n                    <>\n                        <ConfirmationModal\n                            action={() => setIsMultiShippingUnavailableModalOpen(false)}\n                            actionButtonLabel={<TranslatedString id=\"common.back_action\" />}\n                            headerId=\"shipping.multishipping_unavailable_action\"\n                            isModalOpen={isMultiShippingUnavailableModalOpen}\n                            messageId=\"shipping.multishipping_unavailable_message\"\n                            onRequestClose={() => setIsMultiShippingUnavailableModalOpen(false)}\n                        />\n                        <a\n                            className={themeV2 ? 'body-cta' : ''}\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsMultiShippingUnavailableModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_multi\" />\n                        </a>\n                    </>\n                )}\n                {!showConfirmationModal && !showMultiShippingUnavailableModal && shouldShowMultiShipping && (\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(\n    country: string,\n    state: string,\n): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n            const country = availableShippingList?.find(country => country.code === address.country)?.name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { withFormikExtended } from '../../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isInitialValueLoaded: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { ExtensionContextProps, withExtension } from '@bigcommerce/checkout/checkout-extension';\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton, ConfirmationModal } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isExperimentEnabled, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport hasPromotionalItems from './hasPromotionalItems';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n    setIsMultishippingMode(isMultiShippingMode: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    cartHasPromotionalItems: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    shouldRenderWhileLoading: boolean;\n    isGuestMultiShippingEnabled: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    isMultiShippingUnavailableModalOpen: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps & ExtensionContextProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps & ExtensionContextProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            isMultiShippingUnavailableModalOpen: false,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadBillingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n            cartHasPromotionalItems,\n            isMultiShippingMode,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\n\n            if (cartHasPromotionalItems && isMultiShippingMode) {\n                this.setState({ isMultiShippingUnavailableModalOpen: true });\n            }\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            isGuestMultiShippingEnabled,\n            step,\n            isFloatingLabelEnabled,\n            shouldRenderStripeForm,\n            shouldRenderWhileLoading,\n            cartHasPromotionalItems,\n            extensionState: { shippingFormRenderTimestamp } = {},\n            setIsMultishippingMode,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            isMultiShippingUnavailableModalOpen,\n        } = this.state;\n\n        const handleSwitchToSingleShipping = async () => {\n            this.setState({ isMultiShippingUnavailableModalOpen: false });\n            await this.handleMultiShippingModeSwitch();\n        }\n\n        if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\n                <div className=\"checkout-form\">\n                    <ConfirmationModal\n                        action={handleSwitchToSingleShipping}\n                        actionButtonLabel={<TranslatedString id=\"common.ok_action\" />}\n                        headerId=\"shipping.multishipping_unavailable_action\"\n                        isModalOpen={isMultiShippingUnavailableModalOpen}\n                        messageId=\"shipping.checkout_switched_to_single_shipping\"\n                        shouldShowCloseButton={false}\n                    />\n                    <ShippingHeader\n                        cartHasPromotionalItems={cartHasPromotionalItems}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isGuestMultiShippingEnabled={isGuestMultiShippingEnabled}\n                        isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        setIsMultishippingMode={setIsMultishippingMode}\n                        shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n            deleteConsignments,\n        } = this.props;\n\n        try {\n            this.setState({ isInitializing: true });\n\n            if (isMultiShippingMode && consignments.length) {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            }\n            else {\n                await deleteConsignments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n            isDeletingConsignment,\n            isLoadingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress() ||\n        isDeletingConsignment() ||\n        isLoadingCheckout();\n\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings.providerWithCustomCheckout,\n    );\n\n    const isGuestMultiShippingEnabled = isExperimentEnabled(config?.checkoutSettings, 'CHECKOUT-9161.enable_storefront_guest_multi_shipping');\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        cartHasPromotionalItems: hasPromotionalItems(cart),\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout,\n        shippingAddress,\n        shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n        isGuestMultiShippingEnabled,\n    };\n}\n\nexport default withExtension(withCheckout(mapToShippingProps)(Shipping));\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from '@popperjs/core';\nimport React, { ReactElement, ReactEventHandler, ReactNode, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children?: ReactNode;\n}\n\nconst TooltipTrigger = ({\n    children,\n    placement = 'bottom',\n    tooltip,\n}: TooltipTriggerProps): ReactElement => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const handleShow: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(true);\n    };\n\n    const handleHide: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(false);\n    };\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <span\n                        onBlur={handleHide}\n                        onFocus={handleShow}\n                        onMouseEnter={handleShow}\n                        onMouseLeave={handleHide}\n                        ref={ref}\n                    >\n                        {children}\n                    </span>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    shouldShow && (\n                        <div ref={ref} style={style}>\n                            {tooltip}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default TooltipTrigger;\n"],"names":["height","viewBox","width","xmlns","d","memo","bodyClassName","children","className","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","onToggle","selectedItemId","useContext","AccordionContext","A","isSelected","transitionEndListener","useCallback","node","done","addEventListener","target","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","id","props","Input","checked","type","Label","htmlFor","isDisabled","value","content","htmlId","kebabCase","label","rest","name","Checklist","C","renderInput","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","render","headerId","messageId","isModalOpen","action","actionButtonLabel","onRequestClose","noop","shouldShowCloseButton","additionalModalClassName","footer","onClick","size","Small","variant","Primary","header","role","isOpen","closeButtonLabel","additionalHeaderClassName","additionalBodyClassName","handleClose","event","ariaHideApp","bodyOpenClassName","base","afterOpen","beforeClose","closeTimeoutMS","overlayClassName","shouldCloseOnEsc","shouldCloseOnOverlayClick","href","preventDefault","Boolean","forwardRef","ref","additionalClassName","legend","testId","createContext","withIconContainer","AlertType","icon","describedBy","useId","Info","Error","Success","Warning","renderDefaultIcon","defaultSelectedItemId","onSelect","setSelectedItemId","useState","handleToggleItem","getContextValue","newSelectedItemId","Provider","ChecklistContext","undefined","connectFormik","formik","setFieldValue","useEffect","handleSelect","contextValue","useMemo","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","AmazonPay","BraintreeAcceleratedCheckout","PayPalCommerceAcceleratedCheckout","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","includes","providerId","hasPromotionalItems","cart","digitalItems","physicalItems","lineItems","filter","item","addedByPromotion","length","withFormikExtended","resetForm","isInitialValueLoaded","initialValues","previousIsInitialValueLoadedRef","useRef","current","values","SaveAddressForm","withLanguage","handleSubmit","onSaveAddress","mapPropsToValues","getFields","selectedAddress","mapAddressToFormValues","countryCode","validationSchema","language","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","isLoading","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","Button","Secondary","TranslatedString","onAfterOpen","addressFormProps","Modal","ModalHeader","AssignItemInvalidAddressError","CustomError","constructor","data","super","message","getLanguageService","translate","title","this","prototype","AssignItemFailedError","fill","onUseNewAddress","themeV2","SingleLineStaticAddress","address","setRecommendedOrMissingShippingOption","previousConsignment","currentConsignments","selectConsignmentShippingOption","previousShippingOptions","Map","map","consignment","selectedShippingOption","previousShippingOptionId","get","recommendedOption","availableShippingOptions","find","option","isRecommended","defaultCountryCode","onUnhandledError","setConsignmentRequest","isOpenNewAddressModal","setIsOpenNewAddressModal","createCustomerAddressError","setCreateCustomerAddressError","checkoutState","getShippingCountries","getCustomer","getConfig","getConsignments","getPreviousConsignments","getShippingAddressFields","checkoutService","updateConsignment","createCustomerAddress","customer","isFloatingLabelEnabledFlag","addresses","isGuest","handleSelectAddress","isValidAddress","shippingAddress","quantity","error","handleUseNewAddress","ErrorModal","onClose","shouldShowErrorCode","addressFormValues","mapAddressFromFormValues","AddressSelect","onSelectAddress","placeholderText","showSingleLineAddress","AddressType","Shipping","ItemSplitTooltip","TooltipTrigger","placement","tooltip","Tooltip","IconHelp","assignedItems","onUnassignItem","count","shippableItemsCount","hasSplitItems","key","toString","IconClose","isMobileView","imageUrl","alt","src","options","nameId","FormField","input","TextInput","min","items","formErrors","LineItemType","onAllocateItems","Object","keys","lineItemId","unassignedItems","forEach","enableReinitialize","createItemSchema","baseSchema","required","integer","max","Custom","oneOf","schemaObject","fromEntries","shape","validateOnBlur","validateOnChange","consignmentNumber","setValues","dirty","submitForm","errors","allocatedOrSelectedItemsMessage","leftItemsTotal","selectedItems","reduce","acc","push","Array","from","Set","hasItemsAssigned","hasUnassignedItems","modalFooter","index","Alert","hasDigitalItems","UnassignItemError","generateHash","btoa","encodeURIComponent","join","calculateShippableItemsCount","total","hasSplitItem","itemHashMap","processedHashes","hash","has","add","mapConsignmentsItems","consignments","unassignedItemsMap","digitalItemsMap","consignmentList","set","Physical","productId","variantId","sku","valueId","generateItemHash","customItems","Digital","consignmentLineItems","lineItemIds","delete","unassignedItemsList","defaultMultiShippingConsignmentItems","useMultiShippingConsignmentItems","getCheckout","nonBundledLineItems","parentId","removeBundledItems","isOpenAllocateItemsModal","setIsOpenAllocateItemsModal","showItems","setShowItems","assignItemsToAddress","assignItem","deleteItem","createConsignments","deleteConsignment","consignmentRequest","consignmentIdToBeDeleted","consignmentsReponse","c","useDeallocateItem","toggleAllocateItemsModal","itemsCount","itemToDelete","IconChevronUp","IconChevronDown","ConsignmentLineItemDetail","MultiShippingOptionsListItem","consignmentId","selectedShippingOptionId","shippingOption","description","ShopperCurrency","amount","cost","RadioInput","readOnly","shippingOptions","onSelectedOption","getShippableLineItems","result","i","isNil","concat","lineItemIndex","splitItems","findConsignment","splitItem","getRecommendedShippingOption","ShippingOptionListItem","isMultiShippingMode","renderLabel","StaticShippingOption","displayAdditionalInformation","method","Extension","region","ChecklistItem","inputName","getShippingOptionIds","shippingOptionIds","ShippingOptionsForm","PureComponent","selectDefaultShippingOptions","selectShippingOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","shippingFormRenderTimestamp","analyticsTracker","shouldShowShippingOptions","newShippingFormRenderTimestamp","showShippingMethods","componentWillUnmount","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","rows","renderNoShippingOptions","StaticAddress","StaticConsignmentItemList","withAnalytics","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isUpdatingAddress","statuses","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","withCheckout","getCart","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","indexOf","sortConsignments","shippingQuoteFailedMessage","MultiShippingOptions","resetErrorConsignmentNumber","isLoadingOptions","MultiShippingOptionsList","shippingOptionId","isSelectedShippingOptionValid","every","shouldShowOrderComments","shouldDisableSubmit","cartHasChanged","OrderComments","setIsAddShippingDestination","country","code","onSubmit","customerMessage","orderComment","errorConsignmentNumber","setErrorConsignmentNumber","unassignedLineItems","isAddShippingDestination","isEveryConsignmentHasShippingOption","hasSelectedShippingOptions","enableOrderComments","renderAllocatedBanner","errorConsignmentIndex","findIndex","onSignIn","onCreateAccount","TranslatedLink","labelContent","CheckboxFormField","buttonId","deinitialize","initialize","onFieldChange","customFormFields","custom","shouldShowCustomFormFields","style","padding","Tiny","Fieldset","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","onAddressSelect","paypalFastlaneShippingComponentRef","localizeAddress","hideContentWhenLoading","firstName","lastName","phone","company","address1","address2","city","localizedProvince","postalCode","localizedCountry","PoweredByPayPalFastlaneLabel","showAddressSelector","customFields","addressFieldName","ShippingAddressForm","Component","fieldName","fieldValue","formFieldName","handleAutocompleteToggle","inputValue","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","PayPalFastlaneShippingAddress","handleFieldChange","isLoadingStrategy","setIsLoadingStrategyStrategy","paypalFastlaneShippingComponent","fastlaneOptions","provider","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","hasRequestedShippingOptions","setSubmitted","FormContext","SHIPPING_ADDRESS_FIELDS","Legend","ShippingOptions","SingleShippingForm","state","isResettingAddress","isUpdatingShippingData","isValid","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setState","deleteConsignments","e","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","isBillingSameAsShipping","stateOrProvinceCode","billingSameAsShipping","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","isArray","isEqual","isEqualAddress","contextType","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","isGuestMultiShippingEnabled","onMultiShippingSubmit","onSingleShippingSubmit","signOut","setIsMultishippingMode","hasMultiShippingEnabled","isUsingMultiShipping","onMultiShippingChange","shouldShowMultiShipping","cartHasPromotionalItems","isSingleShippingConfirmationModalOpen","setIsSingleShippingConfirmationModalOpen","isMultiShippingUnavailableModalOpen","setIsMultiShippingUnavailableModalOpen","showConfirmationModal","showMultiShippingUnavailableModal","ConfirmationModal","StripeShippingAddressDisplay","StripeStateMapper","stateList","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","stateOrProvince","shouldSaveAddress","handleLoading","availableShippingList","allowedCountries","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","stripeupe","container","onChangeShipping","availableCountries","getStyles","containerId","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","gatewayId","renderCheckoutThemeStylesForStripeUPE","StripeShippingForm","StripeShipping","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","shouldRenderWhileLoading","extensionState","email","renderWhileLoading","deleteConsignmentsSelector","getShippingAddress","mapToShippingProps","getBillingAddress","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","isDeletingConsignment","isLoadingCheckout","features","getShippableItemsCount","isExperimentEnabled","deinitializeShipping","signOutCustomer","unassignItem","unassignItemsToAddress","StripeUPE","shouldUseStripeLinkByMinimumAmount","withExtension","shouldShow","setShouldShow","handleShow","handleHide","onBlur","onFocus","onMouseEnter","onMouseLeave","modifiers","enabled"],"sourceRoot":""}