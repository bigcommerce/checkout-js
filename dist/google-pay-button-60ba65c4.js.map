{"version":3,"file":"google-pay-button-60ba65c4.js","mappings":"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","sources":["webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx","webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx"],"sourcesContent":["enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { number } from 'card-validator';\n\nimport { WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    getPaymentMethodName,\n    PaymentFormService,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\n\nexport interface WalletButtonPaymentMethodProps {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WalletButtonPaymentMethodDerivedProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n}\n\nclass WalletButtonPaymentMethodComponent extends Component<WalletButtonPaymentMethodProps> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            paymentForm: { disableSubmit },\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<WalletButtonPaymentMethodProps & WalletButtonPaymentMethodDerivedProps>,\n    ): void {\n        const { method } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false } = this.props;\n        const { isPaymentSelected } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, signInButtonClassName, signInButtonLabel, method, language } = this.props;\n\n        return (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const { buttonId, editButtonClassName, editButtonLabel, shouldShowEditButton, method } =\n            this.props;\n        const { accountMask, cardName, cardType, expiryMonth, expiryYear } =\n            this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <>\n                {!!cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {!!accountMask && !!cardType && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {!!expiryMonth && !!expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {!!shouldShowEditButton && (\n                    <p>\n                        {\n                            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                            <a\n                                className={editButtonClassName}\n                                href=\"#\"\n                                id={buttonId}\n                                onClick={preventDefault()}\n                            >\n                                {editButtonLabel || (\n                                    <TranslatedString id=\"remote.select_different_card_action\" />\n                                )}\n                            </a>\n                        }\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const {\n            paymentForm: { disableSubmit },\n            method,\n        } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { signOutCustomer, method, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n\n    private getWalletButtonPaymentMethodDerivedProps(): WalletButtonPaymentMethodDerivedProps {\n        const { checkoutState, method } = this.props;\n        const {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        } = checkoutState;\n        const billingAddress = getBillingAddress();\n        const checkout = getCheckout();\n\n        if (!billingAddress || !checkout) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n        return {\n            ...walletPaymentData,\n            // FIXME: I'm not sure how this would work for non-English names.\n            cardName:\n                walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        };\n    }\n}\n\nexport default WalletButtonPaymentMethodComponent;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions = {\n                ...defaultOptions,\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n"],"names":["PaymentMethodType","getPaymentMethodName","language","method","name","translations","PaymentMethodId","Affirm","translate","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","id","getTranslatedPaymentMethodName","MultiOption","config","displayName","capitalize","get","onSignOut","className","TranslatedString","href","onClick","preventDefault","data","providerName","formatAccountMask","accountMask","padding","includes","object","card_information","cardData","isWalletButtonInitializationData","number","cardType","type","expiryMonth","expMonth","expiryYear","expYear","accountNum","card","expDate","substr","niceType","WalletButtonPaymentMethodComponent","Component","handleSignOut","signOutCustomer","noop","onSignOutError","this","props","methodId","window","location","reload","error","componentDidMount","initializePayment","onUnhandledError","toggleSubmit","gatewayId","gateway","componentWillUnmount","deinitializePayment","paymentForm","disableSubmit","componentDidUpdate","prevProps","isPaymentDataRequired","getWalletButtonPaymentMethodDerivedProps","prevMethod","prevIsPaymentDataRequired","initializationData","render","isInitializing","isPaymentSelected","LoadingOverlay","hideContentWhenLoading","isLoading","renderPaymentView","renderSignInView","buttonId","signInButtonClassName","signInButtonLabel","editButtonClassName","editButtonLabel","shouldShowEditButton","cardName","checkoutState","getBillingAddress","getCheckout","billingAddress","checkout","Error","walletPaymentData","firstName","lastName","join","some","payments","providerId","checkoutService","rest","initializeGooglePayPayment","useCallback","defaultOptions","reinitializePayment","options","loadingContainerId","mergedOptions","AdyenV2GooglePay","walletButton","onError","onPaymentSelect","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BigCommercePaymentsGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","StripeGooglePay","StripeUPEGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","CheckoutcomGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay"],"sourceRoot":""}