{"version":3,"file":"shipping-5cb6a28f.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/shipping/hasPromotionalItems.tsx","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/utils/setRecommendedOrMissingShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentAddressSelector.tsx","webpack://checkout/./packages/core/src/app/shipping/ItemSplitTooltip.tsx","webpack://checkout/./packages/core/src/app/shipping/AllocatedItemsList.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItem.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItemsTable.tsx","webpack://checkout/./packages/core/src/app/shipping/MultishippingV2Type.ts","webpack://checkout/./packages/core/src/app/shipping/AllocateItemsModal.tsx","webpack://checkout/./packages/core/src/app/shipping/hooks/useDeallocateItem.ts","webpack://checkout/./packages/core/src/app/shipping/utils/generateItemHash.tsx","webpack://checkout/./packages/core/src/app/shipping/hooks/useMultishippingConsignmentItems.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentLineItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsListItemV2.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsListV2.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsV2.tsx","webpack://checkout/./packages/core/src/app/shipping/ConsignmentListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormV2Footer.tsx","webpack://checkout/./packages/core/src/app/shipping/NewConsignment.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormV2.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingGuestForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronUp.tsx","webpack://checkout/./packages/ui/src/button/Button.tsx","webpack://checkout/./packages/ui/src/modal/ConfirmationModal.tsx","webpack://checkout/./packages/ui/src/icon/IconClose.tsx","webpack://checkout/./packages/ui/src/modal/Modal.tsx","webpack://checkout/./packages/ui/src/modal/ModalHeader.tsx"],"sourcesContent":["import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nexport default function hasPromotionalItems(cart: Cart): boolean {\n    const { digitalItems = [], physicalItems } = cart.lineItems;\n    \n    return [...digitalItems, ...physicalItems].filter((item) => item.addedByPromotion)?.length > 0;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <Button\n                    onClick={onRequestClose}\n                    variant={ButtonVariant.Secondary}>\n                    <TranslatedString id=\"common.cancel_action\" />\n                </Button>\n\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { FormikProps, FormikValues, withFormik, WithFormikConfig } from 'formik';\nimport React, { ComponentType, useEffect, useRef } from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<TOuterProps, TValues extends FormikValues, TPayload = TValues>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>) => {\n        const DecoratedComponent: ComponentType<TOuterProps & FormikProps<TValues> & WithFormikExtendedProps> = (props) => {\n            const { resetForm, isInitialValueLoaded } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false && \n                    isInitialValueLoaded === true\n                ) {\n                    resetForm();\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect, AddressType } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        () => {\n            onUseNewAddress(id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                    type={AddressType.Shipping}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate(): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            isMultiShippingMode = {isMultiShippingMode}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm));\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isInitialValueLoaded: boolean;\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nexport const isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, isUpdatingAddress?: boolean) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props.isUpdatingAddress),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isInitialValueLoaded,\n    isLoading,\n}) => {\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { ErrorModal } from '../common/error';\nimport { withFormikExtended } from '../common/form';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    validateAddressFields: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    createCustomerAddress(address: AddressRequestBody): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isInitialValueLoaded,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isInitialValueLoaded={isInitialValueLoaded}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (itemId: string, itemKey: string) => void = (\n        itemId,\n        itemKey,\n    ) => {\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields, validateAddressFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode), validateAddressFields)) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import { CheckoutSelectors, Consignment, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\n\nconst createShippingOptionsMap = (consignments: Consignment[]): Map<string, string | undefined> => {\n    return new Map(\n        consignments.map((consignment) => [consignment.id, consignment.selectedShippingOption?.id]),\n    );\n};\n\nexport const setRecommendedOrMissingShippingOption = async (\n    previousConsignment: Consignment[],\n    currentConsignments: Consignment[],\n    selectConsignmentShippingOption: (\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions<object> | undefined,\n    ) => Promise<CheckoutSelectors>,\n): Promise<void> => {\n    const previousShippingOptions = createShippingOptionsMap(previousConsignment);\n\n    for (const consignment of currentConsignments) {\n        if (!consignment.selectedShippingOption) {\n            const previousShippingOptionId = previousShippingOptions.get(consignment.id);\n\n            if (previousShippingOptionId) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, previousShippingOptionId);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const recommendedOption = consignment.availableShippingOptions?.find(\n                (option) => option.isRecommended,\n            );\n\n            if (recommendedOption) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, recommendedOption.id);\n            }\n        }\n    }\n};\n","import { Address, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\nimport React, { useState } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { AddressFormModal, AddressFormValues, AddressSelect, AddressType, isValidAddress, mapAddressFromFormValues } from \"../address\";\nimport { ErrorModal } from \"../common/error\";\nimport { EMPTY_ARRAY, isExperimentEnabled, isFloatingLabelEnabled } from \"../common/utility\";\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from \"./errors\";\nimport { MultiShippingConsignmentData } from \"./MultishippingV2Type\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface ConsignmentAddressSelectorProps {\n    consignment?: MultiShippingConsignmentData;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    setConsignmentRequest?(consignmentRequest: ConsignmentCreateRequestBody): void;\n    selectedAddress?: Address;\n}\n\nconst ConsignmentAddressSelector = ({\n    consignment,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    selectedAddress,\n    setConsignmentRequest,\n}: ConsignmentAddressSelectorProps) => {\n    const [isOpenNewAddressModal, setIsOpenNewAddressModal] = useState(false);\n    const [createCustomerAddressError, setCreateCustomerAddressError] = useState<Error>();\n\n    const {\n        checkoutState: {\n            data: {\n                getShippingCountries,\n                getCustomer,\n                getConfig,\n                getConsignments: getPreviousConsignments,\n                getShippingAddressFields: getFields,\n            },\n        },\n        checkoutService: {\n            updateConsignment,\n            createCustomerAddress,\n            selectConsignmentShippingOption,\n        },\n    } = useCheckout();\n\n    const countries = getShippingCountries() || EMPTY_ARRAY;\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!config || !customer) {\n        return null;\n    }\n\n    const isFloatingLabelEnabledFlag = isFloatingLabelEnabled(config.checkoutSettings);\n    // TODO: add filter for addresses\n    const addresses = customer.addresses || EMPTY_ARRAY;\n    const {\n        checkoutSettings: {\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const validateAddressFields =\n        isExperimentEnabled(\n            config.checkoutSettings,\n            'CHECKOUT-7560.address_fields_max_length_validation',\n        );\n\n    const handleSelectAddress = async (address: Address) => {\n        if (!isValidAddress(address, getFields(address.countryCode), validateAddressFields)) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        if (!consignment) {\n            setConsignmentRequest?.({\n                address,\n                shippingAddress: address,\n                lineItems: [],\n            });\n\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await updateConsignment({\n                id: consignment.id,\n                address,\n                shippingAddress: address,\n                lineItems: consignment.lineItems.map(({ id, quantity }) => ({ itemId: id, quantity })),\n            });\n\n            const currentConsignments = getConsignments();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    }\n\n    const handleUseNewAddress = () => {\n        setIsOpenNewAddressModal(true);\n    }\n\n    const handleCloseAddAddressForm = () => {\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleSaveAddress = async (addressFormValues: AddressFormValues) => {\n        const address = mapAddressFromFormValues(addressFormValues);\n\n        await handleSelectAddress(address);\n\n        try {\n            await createCustomerAddress(address);\n        } catch (error) {\n            if (error instanceof Error) {\n                setCreateCustomerAddressError(error);\n            }\n        }\n\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleCloseErrorModal = () => {\n        setCreateCustomerAddressError(undefined);\n    }\n\n    return (\n        <>\n            <ErrorModal\n                error={createCustomerAddressError}\n                message={\n                    <>\n                        <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                        <TranslatedString id=\"customer.create_address_error\" />\n                    </>\n                }\n                onClose={handleCloseErrorModal}\n                shouldShowErrorCode={false}\n            />\n            <AddressFormModal\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabledFlag}\n                isLoading={isLoading}\n                isOpen={isOpenNewAddressModal}\n                onRequestClose={handleCloseAddAddressForm}\n                onSaveAddress={handleSaveAddress}\n            />\n            <AddressSelect\n                addresses={addresses}\n                onSelectAddress={handleSelectAddress}\n                onUseNewAddress={handleUseNewAddress}\n                placeholderText={<TranslatedString id=\"shipping.choose_shipping_address\" />}\n                selectedAddress={selectedAddress}\n                showSingleLineAddress\n                type={AddressType.Shipping}\n            />\n        </>\n    )\n}\n\nexport default ConsignmentAddressSelector;\n","import React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { IconHelp, TooltipTrigger } from \"@bigcommerce/checkout/ui\";\n\nimport { Tooltip } from \"../ui/tooltip\";\nimport \"./ItemSplitTooltip.scss\";\n\nexport const ItemSplitTooltip: FunctionComponent = () => {\n    return (\n        <TooltipTrigger\n            placement=\"right-start\"\n            tooltip={\n                <Tooltip>\n                    <TranslatedString\n                        id=\"shipping.multishipping_item_split_tooltip_message\"\n                    />\n                </Tooltip>\n            }\n        >\n            <span className=\"item-split-tooltip\" data-test=\"split-item-tooltip\">\n                <IconHelp />\n            </span>\n        </TooltipTrigger>\n    )\n};\n","import React from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconClose } from \"../ui/icon\";\n\nimport { renderItemContent } from \"./ConsignmentLineItemDetail\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\n\ninterface AllocatedItemsListProps {\n    assignedItems: MultiShippingTableData;\n    onUnassignItem(itemToDelete: MultiShippingTableItemWithType): void;\n}\n\nconst AllocatedItemsList = ({ assignedItems, onUnassignItem }: AllocatedItemsListProps) => {\n    return (\n        <div className=\"allocated-line-items\">\n            <h3>\n                <TranslatedString data={{ count: assignedItems.shippableItemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\n                {assignedItems.hasSplitItems && (\n                    <ItemSplitTooltip />\n                )}\n            </h3>\n            <ul className=\"allocated-line-items-list\">\n                {assignedItems.lineItems.map(item => (\n                    <li key={item.id}>\n                        {renderItemContent(item)}\n                        <span data-test={`remove-${item.id.toString()}-button`} onClick={() => onUnassignItem(item)}>\n                            <IconClose />\n                        </span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default AllocatedItemsList;\n","import React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\n\nimport { FormField, TextInput } from \"../ui/form\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\n\ninterface LeftToAllocateItemProps {\n    item: MultiShippingTableItemWithType;\n    error?: string;\n}\n\nconst LeftToAllocateItem: FunctionComponent<LeftToAllocateItemProps> = ({ item, error }: LeftToAllocateItemProps) => {\n    const isMobileView = isMobileViewUI();\n\n    return (\n        <tr>\n            <td className=\"left-to-allocate-item-name-container\">\n                <figure className=\"left-to-allocate-item-figure\">\n                    {item.imageUrl && <img alt={item.name} src={item.imageUrl} />}\n                </figure>\n                <div>\n                    <p className=\"left-to-allocate-item-name\">{item.name}</p>\n                    {item.options?.map(option => (\n                        <p className=\"left-to-allocate-item-option\" key={option.nameId}>{option.name}: {option.value}</p>\n                    ))}\n                </div>\n            </td>\n            {!isMobileView && <td>{item.quantity}</td>}\n            <td>\n                {isMobileView && <TranslatedString data={{ count: item.quantity }} id=\"shipping.multishipping_left_to_allocate_message\" />}\n                <FormField\n                    additionalClassName={error ? \"form-field--error\" : \"\"}\n                    input={({ field }) => <TextInput\n                        {...field}\n                        aria-label={`Quantity of ${item.name}`}\n                        disabled={item.quantity === 0}\n                        id={field.name}\n                        min={0}\n                        type=\"number\"\n                    />}\n                    name={item.id.toString()}\n                />\n            </td>\n        </tr>\n    );\n}\n\nexport default LeftToAllocateItem;\n","import { FormikErrors } from \"formik\";\nimport React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { AllocateItemsModalFormValues } from \"./AllocateItemsModal\";\nimport LeftToAllocateItem from \"./LeftToAllocateItem\";\nimport { MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\n\ninterface LeftToAllocateItemsTableProps {\n    items: MultiShippingTableItemWithType[];\n    formErrors: FormikErrors<AllocateItemsModalFormValues>;\n}\n\nconst LeftToAllocateItemsTable: FunctionComponent<LeftToAllocateItemsTableProps> = ({ items, formErrors }: LeftToAllocateItemsTableProps) => {\n    const isMobileView = isMobileViewUI();\n\n    return (\n        <table className=\"table left-to-allocate-items-table\">\n            <thead>\n                <tr>\n                    <th><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_item\" /></th>\n                    {!isMobileView && <th><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_left_to_allocate\" /></th>}\n                    <th><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_quantity\" /></th>\n                </tr>\n            </thead>\n            <tbody>\n                {items.map(item => (\n                    <LeftToAllocateItem\n                        error={formErrors[item.id.toString()]}\n                        item={item}\n                        key={item.id}\n                    />      \n                ))}\n            </tbody>\n        </table>\n    );\n}\n\nexport default LeftToAllocateItemsTable;\n","import { Consignment, LineItemOption, PhysicalItem } from \"@bigcommerce/checkout-sdk\";\n\nexport enum LineItemType {\n    Physical,\n    Digital,\n    GiftCertificate,\n    Custom,\n}\n\nexport interface MultiShippingTableItem {\n    name: string;\n    options?: LineItemOption[];\n    giftWrapping?: PhysicalItem['giftWrapping'];\n    sku: string;\n    quantity: number;\n    id: string | number;\n    imageUrl?: string;\n}\n\nexport interface MultiShippingTableItemWithType extends MultiShippingTableItem {\n    type: LineItemType;\n}\n\nexport interface MultiShippingTableData {\n    lineItems: MultiShippingTableItemWithType[];\n    hasDigitalItems: boolean;\n    hasSplitItems: boolean;\n    shippableItemsCount: number;\n};\n\nexport interface MultiShippingConsignmentData extends Consignment, MultiShippingTableData {\n    consignmentNumber: number;\n}\n","import { Address, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport { FormikProps } from \"formik\";\nimport React, { FunctionComponent, useMemo } from \"react\";\nimport { number, object } from \"yup\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString, withLanguage, WithLanguageProps } from \"@bigcommerce/checkout/locale\";\nimport { Alert, AlertType, ButtonVariant } from \"@bigcommerce/checkout/ui\";\n\nimport { getAddressContent } from \"../address/SingleLineStaticAddress\";\nimport { withFormikExtended } from \"../common/form\";\nimport { Button } from \"../ui/button\";\nimport { Form } from \"../ui/form\";\nimport { Modal, ModalHeader } from \"../ui/modal\";\n\nimport AllocatedItemsList from \"./AllocatedItemsList\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport LeftToAllocateItemsTable from \"./LeftToAllocateItemsTable\";\nimport { LineItemType, MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\n\nexport interface AllocateItemsModalFormValues {\n    [key: string]: number;\n}\n\ninterface AllocateItemsModalProps {\n    consignmentNumber: number;\n    isOpen: boolean;\n    onRequestClose?(): void;\n    address: Address;\n    unassignedItems: MultiShippingTableData;\n    assignedItems?: MultiShippingTableData;\n    onAllocateItems(consignmentLineItems: ConsignmentLineItem[]): void;\n    onUnassignItem?(itemToDelete: MultiShippingTableItemWithType): void;\n    isLoading: boolean;\n}\n\nconst AllocateItemsModal: FunctionComponent<AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>> = ({\n    consignmentNumber,\n    isOpen,\n    onRequestClose,\n    address,\n    assignedItems,\n    unassignedItems,\n    setValues,\n    values,\n    dirty,\n    submitForm,\n    errors,\n    onUnassignItem,\n    isLoading,\n}: AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>) => {\n\n    const allocatedOrSelectedItemsMessage = useMemo(() => {\n        const leftItemsTotal = unassignedItems.shippableItemsCount;\n\n        if (values && dirty) {\n            const selectedItems = Object.keys(values).reduce((acc, key) => {\n                if (values[key] > 0) {\n                    acc += values[key];\n                }\n\n                return acc;\n            }, 0);\n\n            return <TranslatedString data={{ count: `${selectedItems}/${leftItemsTotal}` }} id=\"shipping.multishipping_items_selected_message\" />;\n        }\n\n        return <TranslatedString data={{ count: leftItemsTotal }} id=\"shipping.multishipping_item_to_allocate_message\" />;\n    }, [values]);\n\n    const handleSelectAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = item.quantity;\n        });\n        setValues(values);\n    };\n\n    const handleClearAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = 0;\n        });\n        setValues(values);\n    }\n\n    const formErrors = useMemo(() => {\n        const errorKeys = Object.keys(errors);\n\n        return errorKeys.reduce((acc: string[], key: string) => {\n            const error = errors[key];\n\n            if (error) {\n                acc.push(error);\n            }\n\n            return Array.from(new Set(acc));\n        }, []);\n    }, [errors]);\n\n    const hasItemsAssigned = !!assignedItems && assignedItems.lineItems.length > 0 && !!onUnassignItem;\n    const hasUnassignedItems = !!unassignedItems && unassignedItems.lineItems.length > 0;\n\n    const modalFooter = (\n        <>\n            <Button\n                disabled={isLoading}\n                onClick={onRequestClose}\n                variant={ButtonVariant.Secondary}\n            >\n                <TranslatedString id=\"shipping.multishipping_items_allocate_cancel\" />\n            </Button>\n            <Button\n                disabled={!hasItemsAssigned && !dirty}\n                isLoading={isLoading}\n                onClick={submitForm}\n                type=\"submit\"\n                variant={ButtonVariant.Primary}\n            >\n                {hasItemsAssigned \n                    ? <TranslatedString id=\"shipping.multishipping_items_allocate_save\" /> \n                    : <TranslatedString id=\"shipping.multishipping_items_allocate_allocate\" />\n                }\n            </Button>\n        </>\n    );\n\n    return (\n        <Modal\n            additionalModalClassName=\"allocate-items-modal\"\n            footer={modalFooter}\n            header={\n                <>\n                    <ModalHeader>\n                        <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                    </ModalHeader>\n                    <h4>{getAddressContent(address)}</h4>\n                </>\n            }\n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n        > \n            <Form>\n                {formErrors.length > 0 && (\n                    <div className=\"form-errors\">\n                        {formErrors.map((error, index) => (\n                            <Alert key={index} type={AlertType.Error}>{error}</Alert>\n                        ))}\n                    </div>\n                )}\n                {unassignedItems.hasDigitalItems && (\n                            <Alert type={AlertType.Info}>\n                                <TranslatedString id=\"shipping.multishipping_digital_item_no_shipping_banner\" />\n                                </Alert>\n                )}\n                {hasItemsAssigned && (\n                    <AllocatedItemsList assignedItems={assignedItems} onUnassignItem={onUnassignItem} />\n                )}\n                {hasUnassignedItems\n                    ? <>\n                        <div className=\"left-to-allocate-items-table-actions\">\n                            <p>\n                                {allocatedOrSelectedItemsMessage}\n                                {unassignedItems.hasSplitItems && (\n                                    <ItemSplitTooltip />\n                                )}\n                            </p>\n\n                            <div className=\"button-group\">\n                                <a\n                                    data-test=\"clear-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleClearAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_clear_all\" />\n                                </a>\n                                <a\n                                    data-test=\"allocate-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleSelectAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_select_all_items_left\" />\n                                </a>\n                            </div>\n                        </div>\n                        <LeftToAllocateItemsTable\n                            formErrors={errors}\n                            items={unassignedItems.lineItems}\n                        />\n                    </>\n                    : null\n                }\n            </Form>\n        </Modal>\n    )\n}\n\nexport default withLanguage(\n    withFormikExtended<AllocateItemsModalProps & WithLanguageProps, AllocateItemsModalFormValues>({\n        handleSubmit: (values, { props: { onAllocateItems } }) => {\n            const consignmentLineItems = Object.keys(values).filter(key => values[key] > 0).map((lineItemId: string) => ({\n                itemId: lineItemId,\n                quantity: values[lineItemId],\n            }));\n\n            onAllocateItems(consignmentLineItems);\n        },\n        mapPropsToValues: ({ unassignedItems }) => {\n            const values: AllocateItemsModalFormValues = {};\n\n            unassignedItems.lineItems.forEach(item => {\n                values[item.id.toString()] = 0;\n            });\n\n            return values;\n        },\n        enableReinitialize: true,\n        validationSchema: ({ language, unassignedItems }: AllocateItemsModalProps & WithLanguageProps) => {\n            const createItemSchema = (item: MultiShippingTableItemWithType) => {\n                const baseSchema = number()\n                    .required(language.translate('shipping.quantity_required_error'))\n                    .integer(language.translate('shipping.quantity_invalid_error'))\n                    .min(0, language.translate('shipping.quantity_min_error'))\n                    .max(item.quantity, language.translate('shipping.quantity_max_error'))\n\n                if (item.type === LineItemType.Custom) {\n                    return baseSchema\n                        .oneOf([0, item.quantity], language.translate('shipping.custom_item_quantity_error'))\n                }\n\n                return baseSchema;\n            };\n\n            const schemaObject = Object.fromEntries(\n                unassignedItems.lineItems.map((item) => [item.id.toString(), createItemSchema(item)]),\n            );\n\n            return object().shape(schemaObject);\n        },\n        validateOnBlur: true,\n        validateOnChange: false,\n    })(AllocateItemsModal),\n);\n","import { Consignment, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\n\nexport const useDeallocateItem = () => {\n    const {\n        checkoutService: { createConsignments, deleteConsignment },\n    } = useCheckout();\n\n    // this is a workaround to handle removing an item from a consignment\n    // current consignment API does not support removing an item directly - Oct 2024\n\n    const deleteItem = async (consignmentRequest: ConsignmentCreateRequestBody, itemId: string, consignment: Consignment) => {\n        let consignmentIdToBeDeleted: string | undefined = consignment.id;\n\n        if (consignment.lineItemIds.length > 1) {\n            const checkoutResponse = await createConsignments([consignmentRequest]);\n\n            const consignmentsReponse = checkoutResponse.data.getConsignments();\n\n            consignmentIdToBeDeleted = consignmentsReponse?.find((c) =>\n                c.lineItemIds.find((lineItemId) => lineItemId === itemId),\n            )?.id;\n        }\n\n        if (!consignmentIdToBeDeleted) {\n            throw new Error('Unable to find consignment to delete');\n        }\n\n        deleteConsignment(consignmentIdToBeDeleted);\n    }\n\n    return deleteItem;\n}\n","import { LineItem, LineItemOption } from \"@bigcommerce/checkout-sdk\";\n\nconst generateHash = (values: string[]): string => {\n  return btoa(encodeURIComponent(values.join('-')));\n};\n\nconst generateProductOptionsHash = (options: LineItemOption[] | undefined): string => {\n  if (!options) {\n    return '';\n  }\n\n  return generateHash(\n    options.map((option) =>\n      generateHash([\n        option.name,\n        option.nameId.toString(),\n        option.value,\n        option.valueId ? option.valueId.toString() : '',\n      ]),\n    ),\n  );\n};\n\nexport const generateItemHash = (item: LineItem): string => {\n  return generateHash([\n    item.productId.toString(),\n    item.variantId.toString(),\n    item.sku,\n    generateProductOptionsHash(item.options),\n  ]);\n};\n","import { Consignment, LineItemMap } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { LineItemType, MultiShippingConsignmentData, MultiShippingTableData, MultiShippingTableItemWithType } from \"../MultishippingV2Type\";\nimport { generateItemHash } from \"../utils\";\n\ninterface MultiShippingConsignmentItemsHook {\n    unassignedItems: MultiShippingTableData;\n    consignmentList: MultiShippingConsignmentData[];\n}\n\n// TODO: consolidate this from /app/order/removeBundledItems\nfunction removeBundledItems(lineItems: LineItemMap): LineItemMap {\n    return {\n        ...lineItems,\n        physicalItems: lineItems.physicalItems.filter((item) => typeof item.parentId !== 'string'),\n        digitalItems: lineItems.digitalItems.filter((item) => typeof item.parentId !== 'string'),\n    };\n}\n\nconst calculateShippableItemsCount = (items: MultiShippingTableItemWithType[]): number => {\n    return items.reduce((total, item) => total + item.quantity, 0);\n};\n\nconst hasSplitItem = (\n    items: MultiShippingTableItemWithType[],\n    itemHashMap: Map<string, string>,\n  ): boolean => {\n    const processedHashes = new Set<string>();\n  \n    for (const item of items) {\n      const hash = itemHashMap.get(item.id.toString());\n\n      if (!hash) continue;\n  \n      if (processedHashes.has(hash)) {\n        return true;\n      }\n  \n      processedHashes.add(hash);\n    }\n  \n    return false;\n  };\n\nfunction mapConsignmentsItems(\n    lineItems: LineItemMap,\n    consignments: Consignment[],\n): {\n        consignmentList: MultiShippingConsignmentData[];\n        unassignedItems: MultiShippingTableData;\n    } {\n    const unassignedItemsMap = new Map<string, MultiShippingTableItemWithType>();\n    const digitalItemsMap = new Map<string, MultiShippingTableItemWithType>();\n\n    const itemHashMap = new Map<string, string>();\n\n    const consignmentList: MultiShippingConsignmentData[] = [];\n\n    lineItems.physicalItems.forEach((item) => {\n        unassignedItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Physical });\n        itemHashMap.set(item.id.toString(), generateItemHash(item));\n    });\n    lineItems.customItems?.forEach((item) =>\n        unassignedItemsMap.set(item.id, { ...item, type: LineItemType.Custom }),\n    );\n    lineItems.digitalItems.forEach((item) =>\n        digitalItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Digital }),\n    );\n\n    consignments.forEach((consignment, index) => {\n        const consignmentLineItems: MultiShippingTableItemWithType[] = [];\n\n        consignment.lineItemIds.forEach((itemId) => {\n            const item = unassignedItemsMap.get(itemId);\n\n            if (item) {\n                consignmentLineItems.push(item);\n                unassignedItemsMap.delete(itemId);\n            }\n        });\n\n        consignmentList.push({\n            ...consignment,\n            consignmentNumber: index + 1,\n            hasDigitalItems: false,\n            hasSplitItems: hasSplitItem(consignmentLineItems, itemHashMap),\n            shippableItemsCount: calculateShippableItemsCount(consignmentLineItems),\n            lineItems: consignmentLineItems,\n        });\n    });\n\n    const unassignedItemsList = Array.from(unassignedItemsMap.values());\n\n    const unassignedItems: MultiShippingTableData = {\n        lineItems: unassignedItemsList,\n        hasDigitalItems: digitalItemsMap.size > 0,\n        hasSplitItems: hasSplitItem(unassignedItemsList, itemHashMap),\n        shippableItemsCount: calculateShippableItemsCount(unassignedItemsList),\n    };\n\n    return { consignmentList, unassignedItems };\n}\n\nconst defaultMultiShippingConsignmentItems: MultiShippingConsignmentItemsHook = {\n    unassignedItems: {\n        lineItems: [],\n        hasDigitalItems: false,\n        hasSplitItems: false,\n        shippableItemsCount: 0,\n    },\n    consignmentList: [],\n};\n\nexport const useMultiShippingConsignmentItems = (): MultiShippingConsignmentItemsHook => {\n    const { checkoutState: {\n        data: { getCheckout },\n    },\n    } = useCheckout();\n\n    const checkout = getCheckout();\n\n    if (!checkout) {\n        return defaultMultiShippingConsignmentItems;\n    }\n\n    const {\n        cart: { lineItems },\n        consignments,\n    } = checkout;\n\n    const nonBundledLineItems = removeBundledItems(lineItems);\n\n    const { consignmentList, unassignedItems } =\n        mapConsignmentsItems(nonBundledLineItems, consignments);\n\n    return {\n        unassignedItems,\n        consignmentList,\n    };\n};\n","import { ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport React, { FunctionComponent, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { IconChevronDown, IconChevronUp } from \"../ui/icon\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentLineItemDetail from \"./ConsignmentLineItemDetail\";\nimport { AssignItemFailedError, UnassignItemError } from \"./errors\";\nimport { useDeallocateItem } from \"./hooks/useDeallocateItem\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { MultiShippingConsignmentData, MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\n\ninterface ConsignmentLineItemProps {\n    consignmentNumber: number;\n    consignment: MultiShippingConsignmentData;\n    onUnhandledError(error: Error): void;\n    isLoading: boolean;\n}\n\nconst ConsignmentLineItem: FunctionComponent<ConsignmentLineItemProps> = ({ consignmentNumber, consignment, onUnhandledError, isLoading }: ConsignmentLineItemProps) => {\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const [showItems, setShowItems] = useState(true);\n\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n    const { checkoutService: { assignItemsToAddress: assignItem } } = useCheckout();\n    const deleteItem = useDeallocateItem();\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAssignItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        try {\n            await assignItem({\n                address: consignment.address,\n                lineItems: consignmentLineItems,\n            });\n\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        } finally {\n            toggleAllocateItemsModal();\n        }\n    }\n\n    const handleUnassignItems = async (itemToDelete: MultiShippingTableItemWithType) => {\n        try {\n            const consignmentRequest = {\n                address: consignment.address,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: [\n                    {\n                        quantity: itemToDelete.quantity,\n                        itemId: itemToDelete.id,\n                    },\n                ],\n            }\n\n            await deleteItem(consignmentRequest, itemToDelete.id.toString(), consignment);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    }\n\n    const toggleShowItems = () => {\n        setShowItems(!showItems);\n    }\n\n    const isMobileView = isMobileViewUI();\n\n    const itemsCount = consignment.shippableItemsCount;\n\n    return (\n        <div>\n            <AllocateItemsModal\n                address={consignment.shippingAddress}\n                assignedItems={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                isOpen={isOpenAllocateItemsModal}\n                onAllocateItems={handleAssignItems}\n                onRequestClose={toggleAllocateItemsModal}\n                onUnassignItem={handleUnassignItems}\n                unassignedItems={unassignedItems}\n            />\n            <div className=\"consignment-line-item-header\">\n                <div>\n                    <h3>{itemsCount > 1 ? `${itemsCount} items` : `${itemsCount} item`} allocated </h3>\n\n                    {consignment.hasSplitItems && (\n                        <ItemSplitTooltip />\n                    )}\n                    \n                    <a\n                        className=\"expand-items-button\"\n                        data-test=\"expand-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleShowItems)}\n                    >\n                        {showItems ? (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_hide_items_message\" />}\n                                <IconChevronUp />\n                            </>\n                        ) : (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_show_items_message\" />}\n                                <IconChevronDown />\n                            </>\n                        )}\n                    </a>\n                </div>\n                <a\n                    data-test=\"reallocate-items-button\"\n                    href=\"#\"\n                    onClick={preventDefault(toggleAllocateItemsModal)}\n                >\n                    <TranslatedString id=\"shipping.multishipping_item_reallocated_message\" />\n                </a>\n            </div>\n            {showItems\n                ? <ConsignmentLineItemDetail lineItems={consignment.lineItems} />\n                : null\n            }       \n        </div>\n    )\n}\n\nexport default ConsignmentLineItem;\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { RadioInput } from '@bigcommerce/checkout/ui';\n\nimport { ShopperCurrency } from '../../currency';\n\ninterface MultiShippingOptionsListItemV2Props {\n    consignmentId: string;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n    handleSelect: (consignmentId: string, shippingOptionId: string) => void;\n}\n\nexport const MultiShippingOptionsListItemV2: FunctionComponent<\n    MultiShippingOptionsListItemV2Props\n> = ({ consignmentId, selectedShippingOptionId, shippingOption, handleSelect }) => {\n    const label = (\n        <>\n            {`${shippingOption.description} - `}\n            <ShopperCurrency amount={shippingOption.cost} />\n        </>\n    );\n\n    const selectThisOption = () => {\n        handleSelect(consignmentId, shippingOption.id);\n    };\n\n    return (\n        <ul className=\"shipping-option-item\">\n            <RadioInput\n                checked={selectedShippingOptionId === shippingOption.id}\n                id={`shippingOption-${consignmentId}-${shippingOption.id}`}\n                key={`key-${consignmentId}-${shippingOption.id}`}\n                label={label}\n                name={`${consignmentId}-shippingMethod`}\n                onClick={selectThisOption}\n                readOnly\n                value={shippingOption.id}\n            />\n        </ul>\n    );\n};\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { MultiShippingOptionsListItemV2 } from './MultiShippingOptionsListItemV2';\n\ninterface MultiShippingOptionsListV2Props {\n    consignmentId: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst MultiShippingOptionsListV2: FunctionComponent<MultiShippingOptionsListV2Props> = ({\n    consignmentId,\n    isLoading,\n    shippingOptions,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            {shippingOptions.map((shippingOption) => (\n                <MultiShippingOptionsListItemV2\n                    consignmentId={consignmentId}\n                    handleSelect={onSelectedOption}\n                    key={shippingOption.id}\n                    selectedShippingOptionId={selectedShippingOptionId}\n                    shippingOption={shippingOption}\n                />\n            ))}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(MultiShippingOptionsListV2);\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\n\nimport MultiShippingOptionsListV2 from './MultiShippingOptionsListV2';\nimport { isLoadingSelector } from './ShippingOptions';\n\ninterface MultiShippingOptionsV2Props {\n    consignment: Consignment;\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    resetErrorConsignmentNumber(): void;\n}\n\nexport const MultiShippingOptionsV2 = ({\n    consignment,\n    isLoading,\n    resetErrorConsignmentNumber,\n    shippingQuoteFailedMessage,\n}: MultiShippingOptionsV2Props) => {\n    const { checkoutService, checkoutState } = useCheckout();\n\n    const selectShippingOption = async (consignmentId: string, shippingOptionId: string) => {\n        await checkoutService.selectConsignmentShippingOption(consignmentId, shippingOptionId);\n        resetErrorConsignmentNumber();\n    };\n    const isLoadingOptions = isLoadingSelector(checkoutState, isLoading)(consignment.id);\n\n    return (\n        <div>\n            <h3 className=\"shipping-option-header\">\n                <TranslatedString id=\"shipping.shipping_method_label\" />\n            </h3>\n            {(!consignment.availableShippingOptions ||\n                !consignment.availableShippingOptions.length) && (\n                <Alert type={AlertType.Error}>{shippingQuoteFailedMessage}</Alert>\n            )}\n            {Boolean(consignment.availableShippingOptions) &&\n                consignment.availableShippingOptions && (\n                    <MultiShippingOptionsListV2\n                        consignmentId={consignment.id}\n                        isLoading={isLoadingOptions}\n                        onSelectedOption={selectShippingOption}\n                        selectedShippingOptionId={\n                            consignment.selectedShippingOption &&\n                            consignment.selectedShippingOption.id\n                        }\n                        shippingOptions={consignment.availableShippingOptions}\n                    />\n                )}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { IconClose, IconSize } from \"../ui/icon\";\n\n\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport ConsignmentLineItem from './ConsignmentLineItem';\nimport { MultiShippingConsignmentData } from './MultishippingV2Type';\nimport { MultiShippingOptionsV2 } from './shippingOption/MultiShippingOptionsV2';\n\nexport interface ConsignmentListItemProps {\n    consignment: MultiShippingConsignmentData;\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst ConsignmentListItem: FunctionComponent<ConsignmentListItemProps> = ({\n    consignment,\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    shippingQuoteFailedMessage,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n}: ConsignmentListItemProps) => {\n\n    const { checkoutService: { deleteConsignment } } = useCheckout();\n\n    const handleClose = async () => {\n        await deleteConsignment(consignment.id);\n        resetErrorConsignmentNumber();\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className='consignment-header'>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n                <a\n                    className=\"delete-consignment\"\n                    data-test=\"delete-consignment-button\"\n                    href=\"#\"\n                    onClick={preventDefault(handleClose)}\n                >\n                    <IconClose size={IconSize.Small} />\n                </a>\n            </div>\n            <ConsignmentAddressSelector\n                consignment={consignment}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={consignment.shippingAddress}\n            />\n            <ConsignmentLineItem\n                consignment={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n            />\n            <MultiShippingOptionsV2\n                consignment={consignment}\n                isLoading={isLoading}\n                resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n            />\n        </div>\n    );\n};\n\nexport default ConsignmentListItem;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\n\nexport interface ShippingFormFooterProps {\n    shouldShowOrderComments: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    cartHasChanged: boolean;\n}\n\nconst MultiShippingFormV2Footer: FunctionComponent<ShippingFormFooterProps> = ({\n    shouldShowOrderComments,\n    shouldDisableSubmit,\n    isLoading,\n    cartHasChanged,\n}) => {\n    return (\n        <Form>\n            {cartHasChanged && (\n                <Alert type={AlertType.Error}>\n                    <strong>\n                        <TranslatedString id=\"shipping.cart_change_error\" />\n                    </strong>\n                </Alert>\n            )}\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default MultiShippingFormV2Footer;\n","import { Consignment, ConsignmentCreateRequestBody, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport { find } from \"lodash\";\nimport React, { useMemo, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { EMPTY_ARRAY } from \"../common/utility\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport { AssignItemFailedError } from \"./errors\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface NewConsignmentProps {\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    setIsAddShippingDestination: React.Dispatch<React.SetStateAction<boolean>>;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst NewConsignment = ({\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n    setIsAddShippingDestination,\n}: NewConsignmentProps) => {\n    const [consignmentRequest, setConsignmentRequest] = useState<ConsignmentCreateRequestBody | undefined>();\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n\n    const {\n        checkoutState: {\n            data: { getShippingCountries, getConsignments: getPreviousConsignments },\n        },\n        checkoutService: { assignItemsToAddress: assignItem, selectConsignmentShippingOption },\n    } = useCheckout();\n\n    const selectedAddress = useMemo(() => {\n        if (!consignmentRequest?.address) {\n            return undefined;\n        }\n\n        const countries = getShippingCountries() || EMPTY_ARRAY;\n        const country = find(countries, { code: consignmentRequest.address.countryCode });\n\n        return {\n            ...consignmentRequest.address,\n            country: country ? country.name : consignmentRequest.address.countryCode,\n        };\n    }, [consignmentRequest]);\n\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAllocateItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        let currentConsignments: Consignment[] | undefined;\n\n        if (!selectedAddress) {\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await assignItem({\n                address: selectedAddress,\n                lineItems: consignmentLineItems,\n            });\n\n            currentConsignments = getConsignments();\n        } catch (error) {\n            if (error instanceof AssignItemFailedError) {\n                onUnhandledError(error);\n            }\n        } finally {\n            toggleAllocateItemsModal();\n            setIsAddShippingDestination(false);\n            resetErrorConsignmentNumber();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        }\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className='consignment-header'>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n            </div>\n            <ConsignmentAddressSelector\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={selectedAddress}\n                setConsignmentRequest={setConsignmentRequest}\n            />\n            {selectedAddress && (<>\n                <AllocateItemsModal\n                    address={selectedAddress}\n                    consignmentNumber={consignmentNumber}\n                    isLoading={isLoading}\n                    isOpen={isOpenAllocateItemsModal}\n                    onAllocateItems={handleAllocateItems}\n                    onRequestClose={toggleAllocateItemsModal}\n                    unassignedItems={unassignedItems}\n                />\n                <div className=\"new-consignment-line-item-header\">\n                    <h3><TranslatedString id=\"shipping.multishipping_no_item_allocated_message\" /></h3>\n                    <a\n                        data-test=\"allocate-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleAllocateItemsModal)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_allocate_items\" />\n                    </a>\n                </div>\n            </>\n            )}\n        </div>\n    )\n}\n\nexport default NewConsignment;\n","import React, { FunctionComponent, useMemo, useState } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\n\nimport { withFormikExtended } from '../common/form';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { Button, ButtonVariant } from '../ui/button';\n\nimport ConsignmentListItem from './ConsignmentListItem';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport { useMultiShippingConsignmentItems } from './hooks/useMultishippingConsignmentItems';\nimport MultiShippingFormV2Footer from './MultiShippingFormV2Footer';\nimport { MultiShippingConsignmentData } from './MultishippingV2Type';\nimport './MultiShippingFormV2.scss';\nimport NewConsignment from './NewConsignment';\n\ninterface MultiShippingFormV2Values {\n    orderComment: string;\n}\n\nexport interface MultiShippingFormV2Props {\n    cartHasChanged: boolean;\n    customerMessage: string;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: MultiShippingFormV2Values): void;\n}\n\nconst MultiShippingFormV2: FunctionComponent<MultiShippingFormV2Props> = ({\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    cartHasChanged,\n}: MultiShippingFormV2Props) => {\n    const [errorConsignmentNumber, setErrorConsignmentNumber] = useState<number | undefined>();\n\n    const {\n        checkoutState: {\n            data: { getConsignments, getConfig },\n        },\n    } = useCheckout();\n    const { unassignedItems: { lineItems: unassignedLineItems, shippableItemsCount }, consignmentList } = useMultiShippingConsignmentItems();\n\n    const consignments = getConsignments() || EMPTY_ARRAY;\n    const config = getConfig();\n\n    const [isAddShippingDestination, setIsAddShippingDestination] = useState(\n        consignments.length === 0,\n    );\n\n    const isEveryConsignmentHasShippingOption = hasSelectedShippingOptions(consignments);\n    const shouldDisableSubmit = useMemo(() => {\n        return isLoading || !!unassignedLineItems.length || !isEveryConsignmentHasShippingOption;\n    }, [isLoading, consignments]);\n\n    if (!config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments: shouldShowOrderComments,\n            shippingQuoteFailedMessage,\n        },\n    } = config;\n\n    const handleAddShippingDestination = () => {\n        if (!isAddShippingDestination && !isEveryConsignmentHasShippingOption) {\n            const errorConsignmentIndex = consignments.findIndex(\n                (consignment) => !consignment.selectedShippingOption,\n            );\n\n            if (errorConsignmentIndex === -1) {\n                setIsAddShippingDestination(true);\n                \n                return;\n            }\n            \n            setErrorConsignmentNumber(errorConsignmentIndex + 1);\n        } else if (isAddShippingDestination) {\n            setErrorConsignmentNumber(consignments.length + 1);\n        } else {\n            setErrorConsignmentNumber(undefined);\n            setIsAddShippingDestination(true);\n        }\n    };\n\n    const hasUnassignedItems = shippableItemsCount > 0;\n\n    const renderAllocatedBanner = (shippableItemsCount: number): React.JSX.Element  => {\n        if (shippableItemsCount > 0) {\n            return <Alert type={AlertType.Info}>\n                <TranslatedString data={{ count: shippableItemsCount }} id=\"shipping.multishipping_item_to_allocate_message\" />\n            </Alert>;\n        }\n\n        return <Alert type={AlertType.Success}>\n            <TranslatedString id=\"shipping.multishipping_all_items_allocated_message\" />\n        </Alert>;\n    }\n    const resetErrorConsignmentNumber = () => {\n        setErrorConsignmentNumber(undefined);\n    };\n\n    return (\n        <>\n            {renderAllocatedBanner(shippableItemsCount)}\n            {consignmentList.map((consignment: MultiShippingConsignmentData) => (\n                <ConsignmentListItem\n                    consignment={consignment}\n                    consignmentNumber={consignment.consignmentNumber}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    key={consignment.id}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n                />\n            ))}\n            {isAddShippingDestination && (\n                <NewConsignment\n                    consignmentNumber={consignments.length === 0 ? 1 : (consignments.length + 1)}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    setIsAddShippingDestination={setIsAddShippingDestination}\n                />)\n            }\n            {hasUnassignedItems &&\n                <Button className='add-consignment-button' onClick={handleAddShippingDestination} variant={ButtonVariant.Secondary}>\n                    <TranslatedString id=\"shipping.multishipping_add_new_destination\" />\n                </Button>\n            }\n            {Boolean(errorConsignmentNumber) && (\n                <div className=\"form-field--error\">\n                    <span className=\"form-inlineMessage\">\n                        <TranslatedString\n                            data={{ consignmentNumber: errorConsignmentNumber }}\n                            id=\"shipping.multishipping_incomplete_consignment_error\"\n                        />\n                    </span>\n                </div>\n            )}\n            <MultiShippingFormV2Footer\n                cartHasChanged={cartHasChanged}\n                isLoading={isLoading}\n                shouldDisableSubmit={shouldDisableSubmit}\n                shouldShowOrderComments={shouldShowOrderComments}\n            />\n        </>\n    );\n}\n\nexport default withLanguage(\n    withFormikExtended<MultiShippingFormV2Props & WithLanguageProps, MultiShippingFormV2Values>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingFormV2),\n);\n","import React, { FunctionComponent } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedLink, TranslatedString } from \"@bigcommerce/checkout/locale\";\n\ninterface MultiShippingGuestFormProps {\n    onSignIn(): void;\n    onCreateAccount(): void;\n}\n\nconst MultiShippingGuestForm: FunctionComponent<MultiShippingGuestFormProps> = ({\n    onSignIn,\n    onCreateAccount\n}: MultiShippingGuestFormProps) => {\n    return (\n        <div className=\"checkout-step-info\">\n            <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n            <a\n                data-test=\"shipping-sign-in-link\"\n                href=\"#\"\n                onClick={preventDefault(onSignIn)}\n            >\n                <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n            </a>{' '}\n            <TranslatedLink\n                id=\"shipping.multishipping_guest_create\"\n                onClick={onCreateAccount}\n            />\n        </div>\n    )\n};\n\nexport default MultiShippingGuestForm;\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, MutableRefObject } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    paypalFastlaneShippingComponentRef: MutableRefObject<PayPalFastlaneAddressComponentRef>;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    countries?: Country[];\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        formFields,\n        isLoading,\n        onFieldChange,\n        countries,\n        paypalFastlaneShippingComponentRef\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponentRef.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponentRef.current.showAddressSelector();\n\n            if (selectedAddress) {\n                props.onAddressSelect({\n                    ...selectedAddress,\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    validateAddressFields: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n            validateAddressFields,\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n            validateAddressFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                                type={AddressType.Shipping}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions\n} from '@bigcommerce/checkout-sdk';\nimport React, {FC, useEffect, useRef, useState} from 'react';\n\nimport {\n    isPayPalCommerceFastlaneMethod,\n    isPayPalFastlaneMethod,\n    PayPalFastlaneShippingAddressForm,\n    usePayPalFastlaneAddress,\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { ShippingAddressProps } from './ShippingAddress';\n\nimport ShippingAddressForm from './ShippingAddressForm';\nimport { LoadingOverlay } from '../ui/loading';\n\nexport interface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId?: string,\n    shippingAddress?:  Address,\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[],\n    googleMapsApiKey?: string;\n    handleFieldChange(fieldName: string, value: string): void,\n    onAddressSelect(address: Address): void;\n}\n\ninterface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        addresses,\n        handleFieldChange,\n        isLoading\n    } = props;\n    const [isLoadingStrategy, setIsLoadingStrategyStrategy] = useState<boolean>(true);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n    const fastlaneOptions = (provider: string) => {\n        return {\n            [provider]: {\n                onPayPalFastlaneAddressChange: (\n                    showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n                ) => {\n                    paypalFastlaneShippingComponent.current.showAddressSelector =\n                        showPayPalFastlaneAddressSelector;\n                },\n            },\n        };\n    }\n\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(\n        methodId,\n    )\n        ? fastlaneOptions('paypalcommercefastlane')\n        : fastlaneOptions('braintreefastlane');\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...initializationOptions,\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n        setIsLoadingStrategyStrategy(false);\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoadingStrategy || isLoading}>\n            {methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm ? (\n                <PayPalFastlaneShippingAddressForm\n                    address={shippingAddress}\n                    countries={countries}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initialize}\n                    isLoading={isLoadingStrategy}\n                    methodId={methodId}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={onFieldChange}\n                    onUnhandledError={onUnhandledError}\n                    paypalFastlaneShippingComponentRef={paypalFastlaneShippingComponent}\n                />\n            ) : (\n                <ShippingAddressForm\n                    address={shippingAddress}\n                    addresses={addresses}\n                    consignments={props.consignments}\n                    countries={countries}\n                    countriesWithAutocomplete={props.countriesWithAutocomplete}\n                    formFields={formFields}\n                    googleMapsApiKey={props.googleMapsApiKey}\n                    isFloatingLabelEnabled={props.isFloatingLabelEnabled}\n                    isLoading={isLoadingStrategy}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={handleFieldChange}\n                    onUseNewAddress={props.onUseNewAddress}\n                    shouldShowSaveAddress={props.shouldShowSaveAddress}\n                    validateAddressFields={props.validateAddressFields}\n                />\n            )}\n        </LoadingOverlay>\n    );\n};","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport { isPayPalFastlaneMethod } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    validateAddressFields: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isFloatingLabelEnabled,\n        validateAddressFields,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress) {\n        return (\n            <PayPalFastlaneShippingAddress\n                {...props}\n                handleFieldChange={handleFieldChange}\n                methodId={methodId}\n                shippingAddress={shippingAddress}\n            />\n        )\n    }\n\n    if (methodId === 'amazonpay' && shippingAddress) {\n        return (\n            <AmazonPayShippingAddress\n                {...props}\n                shippingAddress={shippingAddress}\n            />\n        );\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            validateAddressFields={validateAddressFields}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shippingAutosaveDelay?: number;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    validateGoogleMapAutoCompleteMaxLength: boolean;\n    validateAddressFields: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n    const methodIdsWithoutCustomValidation: string[] = [\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout\n    ];\n\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n            validateAddressFields,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                        validateAddressFields={validateAddressFields}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n            validateGoogleMapAutoCompleteMaxLength,\n            validateAddressFields,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            shouldHaveCustomValidation(methodId)\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                              validateGoogleMapAutoCompleteMaxLength,\n                              validateAddressFields\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport MultiShippingFormV2 from './MultiShippingFormV2';\nimport MultiShippingGuestForm from './MultiShippingGuestForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    isNewMultiShippingUIEnabled: boolean;\n    validateGoogleMapAutoCompleteMaxLength: boolean;\n    validateAddressFields: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n      addresses,\n      assignItem,\n      cart,\n      cartHasChanged,\n      createCustomerAddress,\n      consignments,\n      countries,\n      countriesWithAutocomplete,\n      onCreateAccount,\n      customerMessage,\n      deinitialize,\n      deleteConsignments,\n      getFields,\n      googleMapsApiKey,\n      initialize,\n      isBillingSameAsShipping,\n      isGuest,\n      isLoading,\n      isMultiShippingMode,\n      methodId,\n      onMultiShippingSubmit,\n      onSignIn,\n      onSingleShippingSubmit,\n      onUnhandledError,\n      onUseNewAddress,\n      shippingAddress,\n      shouldShowOrderComments,\n      shouldShowSaveAddress,\n      signOut,\n      updateAddress,\n      isShippingStepPending,\n      isFloatingLabelEnabled,\n      isInitialValueLoaded,\n      isNewMultiShippingUIEnabled,\n      validateGoogleMapAutoCompleteMaxLength,\n      validateAddressFields,\n  }: ShippingFormProps & WithLanguageProps) => {\n\n    const getMultiShippingForm = () => {\n        if (isGuest) {\n            return (\n                <MultiShippingGuestForm onCreateAccount={onCreateAccount} onSignIn={onSignIn} />\n            );\n        }\n\n        if (isNewMultiShippingUIEnabled) {\n            return <MultiShippingFormV2\n                cartHasChanged={cartHasChanged}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                customerMessage={customerMessage}\n                defaultCountryCode={shippingAddress?.countryCode}\n                isLoading={isLoading}\n                onSubmit={onMultiShippingSubmit}\n                onUnhandledError={onUnhandledError}\n            />;\n        }\n\n        return <MultiShippingForm\n            addresses={addresses}\n            assignItem={assignItem}\n            cart={cart}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            createCustomerAddress={createCustomerAddress}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n            validateAddressFields={validateAddressFields}\n        />;\n    };\n\n    return isMultiShippingMode ? (\n        getMultiShippingForm()\n    ) : (\n        <SingleShippingForm\n            addresses={addresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n            validateAddressFields={validateAddressFields}\n            validateGoogleMapAutoCompleteMaxLength={validateGoogleMapAutoCompleteMaxLength}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, memo, useState } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ConfirmationModal } from '@bigcommerce/checkout/ui';\n\nimport { Legend } from '../ui/form';\nimport './ShippingHeader.scss';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n    isNewMultiShippingUIEnabled: boolean;\n    cartHasPromotionalItems?: boolean;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n    isNewMultiShippingUIEnabled,\n    cartHasPromotionalItems,\n}) => {\n    const [isSingleShippingConfirmationModalOpen, setIsSingleShippingConfirmationModalOpen] = useState(false);\n    const [isMultiShippingUnavailableModalOpen, setIsMultiShippingUnavailableModalOpen] = useState(false);\n\n    const handleShipToSingleConfirmation = () => {\n        setIsSingleShippingConfirmationModalOpen(false);\n        onMultiShippingChange();\n    }\n\n    const showConfirmationModal = shouldShowMultiShipping && isNewMultiShippingUIEnabled && isMultiShippingMode;\n    const showMultiShippingUnavailableModal = shouldShowMultiShipping && isNewMultiShippingUIEnabled && !isMultiShippingMode && cartHasPromotionalItems;\n\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n            <div className={classNames('form-legend-container', { 'shipping-header': isNewMultiShippingUIEnabled })}>\n                <Legend testId=\"shipping-address-heading\">\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {showConfirmationModal && (\n                    <>\n                        <ConfirmationModal\n                            action={handleShipToSingleConfirmation}\n                            actionButtonLabel={<TranslatedString id=\"common.proceed_action\" />}\n                            headerId=\"shipping.ship_to_single_action\"\n                            isModalOpen={isSingleShippingConfirmationModalOpen}\n                            messageId=\"shipping.ship_to_single_message\"\n                            onRequestClose={() => setIsSingleShippingConfirmationModalOpen(false)}\n                        />\n                        <a\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsSingleShippingConfirmationModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_single\" />\n                        </a>\n                    </>\n                )}\n                {showMultiShippingUnavailableModal && (\n                    <>\n                        <ConfirmationModal\n                            action={() => setIsMultiShippingUnavailableModalOpen(false)}\n                            actionButtonLabel={<TranslatedString id=\"common.back_action\" />}\n                            headerId=\"shipping.multishipping_unavailable_action\"\n                            isModalOpen={isMultiShippingUnavailableModalOpen}\n                            messageId=\"shipping.multishipping_unavailable_message\"\n                            onRequestClose={() => setIsMultiShippingUnavailableModalOpen(false)}\n                        />\n                        <a\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsMultiShippingUnavailableModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_multi\" />\n                        </a>\n                    </>\n                )}\n                {!showConfirmationModal && !showMultiShippingUnavailableModal && shouldShowMultiShipping && (\n                    <a\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { withFormikExtended } from '../../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isInitialValueLoaded: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    isNewMultiShippingUIEnabled: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            isNewMultiShippingUIEnabled,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isNewMultiShippingUIEnabled={isNewMultiShippingUIEnabled}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton, ConfirmationModal } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isExperimentEnabled, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport hasPromotionalItems from './hasPromotionalItems';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    cartHasPromotionalItems: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    isNewMultiShippingUIEnabled: boolean;\n    shouldShowOrderComments: boolean;\n    shouldRenderWhileLoading: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    validateGoogleMapAutoCompleteMaxLength: boolean;\n    validateAddressFields: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    isMultiShippingUnavailableModalOpen: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            isMultiShippingUnavailableModalOpen: false,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadBillingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n            cartHasPromotionalItems,\n            isMultiShippingMode,\n            isNewMultiShippingUIEnabled,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\n\n            if(cartHasPromotionalItems && isMultiShippingMode && isNewMultiShippingUIEnabled) {\n                this.setState({ isMultiShippingUnavailableModalOpen: true });\n            }\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            isNewMultiShippingUIEnabled,\n            validateGoogleMapAutoCompleteMaxLength,\n            validateAddressFields,\n            customer,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            step,\n            isFloatingLabelEnabled,\n            shouldRenderStripeForm,\n            shouldRenderWhileLoading,\n            cartHasPromotionalItems,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            isMultiShippingUnavailableModalOpen,\n        } = this.state;\n\n        const handleSwitchToSingleShipping = async () => {\n            this.setState({ isMultiShippingUnavailableModalOpen: false });\n            await this.handleMultiShippingModeSwitch();\n        }\n\n        if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isNewMultiShippingUIEnabled={isNewMultiShippingUIEnabled}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\n                <div className=\"checkout-form\">\n                    <ConfirmationModal \n                        action={handleSwitchToSingleShipping}\n                        actionButtonLabel={<TranslatedString id=\"common.ok_action\" />}\n                        headerId=\"shipping.multishipping_unavailable_action\"\n                        isModalOpen={isMultiShippingUnavailableModalOpen}\n                        messageId=\"shipping.checkout_switched_to_single_shipping\"\n                        shouldShowCloseButton={false}\n                    />\n                    <ShippingHeader\n                        cartHasPromotionalItems={cartHasPromotionalItems}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        isNewMultiShippingUIEnabled={isNewMultiShippingUIEnabled}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                        isMultiShippingMode={isMultiShippingMode}\n                        isNewMultiShippingUIEnabled={isNewMultiShippingUIEnabled}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                        validateAddressFields={validateAddressFields}\n                        validateGoogleMapAutoCompleteMaxLength={validateGoogleMapAutoCompleteMaxLength}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            isNewMultiShippingUIEnabled,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n            deleteConsignments,\n        } = this.props;\n\n        try {\n            this.setState({ isInitializing: true });\n\n            if (isNewMultiShippingUIEnabled) {\n                if (isMultiShippingMode && consignments.length) {\n                    // Collapse all consignments into one\n                    await updateShippingAddress(consignments[0].shippingAddress);\n                }\n                else {\n                    await deleteConsignments();\n                }\n            }\n            else if (isMultiShippingMode && consignments.length > 1) {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n            isDeletingConsignment,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress() ||\n        isDeletingConsignment();\n\n    const isNewMultiShippingUIEnabled =\n        isExperimentEnabled(\n            config.checkoutSettings,\n            'PROJECT-4159.improve_multi_address_shipping_ui',\n        );\n    const shippableItemsCount = getShippableItemsCount(cart, isNewMultiShippingUIEnabled);\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    const validateGoogleMapAutoCompleteMaxLength =\n        isExperimentEnabled(\n            config.checkoutSettings,\n            'CHECKOUT-8776.google_autocomplete_max_length_validation',\n        ) && Boolean(googleMapsApiKey);\n\n    const validateAddressFields =\n        isExperimentEnabled(\n            config.checkoutSettings,\n            'CHECKOUT-7560.address_fields_max_length_validation',\n        );\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings.providerWithCustomCheckout,\n    );\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        cartHasPromotionalItems: hasPromotionalItems(cart),\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout,\n        shippingAddress,\n        shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\n        shouldShowMultiShipping,\n        isNewMultiShippingUIEnabled,\n        validateGoogleMapAutoCompleteMaxLength,\n        validateAddressFields,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronUp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronUp);\n","import classNames from 'classnames';\nimport React, { ButtonHTMLAttributes, FunctionComponent } from 'react';\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    isFullWidth?: boolean;\n    isLoading?: boolean;\n    size?: ButtonSize;\n    testId?: string;\n    variant?: ButtonVariant;\n}\n\nexport enum ButtonVariant {\n    Primary = 'primary',\n    Secondary = 'secondary',\n    Action = 'action',\n}\n\nexport enum ButtonSize {\n    Small = 'small',\n    Tiny = 'tiny',\n    Large = 'large',\n}\n\nfunction getClassName(\n    props: Pick<ButtonProps, 'className' | 'isFullWidth' | 'isLoading' | 'size' | 'variant'>,\n) {\n    const { className, isFullWidth, isLoading, size, variant } = props;\n\n    return classNames(\n        'button',\n        className,\n        { 'button--primary': variant === ButtonVariant.Primary },\n        { 'button--tertiary': variant === ButtonVariant.Secondary },\n        { 'button--action': variant === ButtonVariant.Action },\n        { 'button--small': size === ButtonSize.Small },\n        { 'button--tiny': size === ButtonSize.Tiny },\n        { 'button--large': size === ButtonSize.Large },\n        { 'button--slab': isFullWidth },\n        {\n            'optimizedCheckout-buttonPrimary':\n                variant === ButtonVariant.Primary || variant === ButtonVariant.Action,\n        },\n        { 'optimizedCheckout-buttonSecondary': variant === ButtonVariant.Secondary },\n        { 'is-loading': isLoading },\n    );\n}\n\nconst Button: FunctionComponent<ButtonProps> = ({\n    children,\n    className,\n    disabled,\n    isFullWidth,\n    isLoading,\n    size,\n    testId,\n    type,\n    variant,\n    ...rest\n}) => (\n    <button\n        {...rest}\n        className={getClassName({ className, isFullWidth, isLoading, size, variant })}\n        data-test={testId}\n        disabled={disabled || isLoading}\n        type={type || 'button'}\n    >\n        {children}\n    </button>\n);\n\nexport default Button;\n","import { noop } from 'lodash';\nimport React, { ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize, ButtonVariant } from '../button';\n\nimport Modal from './Modal';\nimport ModalHeader from './ModalHeader';\n\ninterface ConfirmationModalProps {\n    headerId: string;\n    messageId: string;\n    isModalOpen: boolean;\n    onRequestClose?: () => void;\n    action: () => void;\n    actionButtonLabel?: ReactNode;\n    shouldShowCloseButton?: boolean;\n}\n\nconst ConfirmationModal = ({\n    headerId,\n    messageId,\n    isModalOpen,\n    action,\n    actionButtonLabel,\n    onRequestClose = noop,\n    shouldShowCloseButton = true,\n}: ConfirmationModalProps) => {\n    return (\n        <Modal\n            additionalModalClassName=\"modal--confirm\"\n            footer={\n                <Button onClick={action} size={ButtonSize.Small} variant={ButtonVariant.Primary}>\n                    {actionButtonLabel ?? <TranslatedString id=\"common.confirm_action\" />}\n                </Button>\n            }\n            header={\n                <ModalHeader>\n                    <span aria-live=\"assertive\" role=\"alert\">\n                        <TranslatedString id={headerId} />\n                    </span>\n                </ModalHeader>\n            }\n            isOpen={isModalOpen}\n            onRequestClose={onRequestClose}\n            shouldShowCloseButton={shouldShowCloseButton}\n        >\n            <p aria-live=\"assertive\" role=\"alert\">\n                <TranslatedString id={messageId} />\n            </p>\n        </Modal>\n    );\n};\n\nexport default ConfirmationModal;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconClose: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconClose);\n","import classNames from 'classnames';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, KeyboardEvent, MouseEvent, ReactNode, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport { Omit } from 'utility-types';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\n\nimport { IconClose } from '../icon';\n\nexport type ModalProps = Omit<\n    ReactModal.Props,\n    'bodyOpenClassName' | 'className' | 'closeTimeoutMS' | 'overlayClassName'\n> & {\n    children: ReactNode;\n    closeButtonLabel?: string | ReactNode;\n    footer?: ReactNode;\n    header?: ReactNode;\n    additionalHeaderClassName?: string;\n    additionalBodyClassName?: string;\n    additionalModalClassName?: string;\n    shouldShowCloseButton?: boolean;\n};\n\nconst Modal: FunctionComponent<ModalProps> = ({\n    children,\n    closeButtonLabel = 'Close',\n    footer,\n    header,\n    additionalHeaderClassName,\n    additionalBodyClassName,\n    additionalModalClassName,\n    onRequestClose = noop,\n    shouldShowCloseButton = false,\n    ...rest\n}) => {\n    const handleClose = useCallback(\n        (event: MouseEvent | KeyboardEvent) => {\n            onRequestClose(event);\n        },\n        [onRequestClose],\n    );\n\n    return (\n        <ReactModal\n            {...rest}\n            ariaHideApp={process.env.NODE_ENV !== 'test'}\n            bodyOpenClassName=\"has-activeModal\"\n            className={{\n                base: classNames(\n                    'modal optimizedCheckout-contentPrimary',\n                    additionalModalClassName,\n                ),\n                afterOpen: 'modal--afterOpen',\n                beforeClose: 'modal--beforeClose',\n            }}\n            closeTimeoutMS={200}\n            onRequestClose={onRequestClose}\n            overlayClassName={{\n                base: 'modalOverlay',\n                afterOpen: 'modalOverlay--afterOpen',\n                beforeClose: 'modalOverlay--beforeClose',\n            }}\n            shouldCloseOnEsc={true}\n            shouldCloseOnOverlayClick={false}\n        >\n            <div className={classNames('modal-header', additionalHeaderClassName)}>\n                {header}\n\n                {shouldShowCloseButton && (\n                    <a\n                        className=\"modal-close\"\n                        data-test=\"modal-close-button\"\n                        href=\"#\"\n                        onClick={preventDefault(handleClose)}\n                    >\n                        {closeButtonLabel && <span className=\"is-srOnly\">{closeButtonLabel}</span>}\n\n                        <IconClose />\n                    </a>\n                )}\n            </div>\n\n            <div\n                className={classNames('modal-body', additionalBodyClassName)}\n                data-test=\"modal-body\"\n            >\n                {children}\n            </div>\n\n            {Boolean(footer) && (\n                <div className=\"modal-footer\" data-test=\"modal-footer\">\n                    {footer}\n                </div>\n            )}\n        </ReactModal>\n    );\n};\n\nexport default Modal;\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\ninterface ModalHeaderProps {\n    children: React.ReactNode;\n    additionalClassName?: string;\n}\n\nconst ModalHeader: FunctionComponent<ModalHeaderProps> = ({ children, additionalClassName }) => (\n    <h2\n        className={classNames(\n            'modal-header-title optimizedCheckout-headingSecondary',\n            additionalClassName,\n        )}\n        data-test=\"modal-heading\"\n    >\n        {children}\n    </h2>\n);\n\nexport default ModalHeader;\n"],"names":["data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","AmazonPay","BraintreeAcceleratedCheckout","PayPalCommerceAcceleratedCheckout","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","hasPromotionalItems","cart","lineItems","digitalItems","physicalItems","filter","item","addedByPromotion","length","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","A","shouldShowSaveAddress","className","Button","onClick","variant","Secondary","TranslatedString","id","disabled","type","Primary","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","withFormikExtended","OriginalComponent","DecoratedComponent","props","resetForm","isInitialValueLoaded","previousIsInitialValueLoadedRef","useRef","useEffect","current","displayName","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","reduce","result","i","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","memo","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","handleSelectAddress","address","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","AddressType","Shipping","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","isMultiShippingMode","selectedShippingOptionId","shippingOption","isSelected","renderLabel","StaticShippingOption","displayAdditionalInformation","method","Extension","region","ChecklistItem","htmlId","label","inputName","shippingOptions","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isUpdatingAddress","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","Error","ShippingOptions","OrderComments","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","validateAddressFields","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","setRecommendedOrMissingShippingOption","previousConsignment","currentConsignments","previousShippingOptions","Map","previousShippingOptionId","get","option","isRecommended","setConsignmentRequest","useState","isOpenNewAddressModal","setIsOpenNewAddressModal","setCreateCustomerAddressError","getShippingCountries","getPreviousConsignments","updateConsignment","isFloatingLabelEnabledFlag","isExperimentEnabled","addressFormValues","placeholderText","showSingleLineAddress","ItemSplitTooltip","TooltipTrigger","placement","tooltip","Tooltip","IconHelp","assignedItems","onUnassignItem","count","shippableItemsCount","hasSplitItems","toString","IconClose","isMobileView","FormField","input","field","TextInput","min","formErrors","LineItemType","onAllocateItems","Object","keys","lineItemId","unassignedItems","createItemSchema","baseSchema","required","integer","max","Custom","oneOf","schemaObject","fromEntries","shape","validateOnBlur","validateOnChange","consignmentNumber","setValues","dirty","submitForm","errors","allocatedOrSelectedItemsMessage","useMemo","leftItemsTotal","selectedItems","acc","push","Array","from","Set","hasItemsAssigned","hasUnassignedItems","modalFooter","footer","index","hasDigitalItems","Info","href","preventDefault","generateHash","btoa","encodeURIComponent","join","calculateShippableItemsCount","total","hasSplitItem","itemHashMap","processedHashes","hash","has","add","mapConsignmentsItems","unassignedItemsMap","digitalItemsMap","consignmentList","set","Physical","sku","valueId","generateItemHash","customItems","Digital","consignmentLineItems","delete","unassignedItemsList","size","defaultMultiShippingConsignmentItems","useMultiShippingConsignmentItems","nonBundledLineItems","removeBundledItems","isOpenAllocateItemsModal","setIsOpenAllocateItemsModal","showItems","setShowItems","deleteItem","createConsignments","deleteConsignment","consignmentRequest","consignmentIdToBeDeleted","checkoutResponse","consignmentsReponse","c","useDeallocateItem","toggleAllocateItemsModal","itemsCount","itemToDelete","IconChevronUp","IconChevronDown","ConsignmentLineItemDetail","MultiShippingOptionsListItemV2","description","ShopperCurrency","amount","cost","RadioInput","checked","readOnly","MultiShippingOptionsV2","resetErrorConsignmentNumber","shippingQuoteFailedMessage","isLoadingOptions","Boolean","shippingOptionId","Small","setIsAddShippingDestination","code","errorConsignmentNumber","setErrorConsignmentNumber","unassignedLineItems","isAddShippingDestination","isEveryConsignmentHasShippingOption","Success","renderAllocatedBanner","errorConsignmentIndex","onSignIn","onCreateAccount","TranslatedLink","onChange","labelContent","CheckboxFormField","testId","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","Tiny","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","paypalFastlaneShippingComponentRef","localizeAddress","hideContentWhenLoading","localizedProvince","localizedCountry","PoweredByPayPalFastlaneLabel","showAddressSelector","onAddressSelect","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","connectFormik","ShippingAddressForm","PayPalFastlaneShippingAddress","handleFieldChange","isLoadingStrategy","setIsLoadingStrategyStrategy","paypalFastlaneShippingComponent","fastlaneOptions","provider","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","initializationOptions","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","hasRequestedShippingOptions","setSubmitted","useContext","FormContext","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","validateGoogleMapAutoCompleteMaxLength","methodIdsWithoutCustomValidation","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","isGuest","onMultiShippingSubmit","onSingleShippingSubmit","signOut","isNewMultiShippingUIEnabled","onMultiShippingChange","shouldShowMultiShipping","cartHasPromotionalItems","isSingleShippingConfirmationModalOpen","setIsSingleShippingConfirmationModalOpen","isMultiShippingUnavailableModalOpen","setIsMultiShippingUnavailableModalOpen","showConfirmationModal","showMultiShippingUnavailableModal","ConfirmationModal","action","actionButtonLabel","headerId","isModalOpen","messageId","width","StripeStateMapper","stateList","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","allowedCountries","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","shouldRenderWhileLoading","email","renderWhileLoading","deleteConsignmentsSelector","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","isDeletingConsignment","enableOrderComments","features","hasMultiShippingEnabled","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","StripeUPE","shouldUseStripeLinkByMinimumAmount","height","viewBox","xmlns","d","ButtonVariant","ButtonSize","getClassName","isFullWidth","Action","Large","children","rest","closeButtonLabel","additionalHeaderClassName","additionalBodyClassName","handleClose","event","ariaHideApp","bodyOpenClassName","base","afterOpen","beforeClose","closeTimeoutMS","overlayClassName","shouldCloseOnEsc","shouldCloseOnOverlayClick"],"sourceRoot":""}