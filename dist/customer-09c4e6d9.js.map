{"version":3,"file":"customer-09c4e6d9.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/payment/getProviderWithCustomCheckout.ts","webpack://checkout/./packages/dom-utils/src/getAppliedStyles.ts","webpack://checkout/./packages/ui/src/button/Button.tsx","webpack://checkout/./packages/core/src/app/customer/validationPatterns.ts","webpack://checkout/./packages/core/src/app/customer/getEmailValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/getCreateCustomerValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/CreateAccountForm.tsx","webpack://checkout/./packages/locale/src/TranslatedLink.tsx","webpack://checkout/./packages/core/src/app/customer/EmailField.tsx","webpack://checkout/./packages/core/src/app/customer/EmailLoginForm.tsx","webpack://checkout/./packages/core/src/app/customer/CheckoutButtonList.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/is-fastlane-window.ts","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneWatermark.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/PrivacyPolicyField.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/SubscribeField.tsx","webpack://checkout/./packages/core/src/app/customer/GuestForm.tsx","webpack://checkout/./packages/core/src/app/customer/StripeGuestForm.tsx","webpack://checkout/./packages/core/src/app/customer/GuestFormContainer.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconEye.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./packages/core/src/app/customer/PasswordField.tsx","webpack://checkout/./packages/core/src/app/customer/RedirectToStorefrontLogin.tsx","webpack://checkout/./packages/core/src/app/customer/LoginForm.tsx","webpack://checkout/./packages/core/src/app/customer/mapErrorMessage.ts","webpack://checkout/./packages/core/src/app/customer/useCustomer.ts","webpack://checkout/./packages/core/src/app/customer/Customer.tsx","webpack://checkout/./packages/core/src/app/customer/mapCreateAccountFromFormValues.ts","webpack://checkout/./packages/dom-utils/src/parseAnchor.ts"],"sourcesContent":["import { PaymentMethodId } from './paymentMethod';\n\nexport default function getProviderWithCustomCheckout(methodId?: string | null): string | undefined {\n    if (!methodId) {\n        return undefined;\n    }\n\n    if (methodId === PaymentMethodId.PaypalCommerce || methodId === PaymentMethodId.PaypalCommerceCreditCards) {\n        return PaymentMethodId.PayPalCommerceAcceleratedCheckout;\n    }\n\n    if (methodId === PaymentMethodId.Braintree) {\n        return PaymentMethodId.BraintreeAcceleratedCheckout;\n    }\n\n    return methodId;\n}\n","import { kebabCase } from 'lodash';\n\nexport default function getAppliedStyles(\n    element: HTMLElement,\n    properties: string[],\n    pseudoElementSelector?: string,\n): { [key: string]: string } {\n    const declaration = window.getComputedStyle(element, pseudoElementSelector);\n\n    return properties.reduce(\n        (result, propertyName) => ({\n            ...result,\n            [propertyName]: declaration.getPropertyValue(kebabCase(propertyName)),\n        }),\n        {},\n    );\n}\n","import classNames from 'classnames';\nimport React, { type ButtonHTMLAttributes, type FunctionComponent } from 'react';\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    isFullWidth?: boolean;\n    isLoading?: boolean;\n    size?: ButtonSize;\n    testId?: string;\n    variant?: ButtonVariant;\n}\n\nexport enum ButtonVariant {\n    Primary = 'primary',\n    Secondary = 'secondary',\n    Action = 'action',\n}\n\nexport enum ButtonSize {\n    Small = 'small',\n    Tiny = 'tiny',\n    Large = 'large',\n}\n\nfunction getClassName(\n    props: Pick<ButtonProps, 'className' | 'isFullWidth' | 'isLoading' | 'size' | 'variant'>,\n) {\n    const { className, isFullWidth, isLoading, size, variant } = props;\n\n    return classNames(\n        'button',\n        className,\n        { 'button--primary': variant === ButtonVariant.Primary },\n        { 'button--tertiary': variant === ButtonVariant.Secondary },\n        { 'button--action': variant === ButtonVariant.Action },\n        { 'button--small': size === ButtonSize.Small },\n        { 'button--tiny': size === ButtonSize.Tiny },\n        { 'button--large': size === ButtonSize.Large },\n        { 'button--slab': isFullWidth },\n        {\n            'optimizedCheckout-buttonPrimary':\n                variant === ButtonVariant.Primary || variant === ButtonVariant.Action,\n        },\n        { 'optimizedCheckout-buttonSecondary': variant === ButtonVariant.Secondary },\n        { 'is-loading': isLoading },\n    );\n}\n\nconst Button: FunctionComponent<ButtonProps> = ({\n    children,\n    className,\n    disabled,\n    isFullWidth,\n    isLoading,\n    size,\n    testId,\n    type,\n    variant,\n    ...rest\n}) => (\n    <button\n        {...rest}\n        className={getClassName({ className, isFullWidth, isLoading, size, variant })}\n        data-test={testId}\n        disabled={disabled || isLoading}\n        type={type || 'button'}\n    >\n        {children}\n    </button>\n);\n\nexport default Button;\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP =\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, type ObjectSchema, string } from 'yup';\n\nimport { EMAIL_REGEXP } from './validationPatterns';\n\nexport interface EmailValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport default function getEmailValidationSchema({\n    language,\n}: EmailValidationSchemaOptions): ObjectSchema<{ email: string }> {\n    return object({\n        email: string()\n            .max(256)\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n            .required(language.translate('customer.email_required_error')),\n    });\n}\n","import { type FormField, type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nimport {\n    type CustomFormFieldValues,\n    getCustomFormFieldsValidationSchema,\n    type TranslateValidationErrorFunction,\n} from '../formFields';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport { type PasswordRequirements } from './getPasswordRequirements';\n\nexport type CreateAccountFormValues = {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n    acceptsMarketingEmails?: string[];\n    token?: string;\n} & CustomFormFieldValues;\n\nexport interface CreateCustomerValidationSchema {\n    formFields: FormField[];\n    language: LanguageService;\n    passwordRequirements: PasswordRequirements;\n}\n\n/* istanbul ignore next */ // Currently no limitation on new customer's name\nfunction getTranslateCreateCustomerError(\n    language?: LanguageService,\n): TranslateValidationErrorFunction {\n    return (type, { label, min, max }) => {\n        if (!language) {\n            return;\n        }\n\n        if (type === 'required') {\n            return language.translate('customer.required_error', { label });\n        }\n\n        if (type === 'max' && max) {\n            return language.translate('customer.max_error', { label, max });\n        }\n\n        if (type === 'min' && min) {\n            return language.translate('customer.min_error', { label, min });\n        }\n\n        if (type === 'invalid') {\n            return language.translate('customer.invalid_characters_error', { label });\n        }\n    };\n}\n\nexport default memoize(function getCreateCustomerValidationSchema({\n    formFields,\n    language,\n    passwordRequirements: { description, numeric, alpha, minLength },\n}: CreateCustomerValidationSchema): ObjectSchema<CreateAccountFormValues> {\n    return object({\n        firstName: string().required(language.translate('address.first_name_required_error')),\n        lastName: string().required(language.translate('address.last_name_required_error')),\n        password: string()\n            .required(language.translate('customer.password_required_error') || description)\n            .matches(\n                numeric,\n                language.translate('customer.password_number_required_error') || description,\n            )\n            .matches(\n                alpha,\n                language.translate('customer.password_letter_required_error') || description,\n            )\n            .min(\n                minLength,\n                language.translate('customer.password_under_minimum_length_error') || description,\n            )\n            .max(100, language.translate('customer.password_over_maximum_length_error')),\n    })\n        .concat(getEmailValidationSchema({ language }))\n        .concat(\n            getCustomFormFieldsValidationSchema({\n                formFields,\n                translate: getTranslateCreateCustomerError(language),\n            }),\n        );\n});\n","/* istanbul ignore file */\n\n// TODO: CHECKOUT-9010 Cover 'Customer registration failure due to using an existing email' in functional tests repo\nimport { type FormField } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { type FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { type FunctionComponent, useMemo } from 'react';\n\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport { isRequestError } from '../common/error';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\n\nimport getCreateCustomerValidationSchema, {\n    type CreateAccountFormValues,\n} from './getCreateCustomerValidationSchema';\nimport getPasswordRequirements from './getPasswordRequirements';\n\nimport './CreateAccountForm.scss';\n\nexport interface CreateAccountFormProps {\n    formFields: FormField[];\n    createAccountError?: Error;\n    isCreatingAccount?: boolean;\n    isExecutingPaymentMethodCheckout?: boolean;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onCancel?(): void;\n    onSubmit(values: CreateAccountFormValues): void;\n}\n\nfunction getAcceptsMarketingEmailsDefault(defaultShouldSubscribe: boolean, requiresMarketingConsent: boolean): string[] {\n    if (defaultShouldSubscribe) {\n        return ['1'];\n    }\n\n    return requiresMarketingConsent ? [] : ['0'];\n}\n\nfunction transformFormFieldsData(formFields: FormField[], defaultShouldSubscribe: boolean): FormField[] {\n    return formFields.map(field => {\n        if (field.name === 'acceptsMarketingEmails') {\n            const { options } = field;\n            const items = options?.items || [];\n\n            const updatedItems = items.map(item => {\n                return {\n                    value: defaultShouldSubscribe ? '1' : item.value,\n                    label: item.label,\n                }\n            });\n\n            return {\n                ...field,\n                options: {\n                    items: updatedItems,\n                }\n            }\n        }\n\n        return field;\n    });\n}\n\nconst CreateAccountForm: FunctionComponent<\n    CreateAccountFormProps & WithLanguageProps & FormikProps<CreateAccountFormValues>\n> = ({ formFields, createAccountError, isCreatingAccount, isExecutingPaymentMethodCheckout, onCancel, isFloatingLabelEnabled, defaultShouldSubscribe }) => {\n    const { themeV2 } = useThemeContext();\n    const createAccountErrorMessage = useMemo(() => {\n        if (!createAccountError) {\n            return;\n        }\n\n        if (isRequestError(createAccountError) && createAccountError.status === 409) {\n            const splitMessage = createAccountError.message.split(':');\n\n            if (splitMessage.length > 1) {\n                return (\n                    <TranslatedString\n                        data={{ email: splitMessage[1].trim() }}\n                        id=\"customer.email_in_use_text\"\n                    />\n                );\n            }\n\n            return <TranslatedString id=\"customer.unknown_email_in_use_text\" />;\n        }\n\n        return createAccountError.message;\n    }, [createAccountError]);\n\n    const fields = transformFormFieldsData(formFields, defaultShouldSubscribe);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset>\n                {createAccountErrorMessage && (\n                    <Alert type={AlertType.Error}>{createAccountErrorMessage}</Alert>\n                )}\n                <div className=\"create-account-form\">\n                    {fields.map((field) => (\n                        <DynamicFormField\n                            autocomplete={field.name}\n                            extraClass={`dynamic-form-field--${field.name}`}\n                            field={field}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            key={field.id}\n                            parentFieldName={field.custom ? 'customFields' : undefined}\n                            themeV2={themeV2}\n                        />\n                    ))}\n                </div>\n            </Fieldset>\n\n            <div className=\"form-actions\">\n                <Button\n                    className={themeV2 ? 'body-bold' : ''}\n                    disabled={isCreatingAccount || isExecutingPaymentMethodCheckout}\n                    id=\"checkout-customer-create\"\n                    isLoading={isCreatingAccount || isExecutingPaymentMethodCheckout}\n                    testId=\"customer-continue-create\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"customer.create_account_action\" />\n                </Button>\n\n                <a\n                    className={classNames('button optimizedCheckout-buttonSecondary',\n                        { 'body-bold': themeV2 })}\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={preventDefault(onCancel)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n            </div>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<CreateAccountFormProps & WithLanguageProps, CreateAccountFormValues>({\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ defaultShouldSubscribe, requiresMarketingConsent }) => ({\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            customFields: {},\n            acceptsMarketingEmails: getAcceptsMarketingEmailsDefault(defaultShouldSubscribe, requiresMarketingConsent),\n        }),\n        validationSchema: ({\n            language,\n            formFields,\n        }: CreateAccountFormProps & WithLanguageProps) => {\n            const passwordRequirements = formFields.find(\n                ({ requirements }) => requirements,\n            )?.requirements;\n\n            if (!passwordRequirements) {\n                throw new Error('Password requirements missing');\n            }\n\n            const schema = getCreateCustomerValidationSchema({\n                language,\n                formFields,\n                passwordRequirements: getPasswordRequirements(passwordRequirements),\n            });\n\n            return schema;\n        },\n    })(CreateAccountForm),\n);\n","import React, { type FunctionComponent, type MouseEventHandler } from 'react';\n\nimport { parseAnchor, preventDefault } from '@bigcommerce/checkout/dom-utils';\n\nimport { useLocale } from './LocaleContext';\nimport { type TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps> = ({ data, id, onClick, testId }) => {\n    const { language } = useLocale();\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ? (\n        <>\n            {parsedString[0]}\n            <a data-test={testId} href=\"#\" onClick={preventDefault(onClick)}>\n                {parsedString[1]}\n            </a>\n            {parsedString[2]}\n        </>\n    ) : (\n        <>{translatedString}</>\n    );\n};\n\nexport default TranslatedLink;\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    isFloatingLabelEnabled?: boolean;\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps> = ({ onChange, isFloatingLabelEnabled }) => {\n    const { themeV2 } = useThemeContext();\n\n    const renderInput = useCallback(\n        (props: FieldProps) => (\n            <TextInput\n                {...props.field}\n                autoComplete={props.field.name}\n                id={props.field.name}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                themeV2={themeV2}\n                type=\"email\"\n            />\n        ),\n        [isFloatingLabelEnabled],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id=\"customer.email_label\" />, []);\n\n    return (\n        <FormField\n            input={renderInput}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            labelContent={labelContent}\n            name=\"email\"\n            onChange={onChange}\n            themeV2={themeV2}\n        />\n    );\n};\n\nexport default memo(EmailField);\n","import { type SignInEmail } from '@bigcommerce/checkout-sdk';\nimport { type FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { type FunctionComponent, memo, useMemo } from 'react';\n\nimport {\n    TranslatedHtml,\n    TranslatedLink,\n    TranslatedString,\n    withLanguage,\n    type WithLanguageProps,\n} from '@bigcommerce/checkout/locale';\nimport { LoadingSpinner } from '@bigcommerce/checkout/ui';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport EmailField from './EmailField';\nimport getEmailValidationSchema from './getEmailValidationSchema';\n\nexport interface EmailLoginFormProps {\n    email?: string;\n    isOpen: boolean;\n    isSendingEmail?: boolean;\n    emailHasBeenRequested?: boolean;\n    sentEmail?: SignInEmail;\n    sentEmailError?: any;\n    isFloatingLabelEnabled?: boolean;\n    onRequestClose?(): void;\n    onSendLoginEmail?(values: EmailLoginFormValues): void;\n}\n\nexport interface EmailLoginFormValues {\n    email: string;\n}\n\nconst EmailLoginForm: FunctionComponent<\n    EmailLoginFormProps & WithLanguageProps & FormikProps<EmailLoginFormValues>\n> = ({\n    email,\n    isOpen,\n    isSendingEmail = false,\n    emailHasBeenRequested,\n    onRequestClose = noop,\n    sentEmailError,\n    sentEmail,\n    submitForm,\n    isFloatingLabelEnabled,\n    values: { email: formEmail },\n}) => {\n    const modalHeaderStringId = useMemo(() => {\n        if (emailHasBeenRequested) {\n            if (sentEmailError) {\n                return 'common.error_heading';\n            }\n\n            return 'login_email.sent_header';\n        }\n\n        if (email) {\n            return 'login_email.header_with_email';\n        }\n\n        return 'login_email.header';\n    }, [emailHasBeenRequested, sentEmailError, email]);\n\n    const okButton = useMemo(\n        () => (\n            <div className=\"modal-footer\">\n                <Button onClick={onRequestClose}>\n                    <TranslatedString id=\"common.ok_action\" />\n                </Button>\n            </div>\n        ),\n        [onRequestClose],\n    );\n\n    const footer = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return okButton;\n        }\n\n        if (emailHasBeenRequested && !sentEmailError) {\n            if (isSendingEmail) {\n                return <LoadingSpinner isLoading />;\n            }\n\n            if (sentEmail && sentEmail.sent_email === 'reset_password') {\n                return okButton;\n            }\n\n            return (\n                <p>\n                    <TranslatedLink id=\"login_email.resend_link\" onClick={submitForm} />\n                    <TranslatedLink id=\"login_email.use_password_link\" onClick={onRequestClose} />\n                </p>\n            );\n        }\n\n        return (\n            <div className=\"modal-footer\">\n                <Button\n                    className=\"optimizedCheckout-buttonSecondary\"\n                    onClick={onRequestClose}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </Button>\n                <Button isLoading={isSendingEmail} type=\"submit\" variant={ButtonVariant.Primary}>\n                    <TranslatedString id=\"login_email.send\" />\n                </Button>\n            </div>\n        );\n    }, [\n        sentEmailError,\n        emailHasBeenRequested,\n        okButton,\n        submitForm,\n        isSendingEmail,\n        onRequestClose,\n        sentEmail,\n    ]);\n\n    const error = useMemo(() => {\n        if (!sentEmailError) {\n            return null;\n        }\n\n        const { status } = sentEmailError;\n\n        return (\n            <Alert type={AlertType.Error}>\n                {status === 429 ? (\n                    <TranslatedString id=\"login_email.error_temporary_disabled\" />\n                ) : (\n                    <TranslatedString\n                        id={\n                            status === 404\n                                ? 'login_email.error_not_found'\n                                : 'login_email.error_server'\n                        }\n                    />\n                )}\n            </Alert>\n        );\n    }, [sentEmailError]);\n\n    const form = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return null;\n        }\n\n        if (emailHasBeenRequested && sentEmail && !sentEmailError) {\n            const { expiry, sent_email } = sentEmail;\n\n            return (\n                <p>\n                    <TranslatedHtml\n                        data={{\n                            minutes: Math.round(expiry / 60),\n                        }}\n                        id={\n                            sent_email === 'sign_in'\n                                ? 'login_email.sent_text'\n                                : 'customer.reset_password_before_login_error'\n                        }\n                    />\n                </p>\n            );\n        }\n\n        if (emailHasBeenRequested && !sentEmail) {\n            return <EmailField isFloatingLabelEnabled={isFloatingLabelEnabled} />;\n        }\n\n        return (\n            <>\n                <p>\n                    <TranslatedString id=\"login_email.text\" />\n                </p>\n                <EmailField isFloatingLabelEnabled={isFloatingLabelEnabled} />\n            </>\n        );\n    }, [sentEmailError, emailHasBeenRequested, sentEmail, formEmail]);\n\n    return (\n        <Modal\n            additionalBodyClassName=\"modal--withText\"\n            additionalModalClassName=\"modal--medium\"\n            header={\n                <ModalHeader>\n                    <TranslatedString id={modalHeaderStringId} />\n                </ModalHeader>\n            }\n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n            shouldShowCloseButton={true}\n        >\n            <Form>\n                <LoadingSpinner isLoading={isSendingEmail && !email} />\n                {error}\n                {form}\n                {footer}\n            </Form>\n        </Modal>\n    );\n};\n\nexport default withLanguage(\n    withFormik<EmailLoginFormProps & WithLanguageProps, EmailLoginFormValues>({\n        mapPropsToValues: ({ email = '' }) => ({\n            email,\n        }),\n        handleSubmit: (values, { props: { onSendLoginEmail = noop } }) => {\n            onSendLoginEmail(values);\n        },\n        validationSchema: ({ language }: WithLanguageProps) =>\n            getEmailValidationSchema({ language }),\n    })(memo(EmailLoginForm)),\n);\n","import {\n    type CheckoutSelectors,\n    type CheckoutService,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { type FunctionComponent, lazy, memo } from 'react';\n\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LazyContainer } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../checkout';\n\nimport { getSupportedMethodIds } from './getSupportedMethods';\nimport resolveCheckoutButton from './resolveCheckoutButton';\n\nconst CheckoutButtonV1Resolver = lazy(() => import(/* webpackChunkName: \"wallet-button-v1-resolver\" */'./WalletButtonV1Resolver'));\n\nexport interface CheckoutButtonListProps {\n    hideText?: boolean;\n    isInitializing?: boolean;\n    methodIds?: string[];\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    deinitialize(options: CustomerRequestOptions): void;\n    initialize(options: CustomerInitializeOptions): void;\n    onClick?(methodId: string): void;\n    onError?(error: Error): void;\n}\n\ninterface WithCheckoutCheckoutButtonListProps {\n    checkoutState: CheckoutSelectors;\n    checkoutService: CheckoutService;\n}\n\nconst CheckoutButtonList: FunctionComponent<WithCheckoutCheckoutButtonListProps & CheckoutButtonListProps> = ({\n    checkoutService,\n    checkoutState,\n    hideText = false,\n    isInitializing = false,\n    methodIds = [],\n    checkEmbeddedSupport,\n    deinitialize,\n    initialize,\n    onClick = noop,\n    onError,\n}) => {\n    const { language } = useLocale();\n    const supportedMethodIds = getSupportedMethodIds(methodIds);\n\n    if (supportedMethodIds.length === 0) {\n        return null;\n    }\n\n    if (checkEmbeddedSupport) {\n        try {\n            checkEmbeddedSupport(supportedMethodIds);\n        } catch (error) {\n            if (error instanceof Error && onError) {\n                onError(error);\n            } else {\n                throw error;\n            }\n\n            return null;\n        }\n    }\n\n    const renderButtons = () => {\n        return supportedMethodIds.map((methodId) => {\n            const ResolvedCheckoutButton = resolveCheckoutButton(\n                { id: methodId },\n            );\n\n            if (!ResolvedCheckoutButton) {\n                return <LazyContainer key={methodId}>\n                    <CheckoutButtonV1Resolver\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShowingWalletButtonsOnTop={false}\n                        key={methodId}\n                        methodId={methodId}\n                        onClick={onClick}\n                        onError={onClick}\n                    />\n                </LazyContainer>\n            }\n\n            return <LazyContainer key={methodId}>\n                <ResolvedCheckoutButton\n                    checkoutService={checkoutService}\n                    checkoutState={checkoutState}\n                    containerId={`${methodId}CheckoutButton`}\n                    language={language}\n                    methodId={methodId}\n                    onUnhandledError={onClick}\n                    onWalletButtonClick={onClick}\n                />\n            </LazyContainer>;\n        });\n    };\n\n    return (\n        <>\n            {!isInitializing && !hideText && (\n                <p>\n                    <TranslatedString id=\"remote.continue_with_text\" />\n                </p>\n            )}\n\n            <div className=\"checkoutRemote\">\n                {renderButtons()}\n            </div>\n        </>\n    );\n};\n\nfunction mapToCheckoutButtonListProps({\n  checkoutState,\n  checkoutService,\n}: CheckoutContextProps): WithCheckoutCheckoutButtonListProps | null {\n    return {\n        checkoutService,\n        checkoutState,\n    };\n}\n\nexport default memo(withCheckout(mapToCheckoutButtonListProps)(CheckoutButtonList));\n","import { type FastlaneHostWindow } from './types';\n\nexport default function isFastlaneHostWindow(window: Window): window is FastlaneHostWindow {\n    /* eslint-disable no-prototype-builtins */\n    return window.hasOwnProperty('paypalFastlane') || window.hasOwnProperty('braintreeFastlane');\n}\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport isBraintreeFastlaneMethod from './is-braintree-fastlane-method';\nimport isFastlaneHostWindow from './is-fastlane-window';\nimport isPayPalFastlaneMethod from './is-paypal-fastlane-method';\nimport { type FastlanePrivacySettings } from './types';\n\nimport './PayPalFastlaneWatermark.scss';\n\nconst PayPalFastlaneWatermark: FunctionComponent = () => {\n    const { checkoutState } = useCheckout();\n    const { getPaymentMethod, getConfig } = checkoutState.data;\n    const providerWithCustomCheckout =\n        getConfig()?.checkoutSettings.providerWithCustomCheckout || '';\n\n    const paymentMethod =\n        !!providerWithCustomCheckout &&\n        isPayPalFastlaneMethod(providerWithCustomCheckout) &&\n        getPaymentMethod(providerWithCustomCheckout);\n\n    const shouldRenderFastlaneWatermark =\n        isFastlaneHostWindow(window) &&\n        !!paymentMethod &&\n        !!paymentMethod.initializationData?.isFastlanePrivacySettingEnabled;\n\n    useEffect(() => {\n        if (shouldRenderFastlaneWatermark && isFastlaneHostWindow(window)) {\n            const fastlane = isBraintreeFastlaneMethod(providerWithCustomCheckout)\n                ? window.braintreeFastlane\n                : window.paypalFastlane;\n\n            void fastlane\n                .FastlaneWatermarkComponent({\n                    includeAdditionalInfo: true,\n                })\n                .then((result: FastlanePrivacySettings) => {\n                    result.render('#paypalFastlaneWatermark');\n                });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (shouldRenderFastlaneWatermark) {\n        return (\n            <div className=\"paypalFastlaneWatermark-container\">\n                <div data-test=\"paypalFastlaneWatermark\" id=\"paypalFastlaneWatermark\" />\n            </div>\n        );\n    }\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n\nexport default PayPalFastlaneWatermark;\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField, Fieldset } from '../ui/form';\n\nconst PrivacyPolicyCheckboxFieldLink: FunctionComponent<{ url: string, themeV2?: boolean }> = ({ url, themeV2 }) => (\n    <CheckboxFormField\n        labelContent={<TranslatedHtml data={{ url }} id=\"privacy_policy.label\" />}\n        name=\"privacyPolicy\"\n        testId=\"privacy-policy-checkbox\"\n        themeV2={themeV2}\n    />\n);\n\nconst PrivacyPolicyFieldset: FunctionComponent<{ url: string, themeV2?: boolean }> = ({ url, themeV2 }) => (\n    <Fieldset additionalClassName=\"checkout-privacy-policy\">\n        <PrivacyPolicyCheckboxFieldLink themeV2={themeV2} url={url} />\n    </Fieldset>\n);\n\nconst PrivacyPolicyAutoConsent: FunctionComponent<{ url: string, themeV2?: boolean }> = ({ url, themeV2 }) => (\n    <p className={themeV2 ? 'body-regular' : ''}>\n        <TranslatedHtml data={{ url }} id=\"privacy_policy_auto_consent.label\" />\n    </p>\n);\n\nconst PrivacyPolicyField: FunctionComponent<{ url: string; isExpressPrivacyPolicy: boolean }> = ({\n    url,\n    isExpressPrivacyPolicy,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    if (isExpressPrivacyPolicy) {\n        return <PrivacyPolicyAutoConsent themeV2={themeV2} url={url} />;\n    }\n\n    return <PrivacyPolicyFieldset themeV2={themeV2} url={url} />;\n};\n\nexport default memo(PrivacyPolicyField);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, type BooleanSchema, object, type ObjectSchema } from 'yup';\n\nexport interface PrivacyPolicyValidatonSchemaProps {\n    isRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPrivacyPolicyValidationSchema({\n    isRequired,\n    language,\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\n    const schemaFields: {\n        privacyPolicy?: BooleanSchema;\n    } = {};\n\n    if (isRequired) {\n        schemaFields.privacyPolicy = boolean().oneOf(\n            [true],\n            language.translate('privacy_policy.required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\n\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean> & {\n    requiresMarketingConsent: boolean;\n};\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({\n    field,\n    requiresMarketingConsent,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <>\n            <Input\n                {...field}\n                checked={field.value}\n                className=\"form-checkbox\"\n                id={field.name}\n                testId=\"should-subscribe-checkbox\"\n                type=\"checkbox\"\n                value={String(field.value)}\n            />\n\n            <Label\n                additionalClassName={themeV2 ? 'body-regular' : ''}\n                htmlFor={field.name}\n            >\n                <TranslatedHtml\n                    id={\n                        requiresMarketingConsent\n                            ? 'customer.guest_marketing_consent'\n                            : 'customer.guest_subscribe_to_newsletter_text'\n                    }\n                />\n            </Label>\n        </>\n    );\n}\n\nexport default memo(SubscribeField);\n","import classNames from 'classnames';\nimport { type FieldProps, type FormikProps, withFormik } from 'formik';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback, useEffect } from 'react';\nimport { object, string } from 'yup';\n\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { PayPalFastlaneWatermark } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\nimport { SubscribeSessionStorage } from './SubscribeSessionStorage';\n\nfunction getShouldSubscribeValue(requiresMarketingConsent: boolean, defaultShouldSubscribe: boolean) {\n    if (SubscribeSessionStorage.getSubscribeStatus()) {\n        return true;\n    }\n\n    return requiresMarketingConsent ? false : defaultShouldSubscribe\n}\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    continueAsGuestButtonLabelId: string;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isLoading: boolean;\n    privacyPolicyUrl?: string;\n    isExpressPrivacyPolicy: boolean;\n    isFloatingLabelEnabled?: boolean;\n    shouldShowEmailWatermark: boolean;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<\n    GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>\n> = ({\n    canSubscribe,\n    checkoutButtons,\n    continueAsGuestButtonLabelId,\n    defaultShouldSubscribe,\n    isLoading,\n    onChangeEmail,\n    onShowLogin,\n    privacyPolicyUrl,\n    requiresMarketingConsent,\n    isExpressPrivacyPolicy,\n    isFloatingLabelEnabled,\n    shouldShowEmailWatermark,\n    setFieldValue,\n}) => {\n    const {\n        checkoutState: {\n            data: { getConfig }\n        }\n    } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const config = getConfig();\n\n    const renderField = useCallback(\n        (fieldProps: FieldProps<boolean>) => (\n            <SubscribeField {...fieldProps} requiresMarketingConsent={requiresMarketingConsent} />\n        ),\n        [requiresMarketingConsent],\n    );\n\n    useEffect(() => {\n        void setFieldValue(\n            'shouldSubscribe',\n            getShouldSubscribeValue(requiresMarketingConsent, defaultShouldSubscribe),\n            );\n    }, [requiresMarketingConsent, defaultShouldSubscribe]);\n\n    if (!config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            shouldRedirectToStorefrontForAuth,\n        },\n        links: {\n            checkoutLink,\n            loginLink,\n        }\n    } = config;\n\n    const handleLogin: () => void = () => {\n        if (shouldRedirectToStorefrontForAuth) {\n            window.location.assign(`${loginLink}?redirectTo=${checkoutLink}`);\n\n            return;\n        }\n\n        return onShowLogin();\n    }\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-guest\"\n            testId=\"checkout-customer-guest\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.guest_customer_text\" />\n                    </Legend>\n                }\n            >\n                <div className=\"customerEmail-container\">\n                    <div className=\"customerEmail-body\">\n                        <EmailField isFloatingLabelEnabled={isFloatingLabelEnabled} onChange={onChangeEmail}/>\n\n                        {shouldShowEmailWatermark && <PayPalFastlaneWatermark />}\n\n                        {(canSubscribe || requiresMarketingConsent) && (\n                            <BasicFormField name=\"shouldSubscribe\" render={renderField} />\n                        )}\n                    </div>\n\n                    <div\n                        className={classNames('form-actions customerEmail-action', {\n                            'customerEmail-floating--enabled': isFloatingLabelEnabled,\n                        })}\n                    >\n                        <Button\n                            className={classNames('customerEmail-button', {\n                                'body-bold': themeV2,\n                            })}\n                            id=\"checkout-customer-continue\"\n                            isLoading={isLoading}\n                            testId=\"customer-continue-as-guest-button\"\n                            type=\"submit\"\n                            variant={ButtonVariant.Primary}\n                        >\n                            <TranslatedString id={continueAsGuestButtonLabelId} />\n                        </Button>\n                    </div>\n                </div>\n\n                {privacyPolicyUrl && (\n                    <PrivacyPolicyField isExpressPrivacyPolicy={isExpressPrivacyPolicy} url={privacyPolicyUrl} />\n                )}\n\n                {!isLoading && (\n                    <p className={classNames('customer-login-link',\n                        { 'body-regular': themeV2 })}\n                    >\n                        <TranslatedString id=\"customer.login_text\" />{' '}\n                        <a\n                            data-test=\"customer-continue-button\"\n                            id=\"checkout-customer-login\"\n                            onClick={handleLogin}\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                            <TranslatedString id=\"customer.login_action\" />\n                        </a>\n                    </p>\n                )}\n\n                {checkoutButtons}\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n        mapPropsToValues: ({\n            email = '',\n            defaultShouldSubscribe = false,\n            requiresMarketingConsent,\n        }) => ({\n            email,\n            shouldSubscribe: getShouldSubscribeValue(requiresMarketingConsent, defaultShouldSubscribe),\n            privacyPolicy: false,\n        }),\n        handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n            onContinueAsGuest(values);\n        },\n        validationSchema: ({ language, privacyPolicyUrl, isExpressPrivacyPolicy }: GuestFormProps & WithLanguageProps) => {\n            const email = string()\n                .email(language.translate('customer.email_invalid_error'))\n                .max(256)\n                .required(language.translate('customer.email_required_error'));\n\n            const baseSchema = object({ email });\n\n            if (privacyPolicyUrl && !isExpressPrivacyPolicy) {\n                return baseSchema.concat(\n                    getPrivacyPolicyValidationSchema({\n                        isRequired: !!privacyPolicyUrl,\n                        language,\n                    }),\n                );\n            }\n\n            return baseSchema;\n        },\n    })(memo(GuestForm)),\n);\n","import { type CustomerInitializeOptions, type CustomerRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { createStripeUPECustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/stripe';\nimport { type FieldProps, type FormikProps, withFormik } from 'formik';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback, useEffect, useState } from 'react';\nimport { object } from 'yup';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport type CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend } from '../ui/form';\n\nimport { type GuestFormValues } from './GuestForm';\nimport SubscribeField from './SubscribeField';\n\nexport interface StripeGuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    step: CheckoutStepStatus;\n    continueAsGuestButtonLabelId: string;\n    email?: string;\n    isLoading: boolean;\n    isExpressPrivacyPolicy: boolean;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    privacyPolicyUrl?: string;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    deinitialize(options: CustomerRequestOptions): void;\n    initialize(options: CustomerInitializeOptions): void;\n    onShowLogin(): void;\n}\n\nconst StripeGuestForm: FunctionComponent<StripeGuestFormProps & FormikProps<GuestFormValues>> = ({\n    continueAsGuestButtonLabelId,\n    isLoading,\n    initialize,\n    isExpressPrivacyPolicy,\n    deinitialize,\n    onChangeEmail,\n    onShowLogin,\n    onContinueAsGuest,\n    canSubscribe,\n    checkoutButtons,\n    defaultShouldSubscribe,\n    requiresMarketingConsent,\n    privacyPolicyUrl,\n    step,\n    status,\n    setFieldValue,\n}) => {\n\n    const [continueAsAGuestButton, setContinueAsAGuestButton] = useState(true);\n    const [emailValue, setEmailValue] = useState('');\n    const [authentication, setAuthentication] = useState(false);\n    const [isStripeLoading, setIsStripeLoading] = useState(true);\n    const [isNewAuth, setIsNewAuth] = useState(false);\n    const handleOnClickSubmitButton = () => {\n        onContinueAsGuest({\n            email: emailValue,\n            shouldSubscribe: !!status?.shouldSubscribe,\n        });\n    };\n    const setEmailCallback = useCallback((authenticated: boolean, email: string) => {\n        setFieldValue('email', email);\n        onChangeEmail(email);\n        setEmailValue(email);\n        setContinueAsAGuestButton(!email);\n        setAuthentication(authenticated);\n\n        if(!authenticated){\n            setIsNewAuth(true);\n        }\n    }, [setContinueAsAGuestButton, onChangeEmail]);\n\n    useEffect(() => {\n        if ((!step.isComplete || isNewAuth) && emailValue && authentication) {\n            handleOnClickSubmitButton();\n        }\n    }, [emailValue, authentication, isNewAuth]);\n\n    useEffect(() => {\n        if (status?.valSuccess) {\n            handleOnClickSubmitButton();\n        }\n    }, [status?.valSuccess]);\n\n    const handleLoading = useCallback((mounted: boolean) => {\n        setIsStripeLoading(mounted);\n    }, []);\n\n    const stripeDeinitialize = () => {\n        deinitialize({\n            methodId: 'stripeupe',\n        });\n    };\n\n    const stripeInitialize = () => {\n        initialize( {\n            methodId: 'stripeupe',\n            integrations: [createStripeUPECustomerStrategy],\n            stripeupe: {\n                container: 'stripeupeLink',\n                onEmailChange: setEmailCallback,\n                isLoading: handleLoading,\n                getStyles: getStripeStyles,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        })};\n\n    useEffect(() => {\n        stripeInitialize();\n\n        return () => stripeDeinitialize();\n    }, []);\n\n    useEffect(() => {\n        void setFieldValue(\n            'shouldSubscribe',\n            requiresMarketingConsent ? false : defaultShouldSubscribe,\n        );\n    }, [requiresMarketingConsent, defaultShouldSubscribe]);\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n            return undefined;\n\n    };\n\n    const containerId = 'stripe-card-component-field';\n\n    const getStripeStyles: () => (Record<string, string> | undefined) = useCallback( () => {\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n    const renderCheckoutThemeStylesForStripeUPE = () => {\n        return (\n            <div\n                className=\"optimizedCheckout-form-input\"\n                id={ `${containerId}--input` }\n            >\n                <div\n                    className=\"form-field--error\"\n                >\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--error` }\n                    />\n                </div>\n                <div\n                    className=\"optimizedCheckout-form-label\"\n                    id={ `${containerId}--label` }\n                />\n            </div>\n        );\n    };\n\n    const renderField = useCallback((fieldProps: FieldProps<boolean>) => (\n        <SubscribeField\n            { ...fieldProps }\n            requiresMarketingConsent={ requiresMarketingConsent }\n        />\n    ), [\n        requiresMarketingConsent,\n    ]);\n\n    const buttonText = authentication && !isNewAuth? 'customer.continue_as_stripe_customer_action' : continueAsGuestButtonLabelId;\n\n    return (\n        <>\n            <Form\n                className=\"checkout-form\"\n                id=\"checkout-customer-guest\"\n                testId=\"checkout-customer-guest\"\n            >\n                <div className=\"checkout-form\" style={ { display: isStripeLoading ? 'none' : undefined } }>\n                    <Fieldset\n                        legend={ !authentication &&\n                            <Legend hidden>\n                                <TranslatedString id=\"customer.guest_customer_text\"/>\n                            </Legend>\n                        }\n                    >\n                        <div className=\"customerEmail-container\">\n                            <div className=\"customerEmail-body\">\n                                <div id=\"stripeupeLink\"/>\n                                <br/>\n                                { (canSubscribe || requiresMarketingConsent) && <BasicFormField\n                                    name=\"shouldSubscribe\"\n                                    render={ renderField }\n                                /> }\n                            </div>\n\n                            <div className=\"form-actions customerEmail-action\">\n                                { (!authentication || (authentication && !isNewAuth )) && <Button\n                                    className=\"stripeCustomerEmail-button\"\n                                    disabled={ continueAsAGuestButton }\n                                    id=\"stripe-checkout-customer-continue\"\n                                    isLoading={ isLoading }\n                                    testId=\"stripe-customer-continue-as-guest-button\"\n                                    type=\"submit\"\n                                    variant={ ButtonVariant.Primary }\n                                >\n                                    <TranslatedString id={ buttonText }/>\n                                </Button> }\n                            </div>\n                        </div>\n\n                        {privacyPolicyUrl && (\n                            <PrivacyPolicyField isExpressPrivacyPolicy={isExpressPrivacyPolicy} url={privacyPolicyUrl} />\n                        )}\n\n                        {\n                            !isLoading && <p>\n                                <TranslatedString id=\"customer.login_text\"/>\n                                { ' ' }\n                                <a\n                                    data-test=\"customer-continue-button\"\n                                    id=\"checkout-customer-login\"\n                                    onClick={ onShowLogin }\n                                    role=\"button\"\n                                    tabIndex={0}\n                                >\n                                    <TranslatedString id=\"customer.login_action\"/>\n                                </a>\n                            </p>\n                        }\n                        { !authentication && checkoutButtons }\n                    </Fieldset>\n                </div>\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </Form>\n        </>\n    );\n};\n\nexport default withLanguage(\n    withFormik<StripeGuestFormProps, GuestFormValues>({\n            mapPropsToValues: ({\n                email = '',\n                defaultShouldSubscribe = false,\n                requiresMarketingConsent,\n            }) => ({\n                email,\n                shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\n                privacyPolicy: false,\n            }),\n            handleSubmit: ( values, { setStatus }) => {\n                setStatus({\n                    valSuccess: true,\n                    shouldSubscribe: values.shouldSubscribe,\n                  });\n            },\n            validationSchema: ({ language, privacyPolicyUrl, isExpressPrivacyPolicy }: StripeGuestFormProps & WithLanguageProps) => {\n                if (privacyPolicyUrl && !isExpressPrivacyPolicy) {\n                    return getPrivacyPolicyValidationSchema({\n                            isRequired: !!privacyPolicyUrl,\n                            language,\n                        })\n                }\n\n                return object({});\n            },\n        })(memo(StripeGuestForm))\n)\n\n","import { type Cart } from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneMethod } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport type CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\n\nimport CheckoutButtonList from './CheckoutButtonList';\nimport GuestForm, { type GuestFormValues } from './GuestForm';\nimport StripeGuestForm from './StripeGuestForm';\n\ninterface GuestFormContainerProps {\n    email?: string;\n    isFloatingLabelEnabled?: boolean;\n    isWalletButtonsOnTop: boolean;\n    isSubscribed: boolean;\n    step: CheckoutStepStatus;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    handleChangeEmail(email: string): void;\n    handleContinueAsGuest(formValues: GuestFormValues): void;\n    handleShowLogin(): void;\n    onWalletButtonClick?(methodName: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction shouldRenderStripeForm(cart: Cart, providerWithCustomCheckout?: string) {\n    return providerWithCustomCheckout === PaymentMethodId.StripeUPE\n        && shouldUseStripeLinkByMinimumAmount(cart)\n}\n\nexport const GuestFormContainer: React.FC<GuestFormContainerProps> = ({\n    email,\n    isFloatingLabelEnabled,\n    isWalletButtonsOnTop,\n    isSubscribed,\n    step,\n    checkEmbeddedSupport,\n    handleChangeEmail,\n    handleContinueAsGuest,\n    handleShowLogin,\n    onWalletButtonClick,\n    onUnhandledError,\n}) => {\n    const { checkoutState, checkoutService } = useCheckout();\n    const {\n        data: {\n            isPaymentDataRequired,\n            getConfig,\n            getCart,\n        },\n        statuses: {\n            isInitializingCustomer,\n            isContinuingAsGuest,\n            isExecutingPaymentMethodCheckout\n        },\n    } = checkoutState;\n\n    const {\n        deinitializeCustomer,\n        initializeCustomer,\n    }  = checkoutService;\n\n    const config = getConfig();\n    const cart = getCart();\n    const isLoadingGuestForm = isContinuingAsGuest() || isExecutingPaymentMethodCheckout();\n\n    if (!config || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            remoteCheckoutProviders: checkoutButtonIds,\n            providerWithCustomCheckout,\n            isExpressPrivacyPolicy,\n        },\n        shopperConfig: {\n            showNewsletterSignup: canSubscribe,\n        },\n    } = config;\n\n    const customCheckoutProvider = getProviderWithCustomCheckout(providerWithCustomCheckout);\n    \n    const checkoutButtons = isWalletButtonsOnTop || !isPaymentDataRequired()\n        ? null\n        : <CheckoutButtonList\n            checkEmbeddedSupport={checkEmbeddedSupport}\n            deinitialize={deinitializeCustomer}\n            initialize={initializeCustomer}\n            isInitializing={isInitializingCustomer()}\n            methodIds={checkoutButtonIds}\n            onClick={onWalletButtonClick}\n            onError={onUnhandledError}\n        />;\n\n    if (shouldRenderStripeForm(cart, customCheckoutProvider)) {\n        return <StripeGuestForm\n            canSubscribe={canSubscribe}\n            checkoutButtons={checkoutButtons}\n            continueAsGuestButtonLabelId=\"customer.continue\"\n            defaultShouldSubscribe={isSubscribed}\n            deinitialize={deinitializeCustomer}\n            email={email}\n            initialize={initializeCustomer}\n            isExpressPrivacyPolicy={isExpressPrivacyPolicy}\n            isLoading={isContinuingAsGuest() || isInitializingCustomer() || isExecutingPaymentMethodCheckout()}\n            onChangeEmail={handleChangeEmail}\n            onContinueAsGuest={handleContinueAsGuest}\n            onShowLogin={handleShowLogin}\n            privacyPolicyUrl={privacyPolicyUrl}\n            requiresMarketingConsent={requiresMarketingConsent}\n            step={step}\n        />;\n    }\n    \n    return <GuestForm\n        canSubscribe={canSubscribe}\n        checkoutButtons={checkoutButtons}\n        continueAsGuestButtonLabelId=\"customer.continue\"\n        defaultShouldSubscribe={isSubscribed}\n        email={email}\n        isExpressPrivacyPolicy={isExpressPrivacyPolicy}\n        isFloatingLabelEnabled={isFloatingLabelEnabled}\n        isLoading={isLoadingGuestForm}\n        onChangeEmail={handleChangeEmail}\n        onContinueAsGuest={handleContinueAsGuest}\n        onShowLogin={handleShowLogin}\n        privacyPolicyUrl={privacyPolicyUrl}\n        requiresMarketingConsent={requiresMarketingConsent}\n        shouldShowEmailWatermark={isPayPalFastlaneMethod(customCheckoutProvider)}\n    />\n};\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg viewBox=\"0 0 576 512\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg viewBox=\"0 0 640 512\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../ui/form';\nimport Label from '../ui/form/Label';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\ninterface WithFloatingLabel {\n    isFloatingLabelEnabled?: boolean;\n}\n\nconst PasswordField: FunctionComponent<WithFloatingLabel> = ({ isFloatingLabelEnabled = false }) => {\n    const { themeV2 } = useThemeContext();\n\n    const renderInput = useCallback(\n        (props: FieldProps) => (\n            <Toggle openByDefault={false}>\n                {({ isOpen, toggle }) => (\n                    <div className=\"form-field-password\">\n                        <TextInput\n                            {...props.field}\n                            additionalClassName=\"form-input--withIcon\"\n                            id={props.field.name}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            themeV2={themeV2}\n                            type={isOpen ? 'text' : 'password'}\n                        />\n                        {isFloatingLabelEnabled && (\n                            <Label\n                                additionalClassName={themeV2 ? 'floating-form-field-label' : ''}\n                                htmlFor={props.field.name}\n                                id={`${props.field.name}-label`}\n                                isFloatingLabelEnabled={true}\n                            >\n                                <TranslatedString id=\"customer.password_label\" />\n                            </Label>\n                        )}\n                        <a\n                            className=\"form-toggle-password form-input-icon\"\n                            href=\"#\"\n                            onClick={toggle}\n                        >\n                            {isOpen ? <IconEye /> : <IconEyeSlash />}\n                        </a>\n                    </div>\n                )}\n            </Toggle>\n        ),\n        [isFloatingLabelEnabled],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id=\"customer.password_label\" />, []);\n\n    return <FormField input={renderInput} isFloatingLabelEnabled={isFloatingLabelEnabled} labelContent={isFloatingLabelEnabled ? null : labelContent} name=\"password\" />;\n};\n\nexport default memo(PasswordField);\n","import React from 'react';\n\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Button, ButtonVariant } from '@bigcommerce/checkout/ui';\n\ninterface RedirectToStorefrontLoginProps {\n    isDisabled: boolean;\n    isLoading: boolean;\n}\n\nexport const RedirectToStorefrontLogin: React.FC<RedirectToStorefrontLoginProps> = ({\n    isDisabled,\n    isLoading,\n}) => {\n    const { themeV2 } = useThemeContext();\n    const { checkoutState: { data: { getConfig } } } = useCheckout();\n\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    const { checkoutLink, loginLink } = config.links;\n\n    const handleRedirect = () => {\n        return window.location.assign(`${loginLink}?redirectTo=${checkoutLink}`);\n    }\n\n    return (\n        <Button\n            className={themeV2 ? 'body-bold' : ''}\n            disabled={isDisabled}\n            id=\"checkout-customer-continue\"\n            isLoading={isLoading}\n            onClick={handleRedirect}\n            testId=\"customer-continue-button\"\n            variant={ButtonVariant.Primary}\n        >\n            <TranslatedString id=\"customer.sign_in_action\" />\n        </Button>\n    );\n};\n","import classNames from 'classnames';\nimport { type FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\nimport { object, string } from 'yup';\n\nimport { useThemeContext } from '@bigcommerce/checkout/contexts';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    TranslatedHtml,\n    TranslatedLink,\n    TranslatedString,\n    withLanguage,\n    type WithLanguageProps,\n} from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport CustomerViewType from './CustomerViewType';\nimport EmailField from './EmailField';\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport mapErrorMessage from './mapErrorMessage';\nimport PasswordField from './PasswordField';\nimport { RedirectToStorefrontLogin } from './RedirectToStorefrontLogin';\n\nexport interface LoginFormProps {\n    continueAsGuestButtonLabelId: string;\n    email?: string;\n    isEmbedded?: boolean;\n    viewType?: Omit<CustomerViewType, 'guest'>;\n    isFloatingLabelEnabled?: boolean;\n    signInError?: Error;\n    onCancel?(): void;\n    onCreateAccount?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n    onSendLoginEmail?(): void;\n    onContinueAsGuest?(): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<\n    LoginFormProps & FormikProps<LoginFormValues> & WithLanguageProps\n> = ({\n    continueAsGuestButtonLabelId,\n    email,\n    isEmbedded,\n    language,\n    signInError,\n    onCancel = noop,\n    onChangeEmail,\n    onContinueAsGuest,\n    onCreateAccount = noop,\n    onSendLoginEmail = noop,\n    isFloatingLabelEnabled,\n    viewType = CustomerViewType.Login,\n}) => {\n    const { themeV2 } = useThemeContext();\n    const { checkoutState } = useCheckout();\n\n    const {\n        data: { getCart, getConfig },\n        statuses: { isExecutingPaymentMethodCheckout, isSigningIn },\n    } = checkoutState;\n    const cart = getCart();\n    const config = getConfig();\n\n    if (!cart || !config) {\n        throw new Error('cart is not available');\n    }\n\n    const {\n        checkoutSettings: {\n            isAccountCreationEnabled: shouldShowCreateAccountLink,\n            isSignInEmailEnabled,\n            guestCheckoutEnabled: canCancel,\n            shouldRedirectToStorefrontForAuth,\n        },\n        links: {\n            forgotPasswordLink: forgotPasswordUrl\n        }\n    } = config;\n\n    const isBuyNowCart = cart.source === 'BUY_NOW';\n\n    const changeEmailLink = useCallback(() => {\n        if (!email) {\n            return null;\n        }\n\n        return (\n            <p className=\"optimizedCheckout-contentSecondary\">\n                <TranslatedLink\n                    data={{ email }}\n                    id=\"customer.guest_could_login_change_email\"\n                    onClick={onCancel}\n                    testId=\"change-email\"\n                />\n            </p>\n        );\n    }, [email, onCancel]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.returning_customer_text\" />\n                    </Legend>\n                }\n            >\n                {signInError && (\n                    <Alert testId=\"customer-login-error-message\" type={AlertType.Error}>\n                        {mapErrorMessage(signInError, (key) => language.translate(key))}\n                    </Alert>\n                )}\n\n                {viewType === CustomerViewType.SuggestedLogin && (\n                    <Alert type={AlertType.Info}>\n                        <TranslatedHtml data={{ email }} id=\"customer.guest_could_login\" />\n                    </Alert>\n                )}\n\n                {viewType === CustomerViewType.CancellableEnforcedLogin && (\n                    <Alert type={AlertType.Info}>\n                        <TranslatedHtml data={{ email }} id=\"customer.guest_must_login\" />\n                    </Alert>\n                )}\n\n                {viewType === CustomerViewType.EnforcedLogin && (\n                    <Alert type={AlertType.Error}>\n                        <TranslatedLink\n                            id=\"customer.guest_temporary_disabled\"\n                            onClick={onCreateAccount}\n                        />\n                    </Alert>\n                )}\n\n                {(viewType === CustomerViewType.Login ||\n                    viewType === CustomerViewType.EnforcedLogin) && (\n                    <EmailField isFloatingLabelEnabled={isFloatingLabelEnabled} onChange={onChangeEmail} />\n                )}\n\n                {!shouldRedirectToStorefrontForAuth && <PasswordField isFloatingLabelEnabled={isFloatingLabelEnabled} />}\n\n                <p className={classNames('form-legend-container', { 'body-cta': themeV2 })}>\n                    <span>\n                        { isSignInEmailEnabled && !isEmbedded && !isBuyNowCart &&\n                            <TranslatedLink\n                                id=\"login_email.link\"\n                                onClick={ onSendLoginEmail }\n                                testId=\"customer-signin-link\"\n                            />\n                        }\n                        { !isSignInEmailEnabled && !isEmbedded && !shouldRedirectToStorefrontForAuth &&\n                            <a\n                                data-test=\"forgot-password-link\"\n                                href={ forgotPasswordUrl }\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                            >\n                                <TranslatedString id=\"customer.forgot_password_action\" />\n                            </a>\n                        }\n                    </span>\n                    { viewType === CustomerViewType.Login && shouldShowCreateAccountLink &&\n                        <span>\n                            <TranslatedLink\n                                id=\"customer.create_account_to_continue_text\"\n                                onClick={onCreateAccount}\n                            />\n                        </span>\n                    }\n                </p>\n\n                <div className=\"form-actions\">\n                    {shouldRedirectToStorefrontForAuth ?\n                        <RedirectToStorefrontLogin\n                            isDisabled={Boolean(isSigningIn() || isExecutingPaymentMethodCheckout())}\n                            isLoading={Boolean(isSigningIn() || isExecutingPaymentMethodCheckout())}\n                        />\n                        :\n                        <Button\n                            className={themeV2 ? 'body-bold' : ''}\n                            disabled={isSigningIn() || isExecutingPaymentMethodCheckout()}\n                            id=\"checkout-customer-continue\"\n                            isLoading={isSigningIn() || isExecutingPaymentMethodCheckout()}\n                            testId=\"customer-continue-button\"\n                            type=\"submit\"\n                            variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"customer.sign_in_action\" />\n                    </Button>}\n\n                    {viewType === CustomerViewType.SuggestedLogin && (\n                        <a\n                            className={classNames('button optimizedCheckout-buttonSecondary',\n                                { 'body-bold': themeV2 })}\n                            data-test=\"customer-guest-continue\"\n                            href=\"#\"\n                            id=\"checkout-guest-continue\"\n                            onClick={preventDefault(onContinueAsGuest)}\n                        >\n                            <TranslatedString id={continueAsGuestButtonLabelId} />\n                        </a>\n                    )}\n\n                    {canCancel &&\n                        viewType !== CustomerViewType.EnforcedLogin &&\n                        viewType !== CustomerViewType.SuggestedLogin && (\n                            <a\n                            className={classNames('button optimizedCheckout-buttonSecondary',\n                                { 'body-bold': themeV2 })}\n                                data-test=\"customer-cancel-button\"\n                                href=\"#\"\n                                id=\"checkout-customer-cancel\"\n                                onClick={preventDefault(onCancel)}\n                            >\n                                <TranslatedString\n                                    id={\n                                        viewType === CustomerViewType.CancellableEnforcedLogin\n                                            ? 'login_email.use_another_email'\n                                            : 'common.cancel_action'\n                                    }\n                                />\n                            </a>\n                        )}\n                </div>\n\n                {viewType === CustomerViewType.SuggestedLogin && changeEmailLink()}\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({ email = '' }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\n        getEmailValidationSchema({ language }).concat(\n            object({\n                password: string().required(\n                    language.translate('customer.password_required_error'),\n                ),\n            }),\n        ),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string,\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n        case 'throttled_login':\n            return translate('customer.sign_in_throttled_error');\n\n        case 'reset_password_before_login':\n            return translate('customer.reset_password_before_login_error');\n\n        case 'empty_cart':\n            return translate('cart.empty_cart_error_message');\n\n        default:\n            return translate('customer.sign_in_error');\n    }\n}\n","import { \n    type CheckoutSelectors,\n    type CustomerAccountRequestBody,\n    type CustomerCredentials,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type ExecutePaymentMethodCheckoutOptions,\n    type FormField,\n    type GuestCredentials,\n    type SignInEmail\n} from '@bigcommerce/checkout-sdk';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport interface CustomerData {\n    // Basic customer data\n    email?: string;\n    firstName?: string;\n    hasBillingId: boolean;\n    isBuyNowCart: boolean;\n    \n    // Form data\n    customerAccountFields: FormField[];\n    canSubscribe: boolean;\n    defaultShouldSubscribe: boolean;\n    requiresMarketingConsent: boolean;\n    isFloatingLabelEnabled?: boolean;\n    \n    // Configuration\n    forgotPasswordUrl: string;\n    privacyPolicyUrl?: string;\n    isSignInEmailEnabled: boolean;\n    isAccountCreationEnabled: boolean;\n    isGuestEnabled: boolean;\n    isExpressPrivacyPolicy: boolean;\n    shouldRedirectToStorefrontForAuth: boolean;\n    \n    // Status flags\n    isContinuingAsGuest: boolean;\n    isExecutingPaymentMethodCheckout: boolean;\n    isInitializing: boolean;\n    isSigningIn: boolean;\n    isSendingSignInEmail: boolean;\n    isCreatingAccount: boolean;\n    \n    // Errors\n    signInError?: Error;\n    signInEmailError?: Error;\n    createAccountError?: Error;\n    \n    // Other data\n    signInEmail?: SignInEmail;\n    checkoutButtonIds: string[];\n    providerWithCustomCheckout?: string;\n    isPaymentDataRequired: boolean;\n    shouldRenderStripeForm: boolean;\n}\n\nexport interface CustomerActions {\n    clearError: (error: Error) => Promise<CheckoutSelectors>;\n    createAccount: (values: CustomerAccountRequestBody) => Promise<CheckoutSelectors>;\n    continueAsGuest: (credentials: GuestCredentials) => Promise<CheckoutSelectors>;\n    sendLoginEmail: (params: { email: string }) => Promise<CheckoutSelectors>;\n    deinitializeCustomer: (options: CustomerRequestOptions) => Promise<CheckoutSelectors>;\n    executePaymentMethodCheckout: (options: ExecutePaymentMethodCheckoutOptions) => Promise<CheckoutSelectors>;\n    initializeCustomer: (options: CustomerInitializeOptions) => Promise<CheckoutSelectors>;\n    signIn: (credentials: CustomerCredentials) => Promise<CheckoutSelectors>;\n}\n\nexport interface UseCustomerReturn {\n    data: CustomerData;\n    actions: CustomerActions;\n}\n\nexport const useCustomer = (): UseCustomerReturn => {\n    const { checkoutState, checkoutService } = useCheckout();\n    \n    const {\n        data: {\n            getBillingAddress,\n            getCustomerAccountFields,\n            getCheckout,\n            getCustomer,\n            getCart,\n            getSignInEmail,\n            getConfig,\n            isPaymentDataRequired,\n        },\n        errors: { getSignInError, getSignInEmailError, getCreateCustomerAccountError },\n        statuses: {\n            isContinuingAsGuest,\n            isExecutingPaymentMethodCheckout,\n            isInitializingCustomer,\n            isSigningIn,\n            isSendingSignInEmail,\n            isCreatingCustomerAccount,\n        },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const cart = getCart();\n    const signInEmail = getSignInEmail();\n    const config = getConfig();\n\n    // Return null-like data if essential data is missing\n    if (!checkout || !config || !cart) {\n        return {\n            data: {} as CustomerData,\n            actions: {} as CustomerActions,\n        };\n    }\n\n    const {\n        checkoutSettings: {\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            isSignInEmailEnabled,\n            isAccountCreationEnabled,\n            isExpressPrivacyPolicy,\n            shouldRedirectToStorefrontForAuth,\n            remoteCheckoutProviders: checkoutButtonIds,\n            providerWithCustomCheckout,\n        },\n        shopperConfig: {\n            showNewsletterSignup: canSubscribe,\n            defaultNewsletterSignup: defaultShouldSubscribe,\n        },\n        links: {\n            forgotPasswordLink: forgotPasswordUrl,\n        },\n    } = config;\n\n    const customCheckoutProvider = getProviderWithCustomCheckout(providerWithCustomCheckout);\n\n    // Customer data\n    const data: CustomerData = {\n        // Basic customer data\n        email: billingAddress?.email || customer?.email,\n        firstName: customer?.firstName,\n        hasBillingId: !!billingAddress?.id,\n        isBuyNowCart: cart.source === 'BUY_NOW',\n        \n        // Form data\n        customerAccountFields: getCustomerAccountFields(),\n        canSubscribe,\n        defaultShouldSubscribe,\n        requiresMarketingConsent,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        \n        // Configuration\n        forgotPasswordUrl,\n        privacyPolicyUrl,\n        isSignInEmailEnabled,\n        isAccountCreationEnabled,\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isExpressPrivacyPolicy,\n        shouldRedirectToStorefrontForAuth,\n        \n        // Status flags\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(),\n        isInitializing: isInitializingCustomer(),\n        isSigningIn: isSigningIn(),\n        isSendingSignInEmail: isSendingSignInEmail(),\n        isCreatingAccount: isCreatingCustomerAccount(),\n        \n        // Errors\n        signInError: getSignInError(),\n        signInEmailError: getSignInEmailError(),\n        createAccountError: getCreateCustomerAccountError(),\n        \n        // Other data\n        signInEmail,\n        checkoutButtonIds,\n        providerWithCustomCheckout: customCheckoutProvider,\n        isPaymentDataRequired: isPaymentDataRequired(),\n        shouldRenderStripeForm: customCheckoutProvider === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n    };\n\n    // Customer actions\n    const actions: CustomerActions = {\n        clearError: checkoutService.clearError,\n        createAccount: checkoutService.createCustomerAccount,\n        continueAsGuest: checkoutService.continueAsGuest,\n        sendLoginEmail: checkoutService.sendSignInEmail,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        executePaymentMethodCheckout: checkoutService.executePaymentMethodCheckout,\n        initializeCustomer: checkoutService.initializeCustomer,\n        signIn: checkoutService.signInCustomer,\n    };\n\n    return {\n        data,\n        actions,\n    };\n};\n","import {\n    type CustomerCredentials,\n} from '@bigcommerce/checkout-sdk';\nimport { createBigCommercePaymentsFastlaneCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/bigcommerce-payments';\nimport { createBoltCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/bolt';\nimport { createBraintreeFastlaneCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport { createPayPalCommerceFastlaneCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/paypal-commerce';\nimport { createStripeLinkV2CustomerStrategy, createStripeUPECustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/stripe';\nimport { noop } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { useAnalytics } from '@bigcommerce/checkout/contexts';\n\nimport type CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { isErrorWithType } from '../common/error';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport CreateAccountForm from './CreateAccountForm';\nimport CustomerViewType from './CustomerViewType';\nimport EmailLoginForm, { type EmailLoginFormValues } from './EmailLoginForm';\nimport { type CreateAccountFormValues } from './getCreateCustomerValidationSchema';\nimport { type GuestFormValues } from './GuestForm';\nimport { GuestFormContainer } from './GuestFormContainer';\nimport LoginForm from './LoginForm';\nimport mapCreateAccountFromFormValues from './mapCreateAccountFromFormValues';\nimport { SubscribeSessionStorage } from './SubscribeSessionStorage';\nimport { useCustomer } from './useCustomer';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    step: CheckoutStepStatus;\n    isEmbedded?: boolean;\n    isSubscribed: boolean;\n    isWalletButtonsOnTop: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onAccountCreated?(): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSubscribeToNewsletter(subscribe: boolean): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    onWalletButtonClick?(methodName: string): void;\n}\n\nexport interface CustomerState {\n    isEmailLoginFormOpen: boolean;\n    isReady: boolean;\n    hasRequestedLoginEmail: boolean;\n    draftEmail?: string;\n}\n\nconst Customer: React.FC<CustomerProps> = ({\n    viewType,\n    step,\n    isEmbedded,\n    isSubscribed,\n    isWalletButtonsOnTop,\n    onChangeViewType = noop,\n    onAccountCreated = noop,\n    onContinueAsGuest = noop,\n    onContinueAsGuestError = noop,\n    onReady = noop,\n    onSubscribeToNewsletter,\n    onSignIn = noop,\n    onSignInError = noop,\n    onUnhandledError = noop,\n    onWalletButtonClick = noop,\n}) => {\n    const [state, setState] = useState<CustomerState>({\n        isEmailLoginFormOpen: false,\n        isReady: false,\n        hasRequestedLoginEmail: false,\n        draftEmail: undefined,\n    });\n\n    const { analyticsTracker } = useAnalytics();\n\n    const customerData = useCustomer();\n\n    // Initialize draftEmail on mount\n    useEffect(() => {\n        setState(prevState => ({\n            ...prevState,\n            draftEmail: customerData.data.email,\n        }));\n    }, [customerData.data.email]);\n\n    // componentDidMount equivalent\n    useEffect(() => {\n        const initializeCustomer = async () => {\n            try {\n                if (customerData.data.providerWithCustomCheckout && \n                    customerData.data.providerWithCustomCheckout !== PaymentMethodId.StripeUPE) {\n                    // TODO: Split out into separate chunks so they can be lazy loaded\n                    await customerData.actions.initializeCustomer({\n                        methodId: customerData.data.providerWithCustomCheckout,\n                        integrations: [\n                            createBigCommercePaymentsFastlaneCustomerStrategy,\n                            createBraintreeFastlaneCustomerStrategy,\n                            createPayPalCommerceFastlaneCustomerStrategy,\n                            createBoltCustomerStrategy,\n                            createStripeUPECustomerStrategy,\n                            createStripeLinkV2CustomerStrategy,\n                        ],\n                    });\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n\n            setState(prevState => ({ ...prevState, isReady: true }));\n            onReady();\n        };\n\n        initializeCustomer();\n    }, []);\n\n    // componentWillUnmount equivalent\n    useEffect(() => {\n        return () => {\n            const cleanup = async () => {\n                try {\n                    await customerData.actions.deinitializeCustomer({ \n                        methodId: customerData.data.providerWithCustomCheckout \n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void cleanup();\n        };\n    }, [customerData.actions.deinitializeCustomer, customerData.data.providerWithCustomCheckout, onUnhandledError]);\n\n    // Event handlers converted to useCallback\n    const handleChangeEmail = useCallback((email: string) => {\n        setState(prevState => ({ ...prevState, draftEmail: email }));\n        analyticsTracker.customerEmailEntry(email);\n    }, [analyticsTracker]);\n\n    const handleSignIn = useCallback(async (credentials: CustomerCredentials) => {\n        try {\n            await customerData.actions.signIn(credentials);\n            onSignIn();\n            setState(prevState => ({ ...prevState, draftEmail: undefined }));\n        } catch (error) {\n            onSignInError(error);\n        }\n    }, [customerData.actions.signIn, onSignIn, onSignInError]);\n\n    const handleContinueAsGuest = useCallback(async (formValues: GuestFormValues) => {\n        const email = formValues.email.trim();\n        const updateSubscriptionWhenUnchecked =\n            customerData.data.hasBillingId || customerData.data.defaultShouldSubscribe ? false : undefined;\n\n        try {\n            const { data } = await customerData.actions.continueAsGuest({\n                email,\n                acceptsMarketingNewsletter:\n                    customerData.data.canSubscribe && formValues.shouldSubscribe\n                        ? true\n                        : updateSubscriptionWhenUnchecked,\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe\n                    ? true\n                    : updateSubscriptionWhenUnchecked,\n            });\n\n            onSubscribeToNewsletter(formValues.shouldSubscribe);\n\n            SubscribeSessionStorage.setSubscribeStatus(formValues.shouldSubscribe);\n\n            const customer = data.getCustomer();\n            const paymentProviderCustomer = data.getPaymentProviderCustomer();\n\n            if (customer && customer.shouldEncourageSignIn && customer.isGuest && !paymentProviderCustomer?.stripeLinkAuthenticationState) {\n                return onChangeViewType(CustomerViewType.SuggestedLogin);\n            }\n\n            await executePaymentMethodCheckoutOrContinue();\n\n            setState(prevState => ({ ...prevState, draftEmail: undefined }));\n        } catch (error) {\n            if (\n                isErrorWithType(error) &&\n                (error.type === 'update_subscriptions' ||\n                    error.type === 'payment_method_client_invalid')\n            ) {\n                setState(prevState => ({ ...prevState, draftEmail: undefined }));\n                onContinueAsGuest();\n            }\n\n            if (isErrorWithType(error) && error.type === 'empty_cart') {\n                return onContinueAsGuestError(error);\n            }\n\n            if (isErrorWithType(error) && error.status === 429) {\n                return onChangeViewType(CustomerViewType.EnforcedLogin);\n            }\n\n            if (isErrorWithType(error) && error.status === 403) {\n                return onChangeViewType(CustomerViewType.CancellableEnforcedLogin);\n            }\n\n            onContinueAsGuestError(error);\n        }\n    }, [customerData, onSubscribeToNewsletter, onChangeViewType, onContinueAsGuest, onContinueAsGuestError]);\n\n    const executePaymentMethodCheckoutOrContinue = useCallback(async () => {\n        if (customerData.data.providerWithCustomCheckout && \n            customerData.data.providerWithCustomCheckout !== PaymentMethodId.StripeUPE) {\n            await customerData.actions.executePaymentMethodCheckout({\n                methodId: customerData.data.providerWithCustomCheckout,\n                continueWithCheckoutCallback: onContinueAsGuest,\n                checkoutPaymentMethodExecuted: (payload) => {\n                    analyticsTracker.customerPaymentMethodExecuted(payload);\n                }\n            });\n        } else {\n            onContinueAsGuest();\n        }\n    }, [customerData.actions.executePaymentMethodCheckout, customerData.data.providerWithCustomCheckout, onContinueAsGuest, analyticsTracker]);\n\n    // Additional event handlers\n    const handleShowLogin = useCallback(() => {\n        onChangeViewType(CustomerViewType.Login);\n    }, [onChangeViewType]);\n\n    const handleCreateAccount = useCallback(async (values: CreateAccountFormValues) => {\n        await customerData.actions.createAccount(mapCreateAccountFromFormValues(values));\n        onAccountCreated();\n    }, [customerData.actions.createAccount, onAccountCreated]);\n\n    const handleCancelCreateAccount = useCallback(() => {\n        if (customerData.data.createAccountError) {\n            customerData.actions.clearError(customerData.data.createAccountError);\n        }\n\n        onChangeViewType(CustomerViewType.Login);\n    }, [customerData.actions.clearError, customerData.data.createAccountError, onChangeViewType]);\n\n    const handleCancelSignIn = useCallback(() => {\n        if (customerData.data.signInError) {\n            customerData.actions.clearError(customerData.data.signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    }, [customerData.actions.clearError, customerData.data.signInError, onChangeViewType]);\n\n    const showCreateAccount = useCallback(() => {\n        onChangeViewType(CustomerViewType.CreateAccount);\n    }, [onChangeViewType]);\n\n    const handleSendLoginEmail = useCallback(async (values: EmailLoginFormValues) => {\n        try {\n            await customerData.actions.sendLoginEmail(values);\n        } catch {\n            // Need to write catch block since one test covers the case when `sendLoginEmail` fails\n        } finally {\n            setState(prevState => ({ ...prevState, hasRequestedLoginEmail: true }));\n        }\n    }, [customerData.actions.sendLoginEmail]);\n\n    const handleEmailLoginClicked = useCallback(async () => {\n        try {\n            if (viewType !== CustomerViewType.Login && state.draftEmail) {\n                await handleSendLoginEmail({ email: state.draftEmail });\n            }\n        } finally {\n            setState(prevState => ({ ...prevState, isEmailLoginFormOpen: true }));\n        }\n    }, [viewType, state.draftEmail, handleSendLoginEmail]);\n\n    const closeEmailLoginFormForm = useCallback(() => {\n        setState(prevState => ({\n            ...prevState,\n            isEmailLoginFormOpen: false,\n            hasRequestedLoginEmail: false,\n        }));\n    }, []);\n\n    // Main render logic\n    const shouldRenderGuestForm = viewType === CustomerViewType.Guest;\n    const shouldRenderCreateAccountForm = viewType === CustomerViewType.CreateAccount;\n    const shouldRenderLoginForm = !shouldRenderGuestForm && !shouldRenderCreateAccountForm;\n\n    if (!state.isReady) {\n        return null;\n    }\n\n    return (\n        <>\n            {state.isEmailLoginFormOpen && (\n                <EmailLoginForm\n                    email={state.draftEmail}\n                    emailHasBeenRequested={state.hasRequestedLoginEmail}\n                    isFloatingLabelEnabled={customerData.data.isFloatingLabelEnabled}\n                    isOpen={state.isEmailLoginFormOpen}\n                    isSendingEmail={customerData.data.isSendingSignInEmail}\n                    onRequestClose={closeEmailLoginFormForm}\n                    onSendLoginEmail={handleSendLoginEmail}\n                    sentEmail={customerData.data.signInEmail}\n                    sentEmailError={customerData.data.signInEmailError}\n                />\n            )}\n            \n            {shouldRenderLoginForm && (\n                <LoginForm\n                    continueAsGuestButtonLabelId=\"customer.continue_as_guest_action\"\n                    email={state.draftEmail || customerData.data.email}\n                    isEmbedded={isEmbedded}\n                    isFloatingLabelEnabled={customerData.data.isFloatingLabelEnabled}\n                    onCancel={handleCancelSignIn}\n                    onChangeEmail={handleChangeEmail}\n                    onContinueAsGuest={executePaymentMethodCheckoutOrContinue}\n                    onCreateAccount={showCreateAccount}\n                    onSendLoginEmail={handleEmailLoginClicked}\n                    onSignIn={handleSignIn}\n                    signInError={customerData.data.signInError}\n                    viewType={viewType}\n                />\n            )}\n            \n            {shouldRenderGuestForm && (\n                <GuestFormContainer\n                    email={state.draftEmail || customerData.data.email}\n                    handleChangeEmail={handleChangeEmail}\n                    handleContinueAsGuest={handleContinueAsGuest}\n                    handleShowLogin={handleShowLogin}\n                    isFloatingLabelEnabled={customerData.data.isFloatingLabelEnabled}\n                    isSubscribed={isSubscribed}\n                    isWalletButtonsOnTop={isWalletButtonsOnTop}\n                    onUnhandledError={onUnhandledError}\n                    onWalletButtonClick={onWalletButtonClick}\n                    step={step}\n                />\n            )}\n            \n            {shouldRenderCreateAccountForm && (\n                <CreateAccountForm\n                    createAccountError={customerData.data.createAccountError}\n                    defaultShouldSubscribe={customerData.data.defaultShouldSubscribe}\n                    formFields={customerData.data.customerAccountFields}\n                    isCreatingAccount={customerData.data.isCreatingAccount}\n                    isExecutingPaymentMethodCheckout={customerData.data.isExecutingPaymentMethodCheckout}\n                    isFloatingLabelEnabled={customerData.data.isFloatingLabelEnabled}\n                    onCancel={handleCancelCreateAccount}\n                    onSubmit={handleCreateAccount}\n                    requiresMarketingConsent={customerData.data.requiresMarketingConsent}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Customer;\n","import { type CustomerAccountRequestBody } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { type CreateAccountFormValues } from './getCreateCustomerValidationSchema';\n\nexport default function mapCreateAccountFromFormValues({\n    acceptsMarketingEmails,\n    customFields,\n    ...values\n}: CreateAccountFormValues): CustomerAccountRequestBody {\n    return {\n        ...values,\n        acceptsMarketingEmails: acceptsMarketingEmails && acceptsMarketingEmails.length > 0,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [anchorSiblings[0], anchor.text, anchorSiblings[1]];\n}\n"],"names":["getProviderWithCustomCheckout","methodId","PaypalCommerce","PaypalCommerceCreditCards","PayPalCommerceAcceleratedCheckout","Braintree","BraintreeAcceleratedCheckout","getAppliedStyles","element","properties","pseudoElementSelector","declaration","window","getComputedStyle","reduce","result","propertyName","getPropertyValue","kebabCase","ButtonVariant","ButtonSize","getClassName","props","className","isFullWidth","isLoading","size","variant","Primary","Secondary","Action","Small","Tiny","Large","children","disabled","testId","type","rest","EMAIL_REGEXP","getEmailValidationSchema","language","email","max","matches","translate","required","getTranslateCreateCustomerError","label","min","formFields","passwordRequirements","description","numeric","alpha","minLength","firstName","lastName","password","concat","getCustomFormFieldsValidationSchema","getAcceptsMarketingEmailsDefault","defaultShouldSubscribe","requiresMarketingConsent","withLanguage","handleSubmit","values","onSubmit","noop","mapPropsToValues","customFields","acceptsMarketingEmails","validationSchema","find","requirements","Error","getCreateCustomerValidationSchema","getPasswordRequirements","createAccountError","isCreatingAccount","isExecutingPaymentMethodCheckout","onCancel","isFloatingLabelEnabled","themeV2","createAccountErrorMessage","useMemo","isRequestError","status","splitMessage","message","split","length","TranslatedString","data","trim","id","fields","map","field","name","options","updatedItems","items","item","value","transformFormFieldsData","Form","Fieldset","Alert","A","DynamicFormField","autocomplete","extraClass","key","parentFieldName","custom","undefined","Button","href","onClick","preventDefault","translatedString","parsedString","parseAnchor","memo","onChange","renderInput","useCallback","TextInput","autoComplete","labelContent","FormField","input","onSendLoginEmail","isOpen","isSendingEmail","emailHasBeenRequested","onRequestClose","sentEmailError","sentEmail","submitForm","formEmail","modalHeaderStringId","okButton","footer","LoadingSpinner","sent_email","error","form","expiry","TranslatedHtml","minutes","Math","round","Modal","additionalBodyClassName","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","CheckoutButtonV1Resolver","lazy","withCheckout","checkoutState","checkoutService","hideText","isInitializing","methodIds","checkEmbeddedSupport","deinitialize","initialize","onError","supportedMethodIds","ResolvedCheckoutButton","resolveCheckoutButton","LazyContainer","containerId","onUnhandledError","onWalletButtonClick","isShowingWalletButtonsOnTop","isFastlaneHostWindow","hasOwnProperty","getPaymentMethod","getConfig","providerWithCustomCheckout","checkoutSettings","paymentMethod","shouldRenderFastlaneWatermark","initializationData","isFastlanePrivacySettingEnabled","useEffect","braintreeFastlane","paypalFastlane","FastlaneWatermarkComponent","includeAdditionalInfo","then","render","PrivacyPolicyCheckboxFieldLink","url","CheckboxFormField","PrivacyPolicyFieldset","additionalClassName","PrivacyPolicyAutoConsent","isExpressPrivacyPolicy","getPrivacyPolicyValidationSchema","isRequired","schemaFields","privacyPolicy","oneOf","Input","checked","String","Label","htmlFor","getShouldSubscribeValue","SubscribeSessionStorage","getSubscribeStatus","shouldSubscribe","onContinueAsGuest","privacyPolicyUrl","baseSchema","canSubscribe","checkoutButtons","continueAsGuestButtonLabelId","onChangeEmail","onShowLogin","shouldShowEmailWatermark","setFieldValue","config","renderField","fieldProps","shouldRedirectToStorefrontForAuth","links","checkoutLink","loginLink","legend","Legend","hidden","BasicFormField","location","assign","role","tabIndex","setStatus","valSuccess","step","continueAsAGuestButton","setContinueAsAGuestButton","useState","emailValue","setEmailValue","authentication","setAuthentication","isStripeLoading","setIsStripeLoading","isNewAuth","setIsNewAuth","handleOnClickSubmitButton","setEmailCallback","authenticated","isComplete","handleLoading","mounted","integrations","stripeupe","container","onEmailChange","getStyles","getStripeStyles","gatewayId","getStylesFromElement","parentContainer","document","getElementById","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","buttonText","style","display","GuestFormContainer","isWalletButtonsOnTop","isSubscribed","handleChangeEmail","handleContinueAsGuest","handleShowLogin","isPaymentDataRequired","getCart","statuses","isInitializingCustomer","isContinuingAsGuest","deinitializeCustomer","initializeCustomer","cart","isLoadingGuestForm","remoteCheckoutProviders","checkoutButtonIds","shopperConfig","showNewsletterSignup","customCheckoutProvider","StripeUPE","shouldUseStripeLinkByMinimumAmount","shouldRenderStripeForm","withIconContainer","viewBox","xmlns","d","Toggle","openByDefault","toggle","RedirectToStorefrontLogin","isDisabled","onSignIn","isEmbedded","signInError","onCreateAccount","viewType","CustomerViewType","Login","isSigningIn","isAccountCreationEnabled","shouldShowCreateAccountLink","isSignInEmailEnabled","guestCheckoutEnabled","canCancel","forgotPasswordLink","forgotPasswordUrl","isBuyNowCart","source","changeEmailLink","body","mapErrorMessage","SuggestedLogin","Info","CancellableEnforcedLogin","EnforcedLogin","rel","target","Boolean","onChangeViewType","onAccountCreated","onContinueAsGuestError","onReady","onSubscribeToNewsletter","onSignInError","state","setState","isEmailLoginFormOpen","isReady","hasRequestedLoginEmail","draftEmail","analyticsTracker","useAnalytics","customerData","getBillingAddress","getCustomerAccountFields","getCheckout","getCustomer","getSignInEmail","errors","getSignInError","getSignInEmailError","getCreateCustomerAccountError","isSendingSignInEmail","isCreatingCustomerAccount","billingAddress","checkout","customer","signInEmail","actions","defaultNewsletterSignup","hasBillingId","customerAccountFields","isGuestEnabled","signInEmailError","PaymentMethodId","clearError","createAccount","createCustomerAccount","continueAsGuest","sendLoginEmail","sendSignInEmail","executePaymentMethodCheckout","signIn","signInCustomer","useCustomer","prevState","customerEmailEntry","handleSignIn","credentials","formValues","updateSubscriptionWhenUnchecked","acceptsMarketingNewsletter","acceptsAbandonedCartEmails","setSubscribeStatus","paymentProviderCustomer","getPaymentProviderCustomer","shouldEncourageSignIn","isGuest","stripeLinkAuthenticationState","executePaymentMethodCheckoutOrContinue","isErrorWithType","continueWithCheckoutCallback","checkoutPaymentMethodExecuted","payload","customerPaymentMethodExecuted","handleCreateAccount","mapCustomFormFieldsFromFormValues","mapCreateAccountFromFormValues","handleCancelCreateAccount","handleCancelSignIn","Guest","showCreateAccount","CreateAccount","handleSendLoginEmail","handleEmailLoginClicked","closeEmailLoginFormForm","shouldRenderGuestForm","shouldRenderCreateAccountForm","shouldRenderLoginForm","text","div","createElement","innerHTML","anchor","querySelector","anchorSiblings","outerHTML"],"sourceRoot":""}