{"version":3,"file":"amazon-pay-v2-button-a5aa29fb.js","mappings":"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","sources":["webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx"],"sourcesContent":["import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import {\n    AccountInstrument,\n    CardInstrument,\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n"],"names":["checkoutService","checkoutState","paymentForm","method","initializationData","paymentDescriptor","paymentToken","rest","initializeAmazonPayV2Payment","useCallback","options","initializePayment","amazonpay","editButtonId","reload","window","location","hidePaymentSubmitButton","disableSubmit","setFieldValue","setSubmit","setValidationSchema","data","getCheckout","isPaymentDataRequired","statuses","isLoadingInstruments","checkout","customer","getCustomer","isInstrumentFeatureAvailable","isGuest","Boolean","config","isVaultingEnabled","instruments","getInstruments","buttonId","containerId","deinitializePayment","hideWidget","isInstrumentCardCodeRequired","isInstrumentCardNumberRequired","isSignInRequired","isSignedIn","some","payments","providerId","id","loadInstruments","onSignOut","shouldShow","shouldShowDescriptor","shouldShowEditButton","signOut","signOutCustomer","HostedWidgetPaymentComponent","Component","state","isAddingNewCard","handleDeleteInstrument","this","props","selectedInstrumentId","length","setState","undefined","getDefaultInstrumentId","handleUseNewCard","noop","gatewayId","gateway","methodId","handleSelectInstrument","componentDidMount","isInstrumentFeatureAvailableProp","onUnhandledError","getValidationSchema","initializeMethod","error","componentDidUpdate","prevProps","prevState","componentWillUnmount","deinitializeCustomer","render","isInitializing","isAccountInstrument","shouldHideInstrumentExpiryDate","selectedInstrument","find","instrument","bigpayToken","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","isLoading","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","onDeleteInstrument","shouldHideExpiryDate","validateInstrument","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","instrumentId","renderEditButtonIfAvailable","hideVerificationFields","isInstrumentCardNumberRequiredProp","shouldShowNumberField","hideContentWhenSignedOut","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","style","display","tabIndex","storedCardValidationSchema","getSelectedInstrument","translatedString","onClick","initializeCustomer","signInCustomer","Promise","resolve","defaultInstrument"],"sourceRoot":""}