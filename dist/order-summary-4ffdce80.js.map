{"version":3,"file":"order-summary-4ffdce80.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/order/OrderSummaryHeader.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/CreateCertificate.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/services/LambdaService.ts","webpack://checkout/./packages/core/src/app/order/OrderSummary.tsx","webpack://checkout/./packages/core/src/app/avalara-certificates/taxCalculation.ts"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst OrderSummaryHeader: FunctionComponent = ({ children }) => (\n    <header className=\"cart-header\">\n        <h3 className=\"cart-title optimizedCheckout-headingSecondary\">\n            <TranslatedString id=\"cart.cart_heading\" />\n        </h3>\n        {children}\n    </header>\n);\n\nexport default OrderSummaryHeader;\n","import React from 'react';\nimport { withCheckout } from '../checkout';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n//import CertificateSelect from './CertificateSelect';\n\ninterface Customer {\n    id: number;\n    email: string;\n    isGuest: boolean;\n}\n\ninterface CreateCertificateProps {\n    customer: Customer;\n}\n\nconst CreateCertificate: React.FC<CreateCertificateProps> = ({ customer }) => {\n    //const [selectedCertificate, setSelectedCertificate] = useState<string>('');\n\n    /* const handleSelect = (certificate: string) => {\n        setSelectedCertificate(certificate);\n    }; */\n\n    return !customer.isGuest ? (\n        <>\n            <a href={`/certificates`} target=\"_blank\" rel=\"noopener noreferrer\">\n                Use Tax/ Exempt Certificate\n            </a>\n            {/* <CertificateSelect onSelect={handleSelect} />\n            {selectedCertificate && <p>Selected Certificate ID: {selectedCertificate}</p>} */}\n        </>\n    ) : null;\n};\n\ninterface WithCheckoutCustomerInfoProps {\n    email: string;\n    customer: Customer;\n}\n\nfunction mapToWithCheckoutCustomerInfoProps({\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutCustomerInfoProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n\n    if (!billingAddress || !checkout || !customer) {\n        return null;\n    }\n\n    return {\n        email: billingAddress.email || customer.email,\n        customer,\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerInfoProps)(CreateCertificate);\n","import axios from 'axios';\nconst API_URL = 'https://yx1041xohb.execute-api.us-east-2.amazonaws.com/Prod/';\n\nexport const fetchToken = async (): Promise<string | null> => {\n    try {\n        const response = await fetch('/customer/current.jwt?app_client_id=bzhkzdt0f7vrrg92o4iym8rxvd872qj', {\n            method: 'GET',\n            headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n        });\n\n        const data = await response.json();\n        return data.token;\n    } catch (error) {\n        console.error('Error fetching token:', error);\n        return null;\n    }\n};\nexport const getHeaders = (token: string) => {\n    return {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'X-Current-Customer': token,\n    };\n};\n\n// export const fetchCertificates = async () => {\n//     try {\n//         const token = await fetchToken();\n//         if (!token) {\n//             throw new Error('Token not available');\n//         }\n//         const headers = getHeaders(token);\n//         const response = await axios.get(`${API_URL}query`, { headers });\n//         return response.data;\n//     } catch (error) {\n//         console.error('Error fetching certificates:', error);\n//         return [];\n//     }\n// };\nexport const validateTaxesWithAvalara = async (taxRequest: any) => {\n    try {\n        const token = await fetchToken();\n        if (!token) {\n            throw new Error('Token not available');\n        }\n        const headers = getHeaders(token);\n        const response = await axios.post(`${API_URL}createTransaction`, taxRequest, { headers });\n        return response.data;\n    } catch (error) {\n        console.error('Error validating with avalara:', error);\n        throw error;\n    }\n};\n","import {\n    ExtensionRegion,\n    LineItemMap,\n    ShopperCurrency,\n    StoreCurrency,\n    createCheckoutService,\n    CheckoutSelectors\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode, useMemo,useEffect } from 'react';\nimport { Tax as CheckoutSdkTax } from '@bigcommerce/checkout-sdk';\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport OrderSummaryHeader from './OrderSummaryHeader';\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummaryPrice from './OrderSummaryPrice';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\nimport removeBundledItems from './removeBundledItems';\nimport { CreateCertificate } from '../avalara-certificates';\nimport { calculateTaxes } from '../avalara-certificates/taxCalculation';\n\nexport interface OrderSummaryProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrency;\n    additionalLineItems?: ReactNode;\n}\nexport interface Tax extends CheckoutSdkTax {\n    name: string;\n    amount: number;\n}\n\nconst OrderSummary: FunctionComponent<OrderSummaryProps & OrderSummarySubtotalsProps> = ({\n    isTaxIncluded,\n    taxes,\n    storeCurrency,\n    shopperCurrency,\n    headerLink,\n    additionalLineItems,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => {\n    //const [calculatedTaxes, setCalculatedTaxes] = useState<Tax[]>([]);\n    \n    useEffect(() => {\n        const checkoutService = createCheckoutService();\n\n        checkoutService.loadCheckout()\n            .then((state: CheckoutSelectors) => {\n                const shippingAddress = state.data.getShippingAddress();\n                const cart = state.data.getCart();\n                const customerId = state.data.getCustomer()?.id || '';\n                const shippingCost = state.data.getConsignments()?.reduce((total, consignment) => {\n                    return total + (consignment.selectedShippingOption?.cost || 0);\n                }, 0);        \n                if (shippingAddress && cart && customerId) {\n                    calculateTaxes(cart, shippingAddress, lineItems, customerId, shippingCost)\n                        .then(taxCalculated => {\n                            console.log(taxCalculated);\n                            //setCalculatedTaxes(taxCalculated);\n                        })\n                        .catch(error => {\n                            console.error('Error al calcular impuestos:', error);\n                        });\n                }\n            })\n            .catch((error: unknown) => {\n                if (error instanceof Error) {\n                    console.error('Error al cargar el checkout:', error.message);\n                } else {\n                    console.error('Error desconocido al cargar el checkout');\n                }\n            });\n    }, [lineItems]);\n    const nonBundledLineItems = useMemo(() => removeBundledItems(lineItems), [lineItems]);\n    const displayInclusiveTax = isTaxIncluded && taxes && taxes.length > 0;\n    return (\n        <article className=\"cart optimizedCheckout-orderSummary\" data-test=\"cart\">\n            <OrderSummaryHeader>{headerLink}</OrderSummaryHeader>\n\n            <OrderSummarySection>\n                <OrderSummaryItems displayLineItemsCount items={nonBundledLineItems} />\n            </OrderSummarySection>\n\n            <Extension region={ExtensionRegion.SummaryLastItemAfter} />\n\n            <OrderSummarySection>\n                <OrderSummarySubtotals isTaxIncluded={isTaxIncluded} taxes={taxes} {...orderSummarySubtotalsProps} />\n                {additionalLineItems}\n            </OrderSummarySection>\n            <OrderSummarySection>\n                <CreateCertificate/>\n            </OrderSummarySection>\n\n            <OrderSummarySection>\n                <OrderSummaryTotal\n                    orderAmount={total}\n                    shopperCurrencyCode={shopperCurrency.code}\n                    storeCurrencyCode={storeCurrency.code}\n                />\n            </OrderSummarySection>\n\n            {displayInclusiveTax && <OrderSummarySection>\n                <h5\n                    className=\"cart-taxItem cart-taxItem--subtotal optimizedCheckout-contentPrimary\"\n                    data-test=\"tax-text\"\n                >\n                    <TranslatedString\n                        id=\"tax.inclusive_label\"\n                    />\n                </h5>\n                {(taxes || []).map((tax, index) => (\n                    <OrderSummaryPrice\n                        amount={tax.amount}\n                        key={index}\n                        label={tax.name}\n                        testId=\"cart-taxes\"\n                    />\n                ))}\n            </OrderSummarySection>}\n        </article>\n    );\n};\n\nexport default OrderSummary;\n","\nimport { validateTaxesWithAvalara } from './services/LambdaService';\ninterface TaxDetail {\n    taxName: string;\n    taxCalculated: number;\n}\n\nexport const calculateTaxes = async (cart: any, shippingAddress: any, lineItems: any, customerId: any, shippingCost:any) => {\n    const date = new Date().toISOString().split('T')[0];\n    const allItems = [\n        ...lineItems.physicalItems,\n        ...lineItems.digitalItems,\n        ...lineItems.customItems,\n        ...lineItems.giftCertificates,\n    ];\n\n    // Crear las líneas de productos\n    const itemsWithShipping = allItems.map((item: any, index: number) => ({\n        number: `${index + 1}`, // Número de línea único\n        quantity: item.quantity || 1, // Cantidad de producto, por defecto 1\n        amount: item.listPrice || item.amount || 0, // Precio del producto\n        taxCode: 'P0000000', // Código de impuestos genérico para productos\n        itemCode: item.sku || item.itemCode || `item-${index + 1}`, // SKU o código del artículo\n        description: item.name || 'Product', // Descripción del artículo\n    }));\n    if (shippingCost > 0) {\n        itemsWithShipping.push({\n            number: `${itemsWithShipping.length + 1}`, // Número de línea único\n            quantity: 1,\n            amount: shippingCost, // Costo de envío\n            taxCode: 'FR00000', // Código de impuestos específico para el envío\n            itemCode: 'shipping', // Código para identificar el costo de envío\n            description: 'Shipping Cost', // Descripción del envío\n        });\n    }\n\n    // Construir el JSON que se enviará a Avalara\n    const taxRequest = {\n        id: cart.id, // Usamos el cart.id como el código\n        code: cart.id, // Usamos el cart.id como el código de la transacción\n        adjustmentReason: 'Other', // Ajuste genérico, puede cambiarse según sea necesario\n        adjustmentDescription: 'Transaction for tax calculation',\n        createTransactionModel: {\n            lines: itemsWithShipping.map((item: any, index: number) => ({\n                number: `${index + 1}`, // Número de línea único\n                quantity: item.quantity,\n                amount: item.amount, // Precio del artículo o costo de envío\n                taxCode: item.taxCode, // Código de impuestos para el artículo o envío\n                itemCode: item.itemCode, // Código del producto o envío\n                description: item.description, // Descripción del producto o envío\n            })),\n            type: 'SalesInvoice', // Tipo de transacción\n            date: date, // Fecha de la compra en formato YYYY-MM-DD\n            customerCode: customerId, // Usamos el customerId como customerCode\n            purchaseOrderNo: `${date}-${cart.id}`, // Número de la orden de compra\n            addresses: {\n                singleLocation: {\n                    line1: shippingAddress.address1, // Dirección de envío\n                    line2: shippingAddress.address2,\n                    city: shippingAddress.city,\n                    region: shippingAddress.region, // Estado o región\n                    country: shippingAddress.country,\n                    postalCode: shippingAddress.postalCode,\n                },\n            },\n            commit: false, // No se comitea la transacción, solo se calcula\n            currencyCode: 'USD', // Moneda\n            description: 'Order transaction', // Descripción general de la transacción\n        },\n    };\n\n    try {\n        const response = await validateTaxesWithAvalara(taxRequest);\n        const { totalTax, summary } = response;\n        if (totalTax > 0) {\n            const taxes = summary\n                .filter((tax: TaxDetail) => tax.taxCalculated > 0)\n                .map((tax: TaxDetail) => ({\n                    name: tax.taxName,\n                    amount: tax.taxCalculated,\n                }));\n            return taxes;\n\n        } else {\n            return  [];\n        }\n    } catch (error) {\n        console.error('Error al calcular los impuestos:', error);\n        throw error;\n    }\n};"],"names":["children","className","TranslatedString","id","getBillingAddress","getCheckout","getCustomer","billingAddress","checkout","customer","email","isGuest","href","target","rel","validateTaxesWithAvalara","taxRequest","fetch","method","headers","Accept","json","token","console","error","Error","getHeaders","axios","post","data","isTaxIncluded","taxes","storeCurrency","shopperCurrency","headerLink","additionalLineItems","lineItems","total","orderSummarySubtotalsProps","useEffect","createCheckoutService","loadCheckout","then","state","shippingAddress","getShippingAddress","cart","getCart","customerId","shippingCost","getConsignments","reduce","consignment","selectedShippingOption","cost","date","Date","toISOString","split","allItems","physicalItems","digitalItems","customItems","giftCertificates","itemsWithShipping","map","item","index","number","quantity","amount","listPrice","taxCode","itemCode","sku","description","name","push","length","code","adjustmentReason","adjustmentDescription","createTransactionModel","lines","type","customerCode","purchaseOrderNo","addresses","singleLocation","line1","address1","line2","address2","city","region","country","postalCode","commit","currencyCode","response","totalTax","summary","filter","tax","taxCalculated","taxName","calculateTaxes","log","catch","message","nonBundledLineItems","useMemo","removeBundledItems","displayInclusiveTax","OrderSummarySection","OrderSummaryItems","displayLineItemsCount","items","Extension","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","storeCurrencyCode","OrderSummaryPrice","key","label","testId"],"sourceRoot":""}