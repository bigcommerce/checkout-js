{"version":3,"file":"billing-16b1389d.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx"],"sourcesContent":["import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { RefObject, useRef, useState } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { AddressFormSkeleton, LoadingOverlay, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressForm,\n    AddressFormValues,\n    AddressSelect,\n    AddressType,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isValidCustomerAddress,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    methodId?: string;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\nconst BillingForm = ({\n    googleMapsApiKey,\n    billingAddress,\n    countriesWithAutocomplete,\n    customer: { addresses, isGuest },\n    getFields,\n    countries,\n    isUpdating,\n    setFieldValue,\n    shouldShowOrderComments,\n    values,\n    methodId,\n    isFloatingLabelEnabled,\n    updateAddress,\n    onUnhandledError,\n}: BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>) => {\n    const [isResettingAddress, setIsResettingAddress] = useState(false);\n    const addressFormRef: RefObject<HTMLFieldSetElement> = useRef(null);\n    const { isPayPalFastlaneEnabled, paypalFastlaneAddresses } = usePayPalFastlaneAddress();\n\n    const { themeV2 } = useThemeContext();\n    const shouldRenderStaticAddress = methodId === 'amazonpay';\n    const allFormFields = getFields(values.countryCode);\n    const customFormFields = allFormFields.filter(({ custom }) => custom);\n    const hasCustomFormFields = customFormFields.length > 0;\n    const editableFormFields =\n        shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n    const billingAddresses = isGuest && isPayPalFastlaneEnabled ? paypalFastlaneAddresses : addresses;\n    const hasAddresses = billingAddresses?.length > 0;\n    const hasValidCustomerAddress =\n        billingAddress &&\n        isValidCustomerAddress(\n            billingAddress,\n            billingAddresses,\n            getFields(billingAddress.countryCode),\n        );\n\n    const handleSelectAddress = async (address: Partial<Address>) => {\n        setIsResettingAddress(true);\n\n        try {\n            await updateAddress(address);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        } finally {\n            setIsResettingAddress(false);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        handleSelectAddress({});\n    };\n\n    return (\n        <Form autoComplete=\"on\">\n            {shouldRenderStaticAddress && billingAddress && (\n                <div className=\"form-fieldset\">\n                    <StaticBillingAddress address={billingAddress} />\n                </div>\n            )}\n\n            <Fieldset id=\"checkoutBillingAddress\" ref={addressFormRef}>\n                {hasAddresses && !shouldRenderStaticAddress && (\n                    <Fieldset id=\"billingAddresses\">\n                        <LoadingOverlay isLoading={isResettingAddress}>\n                            <AddressSelect\n                                addresses={billingAddresses}\n                                onSelectAddress={handleSelectAddress}\n                                onUseNewAddress={handleUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? billingAddress : undefined\n                                }\n                                type={AddressType.Billing}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <AddressFormSkeleton isLoading={isResettingAddress}>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={values.countryCode}\n                            formFields={editableFormFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            setFieldValue={setFieldValue}\n                            shouldShowSaveAddress={!isGuest}\n                        />\n                    </AddressFormSkeleton>\n                )}\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    className={themeV2 ? 'body-bold' : ''}\n                    disabled={isUpdating || isResettingAddress}\n                    id=\"checkout-billing-continue\"\n                    isLoading={isUpdating || isResettingAddress}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\n            ...mapAddressToFormValues(\n                getFields(billingAddress && billingAddress.countryCode),\n                billingAddress,\n            ),\n            orderComment: customerMessage,\n        }),\n        isInitialValid: ({ billingAddress, getFields, language }) =>\n            !!billingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(billingAddress.countryCode),\n            }).isValidSync(billingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: BillingFormProps & WithLanguageProps) =>\n            methodId === 'amazonpay'\n                ? lazy<Partial<AddressFormValues>>((values) =>\n                      getCustomFormFieldsValidationSchema({\n                          translate: getTranslateAddressError(language),\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  )\n                : lazy<Partial<AddressFormValues>>((values) =>\n                      getAddressFormFieldsValidationSchema({\n                          language,\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  ),\n        enableReinitialize: true,\n    })(BillingForm),\n);\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.includes(preselectedPayment.providerId)\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import {\n    Address,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport { EMPTY_ARRAY, isExperimentEnabled, isFloatingLabelEnabled } from '../common/utility';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\nimport getBillingMethodId from './getBillingMethodId';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    billingAddress?: Address;\n    methodId?: string;\n    isFloatingLabelEnabled?: boolean;\n    themeV2?: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, onReady = noop, onUnhandledError } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const { updateAddress, isInitializing, themeV2, ...props } = this.props;\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <div className=\"form-legend-container\">\n                        <Legend testId=\"billing-address-heading\" themeV2={themeV2}>\n                            <TranslatedString id=\"billing.billing_address_heading\" />\n                        </Legend>\n                    </div>\n                    <BillingForm\n                        {...props}\n                        onSubmit={this.handleSubmit}\n                        updateAddress={updateAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const { enableOrderComments, googleMapsApiKey } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        methodId: getBillingMethodId(checkout),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        themeV2: isExperimentEnabled(config.checkoutSettings, 'CHECKOUT-7962.update_font_style_on_checkout_page')\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"names":["withLanguage","handleSubmit","values","props","onSubmit","mapPropsToValues","getFields","customerMessage","billingAddress","mapAddressToFormValues","countryCode","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","formFields","isValidSync","validationSchema","methodId","getCustomFormFieldsValidationSchema","translate","enableReinitialize","googleMapsApiKey","countriesWithAutocomplete","customer","addresses","isGuest","countries","isUpdating","setFieldValue","shouldShowOrderComments","isFloatingLabelEnabled","updateAddress","onUnhandledError","isResettingAddress","setIsResettingAddress","useState","addressFormRef","useRef","isPayPalFastlaneEnabled","paypalFastlaneAddresses","usePayPalFastlaneAddress","themeV2","shouldRenderStaticAddress","allFormFields","customFormFields","filter","custom","hasCustomFormFields","length","editableFormFields","billingAddresses","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","handleSelectAddress","address","error","Error","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","A","onSelectAddress","onUseNewAddress","selectedAddress","undefined","type","AddressType","Billing","AddressFormSkeleton","AddressForm","shouldShowSaveAddress","OrderComments","Button","disabled","variant","Primary","TranslatedString","getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","includes","providerId","Component","addressValues","updateCheckout","navigateNextStep","this","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","noop","render","isInitializing","Legend","testId","withCheckout","checkoutService","checkoutState","data","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","statuses","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","enableOrderComments","checkoutSettings","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress","isExperimentEnabled"],"sourceRoot":""}