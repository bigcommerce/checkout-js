{"version":3,"file":"hosted-payment-method-c7470624.js","mappings":"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","sources":["webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/storefront-payment-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/zip-integration/src/zip-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/zip-integration/src/create-zip-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/is-additional-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/create-external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-execute-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/humm-integration/src/humm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/humm-integration/src/create-humm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/./packages/offsite-integration/src/offsite-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/offsite-integration/src/create-offsite-payment-strategy.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class StorefrontPaymentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    async saveExternalId(methodId: string, token: string): Promise<void> {\n        const url = `/api/storefront/payment/${methodId}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                externalId: token,\n                provider: methodId,\n            },\n        };\n\n        await this._requestSender.post<void>(url, options);\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import {\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StorefrontPaymentRequestSender,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n    ) {}\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const { getPaymentMethodOrThrow } = await this.paymentIntegrationService.loadPaymentMethod(\n            methodId,\n            options,\n        );\n\n        const {\n            clientToken,\n            initializationData,\n        }: { clientToken?: string; initializationData?: { redirectUrl?: string } } =\n            getPaymentMethodOrThrow(methodId);\n        const redirectUrl = initializationData?.redirectUrl;\n\n        if (!clientToken || !redirectUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { id: nonce } = JSON.parse(clientToken);\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        await this.paymentIntegrationService.initializePayment(methodId, { useStoreCredit });\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this._prepareForReferredRegistration(methodId, nonce);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce },\n            });\n        } catch (error) {\n            if (isRequestError(error) && error.body.status === 'additional_action_required') {\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _prepareForReferredRegistration(methodId: string, externalId: string): Promise<void> {\n        return this.storefrontPaymentRequestSender.saveExternalId(methodId, externalId);\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    StorefrontPaymentRequestSender,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ZipPaymentStrategy from './zip-payment-strategy';\n\nconst createZipPaymentStrategy: PaymentStrategyFactory<ZipPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n    const storefrontPaymentRequestSender = new StorefrontPaymentRequestSender(requestSender);\n\n    return new ZipPaymentStrategy(paymentIntegrationService, storefrontPaymentRequestSender);\n};\n\nexport default toResolvableModule(createZipPaymentStrategy, [{ id: 'zip' }, { id: 'quadpay' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { createZipPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/zip';\nimport { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\n\nimport { HostedPaymentComponent } from './components';\n\nconst HostedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    onUnhandledError,\n    language,\n    paymentForm,\n}) => {\n    const initializeHostedPaymentMethod = async (options: PaymentInitializeOptions) => {\n        return checkoutService.initializePayment({\n            ...options,\n            integrations: [createZipPaymentStrategy],\n        });\n    };\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeHostedPaymentMethod}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedPaymentMethod,\n    [{ gateway: 'afterpay' }, { id: 'quadpay' }, { id: 'sezzle' }, { id: 'zip' }],\n);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    isRequestError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, isAdditionalActionRequired } from './is-additional-action';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _formPoster: FormPoster,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !isAdditionalActionRequired(error.body) ||\n                !this._isAdditionalActionRequired(error.body)\n            ) {\n                return Promise.reject(error);\n            }\n\n            const {\n                body: {\n                    additional_action_required: {\n                        data: { redirect_url },\n                    },\n                },\n            } = error;\n\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return new Promise(() => {\n                this.redirectUrl(redirect_url);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }) as any;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected redirectUrl(redirect_url: string): void {\n        return this._formPoster.postForm(redirect_url, {});\n    }\n\n    private _isAdditionalActionRequired(body: AdditionalActionRequired): boolean {\n        const { additional_action_required, status } = body;\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'offsite_redirect'\n        );\n    }\n}\n","export interface AdditionalActionRequired {\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n        type: string;\n    };\n    status: string;\n}\n\nexport function isAdditionalActionRequired(value: unknown): value is AdditionalActionRequired {\n    return typeof value === 'object' && value !== null && 'additional_action_required' in value;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ExternalPaymentStrategy from './external-payment-strategy';\n\nconst createExternalPaymentStrategy: PaymentStrategyFactory<ExternalPaymentStrategy> = (\n    paymentIntegrationService,\n) => new ExternalPaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createExternalPaymentStrategy, [{ id: 'laybuy' }]);\n","import StandardError from './standard-error';\n\nconst defaultMessage =\n    'Payment cannot be processed for this order, please select another payment method';\n\nexport default class PaymentExecuteError extends StandardError {\n    type = 'custom_provider_execute_error';\n    subtype: string;\n\n    constructor(subtype: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.name = name;\n        this.subtype = subtype;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentExecuteError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { HummInitializationData, OffsiteRedirectResponse } from './humm';\n\nexport default class HummPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(payment.methodId, options);\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<HummInitializationData>(payment.methodId);\n\n        if (!paymentMethod.initializationData?.processable) {\n            throw new PaymentExecuteError(\n                'payment.humm_not_processable_error',\n                'hummNotProcessableError',\n            );\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n            });\n        } catch (error) {\n            if (this.isOffsiteRedirectResponse(error)) {\n                return this.handleOffsiteRedirectResponse(error);\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private handleOffsiteRedirectResponse(response: OffsiteRedirectResponse): Promise<void> {\n        const url = response.body.additional_action_required.data.redirect_url;\n        const data = response.body.provider_data;\n\n        return new Promise((resolve) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.formPoster.postForm(url, JSON.parse(data), resolve);\n        });\n    }\n\n    private isOffsiteRedirectResponse(response: unknown): response is OffsiteRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<OffsiteRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<OffsiteRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required &&\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            partialBody.additional_action_required.type === 'offsite_redirect' &&\n            typeof partialBody.provider_data === 'string'\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HummPaymentStrategy from './humm-payment-strategy';\n\nconst createHummPaymentStrategy: PaymentStrategyFactory<HummPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new HummPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createHummPaymentStrategy, [{ id: 'humm' }]);\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","// The require scope\nvar __webpack_require__ = {};\n\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId =\n            (paymentData && isVaultedInstrument(paymentData) && paymentData.instrumentId) ||\n            undefined;\n        const shouldSaveInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSaveInstrument) ||\n            undefined;\n        const shouldSetAsDefaultInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSetAsDefaultInstrument) ||\n            undefined;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        await this._paymentIntegrationService.submitOrder(orderPayload, options);\n        await this._paymentIntegrationService.initializeOffsitePayment({\n            methodId,\n            gatewayId,\n            instrumentId,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const order = state.getOrder();\n        const status = state.getPaymentStatus();\n\n        if (\n            order &&\n            (status === PaymentStatusTypes.ACKNOWLEDGE || status === PaymentStatusTypes.FINALIZE)\n        ) {\n            await this._paymentIntegrationService.finalizeOrder(options);\n\n            return;\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.gatewayId === 'barclaycard';\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OffsitePaymentStrategy from './offsite-payment-strategy';\n\nconst createOffsitePaymentStrategy: PaymentStrategyFactory<OffsitePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OffsitePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOffsitePaymentStrategy, [{ type: 'PAYMENT_TYPE_HOSTED' }]);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { type AccountInstrument, type AchInstrument, type BankInstrument, type PayPalInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, PureComponent, type ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument | AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { type AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, type ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createExternalPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/external';\nimport { createHummPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/humm';\nimport { createOffsitePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/offsite';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\n\nimport { type MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { type WithPaymentProps } from '../withPayment';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                integrations: [\n                    createHummPaymentStrategy,\n                    createExternalPaymentStrategy,\n                    createOffsitePaymentStrategy,\n                ],\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable:\n                !isPaymentDataSubmitted(method.id, method.gateway) &&\n                isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n};\n\nexport default connectFormik(\n    withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))),\n);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["ContentType","Json","JsonV1","SDK_VERSION_HEADERS","MissingDataErrorType","StorefrontPaymentRequestSender","constructor","_requestSender","saveExternalId","methodId","token","url","options","headers","Accept","body","externalId","provider","this","post","StandardError","Error","message","prototype","super","name","type","Object","setPrototypeOf","__proto__","captureStackTrace","stack","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","subtype","OrderFinalizationNotRequiredError","ZipPaymentStrategy","paymentIntegrationService","storefrontPaymentRequestSender","initialize","Promise","resolve","execute","payload","payment","order","getPaymentMethodOrThrow","loadPaymentMethod","clientToken","initializationData","redirectUrl","id","nonce","JSON","parse","isStoreCreditApplied","useStoreCredit","getState","getCheckoutOrThrow","applyStoreCredit","initializePayment","submitOrder","_prepareForReferredRegistration","submitPayment","paymentData","error","status","window","location","replace","finalize","reject","deinitialize","module","getHost","requestSender","createRequestSender","host","resolveIds","assign","toResolvableComponent","checkoutService","checkoutState","method","onUnhandledError","language","paymentForm","HostedPaymentComponent","deinitializePayment","integrations","gateway","props","description","isInitializing","noop","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","ExternalPaymentStrategy","_formPoster","_paymentIntegrationService","value","_isAdditionalActionRequired","additional_action_required","redirect_url","postForm","createFormPoster","PaymentExecuteError","HummPaymentStrategy","formPoster","processable","isOffsiteRedirectResponse","handleOffsiteRedirectResponse","response","provider_data","partialResponse","partialBody","PaymentStatusTypes","__webpack_require__","isHostedInstrumentLike","instrument","shouldSaveInstrument","shouldSetAsDefaultInstrument","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","ACKNOWLEDGE","FINALIZE","INITIALIZE","e","OffsitePaymentStrategy","orderPayload","_shouldSubmitFullPayload","Boolean","initializeOffsitePayment","state","getOrder","getPaymentStatus","finalizeOrder","withIconContainer","height","viewBox","width","xmlns","clipRule","fill","fillRule","AccountInstrumentSelect","PureComponent","componentDidMount","selectedInstrumentId","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","componentWillUnmount","field","render","otherFieldProps","DropdownTrigger","dropdown","AccountInstrumentMenu","AccountInstrumentSelectButton","testId","form","setFieldValue","map","AccountInstrumentOption","onClick","AccountInstrumentUseNewButton","isBankAccountInstrument","BankInstrumentMenuItem","AccountInstrumentMenuItem","handleClick","IconPaypal","additionalClassName","size","Medium","TranslatedString","accountNumber","issuer","memo","renderInput","renderModal","ManageInstrumentsModal","Fieldset","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","TranslatedHtml","HostedPaymentMethod","Component","setState","LoadingOverlay","StoreInstrumentFieldset","connectFormik","withLanguage","withPayment","withCheckout","context","checkoutSettings","isCardVaultingEnabled","isVaultingEnabled","isGuest"],"sourceRoot":""}