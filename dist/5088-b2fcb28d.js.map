{"version":3,"file":"5088-b2fcb28d.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorAU.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorCA.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/address/SingleLineStaticAddress.tsx","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts","webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts"],"sourcesContent":["import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return ADDRESS_FIELD_IDS[name] || name;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\n\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(googlePlace: google.maps.places.PlaceResult) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name ?? '';\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        if (this.getCountry() === 'NZ') {\n            return this._get('sublocality', 'short_name');\n        }\n\n        return this._get('subpremise', 'short_name');\n    }\n\n    getCity(): string {\n        return (\n            this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name')\n        );\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\n    ): string {\n        const element =\n            this._address && this._address.find((field) => field.types.includes(type));\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorAU extends AddressSelector {\n    getStreet(): string {\n        const subpremise = this._get('subpremise', 'short_name');\n        const subpremisePart = subpremise ? `${subpremise}/` : '';\n\n        return `${subpremisePart}${this._get('street_number', 'long_name')} ${this._get('route', 'long_name')}`;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorCA extends AddressSelector {\n    getCity(): string {\n        return this._get('sublocality_level_1', 'long_name') || this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return '';\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n\n    getPostCode(): string {\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorAU from './AddressSelectorAU';\nimport AddressSelectorCA from './AddressSelectorCA';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const countryComponent = autocompleteData.address_components?.find(\n            component => component.types.includes('country'));\n        const countryShortName = countryComponent?.short_name || '';\n\n        switch (countryShortName) {\n            case 'GB':\n                return new AddressSelectorUK(autocompleteData);\n\n            case 'CA':\n                return new AddressSelectorCA(autocompleteData);\n            \n            case 'AU':\n                return new AddressSelectorAU(autocompleteData);\n\n            default:\n                return new AddressSelector(autocompleteData);\n        }\n    }\n}\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children?: ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return <div className=\"popover\">{children}</div>;\n};\n\nexport default Popover;\n","import React, { FunctionComponent, memo } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n     \n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\n            {items.map((item, index) => (\n                <li\n                    className={getItemClassName(highlightedIndex, index)}\n                    data-test={testId && `${testId}-item`}\n                     \n                    {...getItemProps({\n                        key: item.id,\n                        index,\n                        item,\n                    })}\n                    key={index}\n                >\n                    {item.content}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { includes, isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { ThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Label } from '../form';\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    defaultHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem | null): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    static contextType = ThemeContext;\n    declare context: React.ContextType<typeof ThemeContext>;\n\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            defaultHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        if (!this.context) {\n            throw Error('Need to wrap in style context');\n        }\n\n        const { themeV2 } = this.context;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={defaultHighlightedIndex}\n                initialHighlightedIndex={initialHighlightedIndex}\n                initialInputValue={initialValue}\n                itemToString={this.itemToString}\n                labelId={\n                    inputProps && inputProps['aria-labelledby']\n                        ? inputProps['aria-labelledby']\n                        : null\n                }\n                onChange={onSelect}\n                onStateChange={this.handleStateChange}\n                stateReducer={this.stateReducer}\n            >\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\n                    const validInputProps = { ...getInputProps({ value: initialValue }), ...inputProps };\n\n                    delete validInputProps.labelText;\n\n                    return (\n                        <div>\n                            <input {...validInputProps} />\n                            {inputProps && includes(inputProps.className, 'floating') && (\n                                <Label\n                                    additionalClassName={themeV2 ? 'floating-form-field-label' : ''}\n                                    htmlFor={inputProps.id}\n                                    id={inputProps['aria-labelledby']}\n                                    isFloatingLabelEnabled={true}\n                                >\n                                    {inputProps.labelText}\n                                </Label>\n                            )}\n                            {isOpen && !!items.length && (\n                                <Popover>\n                                    <PopoverList\n                                        getItemProps={getItemProps}\n                                        highlightedIndex={\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\n                                        }\n                                        items={items.map((item) => this.toPopoverItem(item))}\n                                        menuProps={getMenuProps()}\n                                        testId={listTestId}\n                                    />\n                                    {children}\n                                </Popover>\n                            )}\n                        </div>\n                    );\n                }}\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\n                );\n                key += 1;\n            }\n\n            lastIndex = offset + length;\n\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\n                key += 1;\n            }\n\n            return node;\n            // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem | null): string {\n        return (item && item.value) || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>,\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n            case Downshift.stateChangeTypes.blurInput:\n            case Downshift.stateChangeTypes.blurButton:\n            case Downshift.stateChangeTypes.mouseUp:\n            case Downshift.stateChangeTypes.touchEnd:\n                return {\n                    ...changes,\n                    inputValue: state.inputValue,\n                };\n\n            case Downshift.stateChangeTypes.changeInput:\n                if (changes.inputValue !== state.inputValue && onChange) {\n                    onChange(changes.inputValue || '', state.isOpen);\n                }\n\n                return changes;\n\n            case Downshift.stateChangeTypes.keyDownEnter:\n                return changes;\n\n            default:\n                return changes;\n        }\n    };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject(new Error('Failed to initialize Google Maps Autocomplete SDK.'));\n            };\n\n            this._scriptLoader\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch((e) => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(\n        autocompleteWindow.google &&\n            autocompleteWindow.google.maps &&\n            autocompleteWindow.google.maps.places,\n    );\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\nexport interface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\n\n        const { autoComplete, items } = this.state;\n\n        return (\n            <Autocomplete\n                defaultHighlightedIndex={-1}\n                initialHighlightedIndex={-1}\n                initialValue={initialValue}\n                inputProps={{\n                    ...inputProps,\n                    autoComplete,\n                }}\n                items={items}\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={this.onChange}\n                onSelect={this.onSelect}\n                onToggleOpen={onToggleOpen}\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\n        const { fields, onSelect = noop, nextElement } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\n            service.getDetails(\n                {\n                    placeId: item.id,\n                    fields: fields || ['address_components', 'name'],\n                },\n                (result) => {\n                    if (nextElement) {\n                        nextElement.focus();\n                    }\n\n                    onSelect(result, item);\n                },\n            );\n        });\n    };\n\n    private onChange: (input: string) => void = (input) => {\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const { componentRestrictions, types } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\n            service.getPlacePredictions(\n                {\n                    input,\n                    types: types || ['geocode'],\n                    componentRestrictions,\n                },\n                (results) => this.setState({ items: this.toAutocompleteItems(results ?? undefined) }),\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(\n        results?: google.maps.places.AutocompletePrediction[],\n    ): AutocompleteItem[] {\n        return (results || []).map((result) => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLabelId,\n} from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    isFloatingLabelEnabled?: boolean;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\n    field: { default: placeholder, name, maxLength },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n    isFloatingLabelEnabled,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const { themeV2 } = useThemeContext();\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(\n        () => ({\n            className: classNames(\n                'form-input optimizedCheckout-form-input',\n                { 'floating-input': isFloatingLabelEnabled },\n                { 'floating-form-field-input': themeV2 },\n            ),\n            id: getAddressFormFieldInputId(name),\n            'aria-labelledby': labelId,\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\n            labelText: isFloatingLabelEnabled ? labelContent : null,\n            maxLength: maxLength || undefined,\n        }),\n        [name, labelId, placeholder, labelContent, maxLength],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <GoogleAutocomplete\n                apiKey={apiKey}\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\n                initialValue={field.value}\n                inputProps={inputProps}\n                isAutocompleteEnabled={\n                    countryCode ? supportedCountries.includes(countryCode) : false\n                }\n                nextElement={nextElement}\n                onChange={onChange}\n                onSelect={onSelect}\n                onToggleOpen={onToggleOpen}\n            />\n        ),\n        [\n            apiKey,\n            countryCode,\n            inputProps,\n            nextElement,\n            onChange,\n            onSelect,\n            onToggleOpen,\n            supportedCountries,\n        ],\n    );\n\n    const renderLabel = isFloatingLabelEnabled ? null : (\n        <Label additionalClassName={themeV2 ? 'body-regular' : ''} htmlFor={inputProps.id} id={labelId}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}>\n            {labelContent}\n        </Label>\n    );\n\n    return (\n        <div\n            className={classNames(\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\n                { 'floating-form-field': isFloatingLabelEnabled },\n            )}\n            data-test=\"google-autocomplete-form-field\"\n        >\n            <FormField\n                input={renderInput}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                label={renderLabel}\n                name={fieldName}\n                themeV2={themeV2}\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DynamicFormField, DynamicFormFieldType, ThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLegacyName,\n} from './getAddressFormFieldInputId';\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n    static contextType = ThemeContext;\n    declare context: React.ContextType<typeof ThemeContext>;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\n        memoize((name) => (value) => {\n            this.syncNonFormikValue(name, value);\n        });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        if (!this.context) {\n            throw Error('Need to wrap in style context');\n        }\n\n        const { themeV2 } = this.context;\n\n        return (\n            <>\n                <Fieldset>\n                    <div\n                        className=\"checkout-address\"\n                        ref={this.containerRef as RefObject<HTMLDivElement>}\n                    >\n                        {formFields.map((field) => {\n                            const addressFieldName = field.name;\n                            const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                            if (\n                                addressFieldName === 'address1' &&\n                                googleMapsApiKey &&\n                                countriesWithAutocomplete\n                            ) {\n                                return (\n                                    <GoogleAutocompleteFormField\n                                        apiKey={googleMapsApiKey}\n                                        countryCode={countryCode}\n                                        field={field}\n                                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                        key={field.id}\n                                        nextElement={this.nextElement || undefined}\n                                        onChange={this.handleAutocompleteChange}\n                                        onSelect={this.handleAutocompleteSelect}\n                                        onToggleOpen={onAutocompleteToggle}\n                                        parentFieldName={fieldName}\n                                        supportedCountries={countriesWithAutocomplete}\n                                    />\n                                );\n                            }\n\n                            return (\n                                <DynamicFormField\n                                    autocomplete={AUTOCOMPLETE[field.name]}\n                                    extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\n                                        addressFieldName,\n                                    )}`}\n                                    field={field}\n                                    inputId={getAddressFormFieldInputId(addressFieldName)}\n                                    // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                    key={`${field.id}-${field.name}`}\n                                    label={\n                                        field.custom ? (\n                                            field.label\n                                        ) : (\n                                            <TranslatedString id={LABEL[field.name]} />\n                                        )\n                                    }\n                                    onChange={this.handleDynamicFormFieldChange(addressFieldName)}\n                                    parentFieldName={\n                                        field.custom\n                                            ? fieldName\n                                                ? `${fieldName}.customFields`\n                                                : 'customFields'\n                                            : fieldName\n                                    }\n                                    placeholder={this.getPlaceholderValue(\n                                        field,\n                                        translatedPlaceholderId,\n                                    )}\n                                    themeV2={themeV2}\n                                />\n                            );\n                        })}\n                    </div>\n                </Fieldset>\n                {shouldShowSaveAddress && (\n                    <CheckboxFormField\n                        labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\n                        name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\n                        themeV2={themeV2}\n                    />\n                )}\n            </>\n        );\n    }\n\n    private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\n        const { language } = this.props;\n\n        if (field.default && field.fieldType !== 'dropdown') {\n            return field.default;\n        }\n\n        return translatedPlaceholderId && language.translate(translatedPlaceholderId);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (\n        value,\n        isOpen,\n    ) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem,\n    ) => void = (place, { value: autocompleteValue }) => {\n        const { countries, setFieldValue = noop, onChange = noop } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            if (fieldName === AUTOCOMPLETE_FIELD_NAME && value === undefined) {\n                return;\n            }\n\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        const address1 = address.address1 ? address.address1 : autocompleteValue;\n\n        if (address1) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, address1);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\n        fieldName,\n        value,\n    ) => {\n        const { formFields, setFieldValue = noop, onChange = noop } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.DATE)\n            .map((field) => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.includes(fieldName)) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = [],\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find((c) => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    // TODO: Apply this fix for US, UK and CA addresses too.\n    const steet1 = countryCode === 'AU' ? accessor.getStreet() : undefined;\n\n    return {\n        address1: steet1,\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...(state ? getState(state, country && country.subdivisions) : {}),\n    };\n}\n\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(\n        (payment) =>\n            !isGiftCertificatePayment(payment) &&\n            !isStoreCreditPayment(payment) &&\n            !!payment.providerId,\n    );\n}\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import React, { FunctionComponent, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { AddressSelectProps } from './AddressSelect';\nimport SingleLineStaticAddress from './SingleLineStaticAddress';\nimport StaticAddress from './StaticAddress';\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses' | 'type' | 'showSingleLineAddress' | 'placeholderText'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\n    selectedAddress,\n    language,\n    type,\n    showSingleLineAddress,\n    placeholderText,\n}) => {\n    const { themeV2 } = useThemeContext();\n    const [ariaExpanded, setAriaExpanded] = useState(false);\n\n    const SelectedAddress = () => {\n        if (!selectedAddress) {\n            return (<span className={themeV2 ? 'body-regular' : ''} data-test=\"address-select-placeholder\">\n                {placeholderText ?? <TranslatedString id=\"address.enter_address_action\" />}\n            </span>);\n        }\n\n        return showSingleLineAddress\n            ? <SingleLineStaticAddress address={selectedAddress} type={type} />\n            : <StaticAddress address={selectedAddress} type={type} />;\n    }\n\n    return (\n        <a\n            aria-controls=\"addressDropdown\"\n            aria-expanded={ariaExpanded}\n            aria-label={language.translate('address.enter_or_select_address_action')}\n            className=\"button dropdown-button dropdown-toggle--select\"\n            data-test=\"address-select-button\"\n            href=\"#\"\n            id=\"addressToggle\"\n            onBlur={() => setAriaExpanded(false)}\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\n        >\n            <SelectedAddress />\n        </a>\n    );\n};\n\nexport default withLanguage(AddressSelectButton);\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport AddressSelectButton from './AddressSelectButton';\nimport AddressType from './AddressType';\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nimport './AddressSelect.scss';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    type: AddressType;\n    showSingleLineAddress?: boolean;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n    placeholderText?: ReactNode;\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n    type,\n}) => (\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a\n                data-test=\"add-new-address\"\n                href=\"#\"\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\n            >\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        {addresses.map((address) => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                data-test=\"address-select-option\"\n                key={address.id}\n            >\n                <a\n                    data-test=\"address-select-option-action\"\n                    href=\"#\"\n                    onClick={preventDefault(() => onSelectAddress(address))}\n                >\n                    <StaticAddress address={address} type={type} />\n                </a>\n            </li>\n        ))}\n    </ul>\n);\n\nconst AddressSelect = ({\n    addresses,\n    selectedAddress,\n    type,\n    showSingleLineAddress,\n    onSelectAddress,\n    onUseNewAddress,\n    placeholderText,\n}: AddressSelectProps) => {\n    const { shouldShowPayPalFastlaneLabel } = usePayPalFastlaneAddress();\n\n    const handleSelectAddress = (newAddress: Address) => {\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        onUseNewAddress(selectedAddress);\n    };\n\n    return (\n        <div className=\"form-field\">\n            <div className=\"dropdown--select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AddressSelectMenu\n                            addresses={addresses}\n                            onSelectAddress={handleSelectAddress}\n                            onUseNewAddress={handleUseNewAddress}\n                            selectedAddress={selectedAddress}\n                            type={type}\n                        />\n                    }\n                >\n                    <AddressSelectButton\n                        addresses={addresses}\n                        placeholderText={placeholderText}\n                        selectedAddress={selectedAddress}\n                        showSingleLineAddress={showSingleLineAddress}\n                        type={type}\n                    />\n                </DropdownTrigger>\n            </div>\n\n            {shouldShowPayPalFastlaneLabel && <PoweredByPayPalFastlaneLabel />}\n        </div>\n    );\n}\n\nexport default memo(AddressSelect);\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { isEmpty } from 'lodash';\nimport React from \"react\";\n\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport AddressType from \"./AddressType\";\n\nexport interface SingleLineStaticAddressProps {\n    address: Address;\n    type?: AddressType;\n}\n\nexport const getAddressContent: (value: Address) => string = ({\n    firstName,\n    lastName,\n    address1,\n    address2,\n    city,\n    countryCode,\n    stateOrProvince,\n    postalCode,\n}: Address): string => {\n    const addressParts = [address1, address2, city, stateOrProvince, countryCode, postalCode];\n    const nonEmptyAddressParts = addressParts.filter(Boolean);\n    const address = nonEmptyAddressParts.join(', ');\n\n    if (!firstName || !lastName || !address) {\n        return '';\n    }\n\n    return `${firstName} ${lastName}, ${address}`;\n};\n\nconst SingleLineStaticAddress = ({ address }: SingleLineStaticAddressProps) => {\n    const { themeV2 } = useThemeContext();\n\n    const isValid = !isEmpty(address);\n\n    return !isValid ? null : (\n        <div className=\"vcard checkout-address--static\" data-test=\"static-address\">\n            <p className={classNames('address-entry', { 'body-regular': themeV2 })}>\n                {getAddressContent(address)}\n            </p>\n        </div>\n    );\n}\n\nexport default SingleLineStaticAddress;\n","import { Placement } from '@popperjs/core';\nimport React, { MouseEventHandler, ReactElement, ReactNode, useCallback, useEffect, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nconst DropdownTrigger = ({\n    placement = 'bottom-start',\n    dropdown,\n    children\n}: DropdownTriggerProps): ReactElement => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const getRootElement = useCallback(() => {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }, []);\n\n    const handleClose = useCallback(() => {\n        if (!shouldShow) {\n            return;\n        }\n\n        setShouldShow(false);\n    }, [shouldShow]);\n\n    const handleOpen = useCallback(() => {\n        if (shouldShow) {\n            return;\n        }\n\n        setShouldShow(true);\n    }, [shouldShow]);\n\n    const handleClick: MouseEventHandler<HTMLElement> = useCallback(() => {\n        if (shouldShow) {\n            handleClose();\n        } else {\n            handleOpen();\n        }\n    }, [shouldShow, handleClose, handleOpen]);\n\n    useEffect(() => {\n        const rootElement = getRootElement();\n\n        if (shouldShow) {\n            rootElement?.addEventListener('click', handleClose);\n        } else {\n            rootElement?.removeEventListener('click', handleClose);\n        }\n\n        return () => {\n            rootElement?.removeEventListener('click', handleClose);\n        };\n    }, [shouldShow, handleClose, getRootElement]);\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <div className=\"dropdownTrigger\" onClick={handleClick} ref={ref}>\n                        {children}\n                    </div>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ref}\n                            style={{\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            }}\n                        >\n                            {dropdown}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default DropdownTrigger;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const { themeV2 } = useThemeContext();\n\n    const renderLabel = useCallback(\n        (name: string) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" id=\"orderComment\" maxLength={2000} themeV2={themeV2} />,\n        [],\n    );\n\n    const legend = useMemo(\n        () => (\n            <Legend themeV2={themeV2}>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Legend>\n        ),\n        [],\n    );\n\n    return (\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\n            <FormField id=\"orderComment\" input={renderInput} label={renderLabel} name=\"orderComment\" />\n        </Fieldset>\n    );\n};\n\nexport default OrderComments;\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(\n    cart: Cart,\n): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion && !item.parentId));\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[],\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\n}\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n","import {\n    Address,\n    AddressRequestBody,\n    BillingAddress,\n    CustomerAddress,\n} from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(\n    address1?: ComparableAddress,\n    address2?: ComparableAddress,\n): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return (\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\n        isSameState(address1, address2)\n    );\n}\n\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\n        return true;\n    }\n\n    if (\n        address1.stateOrProvinceCode &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    ) {\n        return true;\n    }\n\n    return (\n        address1.stateOrProvince === address2.stateOrProvince &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = [\n        'id',\n        'shouldSaveAddress',\n        'stateOrProvince',\n        'stateOrProvinceCode',\n        'type',\n        'email',\n        'country',\n    ];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields,\n    );\n}\n"],"names":["ADDRESS_FIELD_IDS","address1","address2","postalCode","stateOrProvince","stateOrProvinceCode","getAddressFormFieldLegacyName","name","getAddressFormFieldInputId","AddressSelector","constructor","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","type","access","element","find","field","types","includes","AddressSelectorAU","subpremise","AddressSelectorCA","AddressSelectorUK","AddressSelectorFactory","create","autocompleteData","countryComponent","component","short_name","children","className","getItemClassName","highlightedIndex","index","classes","push","join","memo","testId","getItemProps","props","menuProps","items","length","map","item","key","id","content","Autocomplete","PureComponent","stateReducer","state","changes","onChange","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","noop","undefined","render","inputProps","initialValue","initialHighlightedIndex","defaultHighlightedIndex","onSelect","listTestId","context","Error","themeV2","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","value","labelText","Label","additionalClassName","htmlFor","isFloatingLabelEnabled","isNumber","toPopoverItem","highlightItem","highlightedSlices","label","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","Fragment","substr","contextType","ThemeContext","GoogleAutocompleteScriptLoader","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","GoogleAutocompleteService","_apiKey","getGoogleAutocompleteScriptLoader","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","getPlacesServices","document","createElement","_placesPromise","PlacesService","GoogleAutocomplete","super","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","setState","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","default","placeholder","maxLength","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","useMemo","TranslatedString","getAddressFormFieldLabelId","renderInput","useCallback","country","renderLabel","FormField","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","AddressForm","Component","containerRef","createRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","address","accessor","c","code","street2","steet1","stateName","states","subdivisions","mapToAddress","forIn","formFields","dateFormFieldNames","filter","custom","fieldType","DynamicFormFieldType","DATE","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","ref","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","CheckboxFormField","language","translate","withLanguage","getPreselectedPayment","checkout","payments","payment","providerId","mapAddressFromFormValues","formValues","customFields","shouldSaveAddress","selectedAddress","showSingleLineAddress","placeholderText","ariaExpanded","setAriaExpanded","useState","href","onBlur","onClick","preventDefault","SingleLineStaticAddress","StaticAddress","AddressSelectMenu","addresses","onSelectAddress","onUseNewAddress","shouldShowPayPalFastlaneLabel","usePayPalFastlaneAddress","DropdownTrigger","dropdown","newAddress","isEqualAddress","PoweredByPayPalFastlaneLabel","getAddressContent","isEmpty","placement","shouldShow","setShouldShow","getRootElement","getElementById","handleClose","handleOpen","handleClick","useEffect","rootElement","addEventListener","removeEventListener","modifiers","enabled","style","width","zIndex","hidden","legend","getShippableItemsCount","cart","lineItems","physicalItems","addedByPromotion","parentId","isValidCustomerAddress","some","customerAddress","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID","isEqual","normalizeAddress","isSameState","omit","fieldValue"],"sourceRoot":""}