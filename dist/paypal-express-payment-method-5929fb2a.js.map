{"version":3,"file":"paypal-express-payment-method-5929fb2a.js","mappings":"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","sources":["webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-button-strategy.ts","webpack://checkout/./packages/paypal-express-integration/src/PaypalExpressPaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","export interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n","// The require scope\nvar __webpack_require__ = {};\n\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressPaymentInitializeOptions } from './paypal-express-payment-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport { PaymentStatusTypes, PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private paypalSdk?: PaypalSDK;\n    private paymentMethod?: PaymentMethod;\n    private useRedirectFlow = false;\n    private window: PaypalHostWindow;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: PaypalScriptLoader,\n    ) {\n        this.window = window;\n    }\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPaypalExpressPaymentInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n        this.useRedirectFlow =\n            (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        const merchantId = this.paymentMethod.config.merchantId;\n\n        if (!this.isInContextEnabled() || !merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSdk = await this.scriptLoader.loadPaypalSDK();\n\n        this.paypalSdk = paypalSdk;\n\n        this.paypalSdk.checkout.setup(merchantId, {\n            button: 'paypal-button',\n            environment: this.paymentMethod.config.testMode ? 'sandbox' : 'production',\n        });\n    }\n\n    deinitialize() {\n        if (this.isInContextEnabled() && this.paypalSdk) {\n            this.paypalSdk.checkout.closeFlow();\n            this.paypalSdk = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions) {\n        let state: PaymentIntegrationSelectors;\n        let redirectUrl: string | undefined;\n        const paypal = this.paypalSdk;\n\n        if (this.isAcknowledgedOrFinalized()) {\n            await this.paymentIntegrationService.submitOrder(payload, options);\n\n            return;\n        }\n\n        if (!this.isInContextEnabled() || this.useRedirectFlow) {\n            state = await this.paymentIntegrationService.submitOrder(payload, options);\n            redirectUrl = state.getPaymentRedirectUrl();\n\n            if (redirectUrl && this.window.top) {\n                this.window.top.location.href = redirectUrl;\n            }\n\n            // We need to hold execution so the consumer does not redirect us somewhere else\n            return new Promise<never>(noop);\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        try {\n            state = await this.paymentIntegrationService.submitOrder(payload, options);\n        } catch (error) {\n            paypal.checkout.closeFlow();\n\n            return Promise.reject(error);\n        }\n\n        redirectUrl = state.getPaymentRedirectUrl();\n\n        if (redirectUrl) {\n            paypal.checkout.startFlow(redirectUrl);\n        }\n\n        // We need to hold execution so the consumer does not redirect us somewhere else\n        return new Promise<never>(noop);\n    }\n\n    async finalize(options?: PaymentRequestOptions) {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && this.isAcknowledgedOrFinalized()) {\n            await this.paymentIntegrationService.finalizeOrder(options);\n\n            return Promise.resolve();\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private isAcknowledgedOrFinalized(): boolean {\n        const state = this.paymentIntegrationService.getState();\n\n        return (\n            state.getPaymentStatus() === PaymentStatusTypes.ACKNOWLEDGE ||\n            state.getPaymentStatus() === PaymentStatusTypes.FINALIZE\n        );\n    }\n\n    private isInContextEnabled(): boolean {\n        return !!(this.paymentMethod && this.paymentMethod.config.merchantId);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalScriptLoader {\n    private window: PaypalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async loadPaypalSDK(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n            ...(merchantId && {\n                attributes: { 'data-merchant-id': merchantId },\n            }),\n        };\n\n        await this.scriptLoader.loadScript(scriptSrc, options);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PaypalExpressPaymentStrategy from './paypal-express-payment-strategy';\nimport PaypalExpressScriptLoader from './paypal-express-script-loader';\n\nconst createPaypalExpressPaymentStrategy: PaymentStrategyFactory<PaypalExpressPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new PaypalExpressPaymentStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressPaymentStrategy, [\n    { id: 'paypalexpress', type: 'PAYMENT_TYPE_HOSTED' },\n    { id: 'paypalexpresscredit', type: 'PAYMENT_TYPE_HOSTED' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressButtonInitializeOptions } from './paypal-express-button-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal-express-types';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalExpressScriptLoader: PaypalScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!options.paypal) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSDK = await this.paypalExpressScriptLoader.loadPaypalSDK(\n            paymentMethod.config.merchantId,\n        );\n\n        this.renderButton(options, paypalSDK);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n        paypalSDK: PaypalSDK,\n    ) {\n        const { containerId, methodId, paypal } = options;\n        const { allowCredit, clientId, onPaymentError, shouldProcessPayment, style } = paypal;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const merchantId = paymentMethod.config.merchantId;\n        const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n        const clientToken: PaypalClientToken = { [env]: clientId };\n        const fundingCreditOption = paypalSDK.FUNDING.CREDIT || 'credit';\n        const allowedSources = allowCredit ? [fundingCreditOption] : [];\n        const disallowedSources = !allowCredit ? [fundingCreditOption] : [];\n\n        return paypalSDK.Button.render(\n            {\n                env,\n                client: clientToken,\n                commit: shouldProcessPayment,\n                funding: {\n                    allowed: allowedSources,\n                    disallowed: disallowedSources,\n                },\n                style: this.getStyle(style),\n                payment: (_, actions) => this.setupPayment(merchantId, actions, onPaymentError),\n                onAuthorize: (data, actions) =>\n                    this.tokenizePayment(data, methodId, actions, shouldProcessPayment),\n            },\n            containerId,\n        );\n    }\n\n    private getStyle(style?: Omit<PaypalStyleOptions, 'height'>): PaypalStyleOptions {\n        const { color, fundingicons, label, layout, shape, size, tagline } = style || {};\n\n        return {\n            color,\n            fundingicons,\n            label,\n            layout,\n            shape: shape || PaypalButtonStyleShapeOption.RECT,\n            size: size === 'small' ? PaypalButtonStyleSizeOption.RESPONSIVE : size,\n            tagline,\n        };\n    }\n\n    private async setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        try {\n            const state = await this.paymentIntegrationService.loadDefaultCheckout();\n            const { id: cartId } = state.getCartOrThrow();\n            const host = state.getHost() || '';\n\n            const paymentRequest = await actions.request.post(\n                `${host}/api/storefront/payment/paypalexpress`,\n                { merchantId, cartId },\n                {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                },\n            );\n\n            return paymentRequest.id;\n        } catch (error) {\n            if (onError && error instanceof StandardError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        data: PaypalAuthorizeData,\n        methodId: string,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n    ): Promise<void> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const getPaymentData = await actions.payment.get(data.paymentID);\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            provider: paymentMethod.id,\n            action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n            paymentId: data.paymentID,\n            payerId: data.payerID,\n            payerInfo: JSON.stringify(getPaymentData.payer.payer_info),\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalExpressButtonStrategy, PaypalExpressScriptLoader } from './index';\n\nconst createPaypalExpressButtonStrategy: CheckoutButtonStrategyFactory<\n    PaypalExpressButtonStrategy\n> = (paymentIntegrationService) => {\n    return new PaypalExpressButtonStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressButtonStrategy, [{ id: 'paypalexpress' }]);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createPaypalExpressPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/paypal-express';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaypalExpressPaymentMethodProps {\n    isEmbedded?: boolean;\n}\n\nconst PaypalExpressPaymentMethod: FunctionComponent<\n    PaymentMethodProps & PaypalExpressPaymentMethodProps\n> = ({ checkoutService, isEmbedded = false, ...rest }) => {\n    const initializePaypalExpressPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                integrations: [createPaypalExpressPaymentStrategy],\n                paypalexpress: {\n                    useRedirectFlow: isEmbedded,\n                },\n            }),\n        [checkoutService, isEmbedded],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePaypalExpressPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalExpressPaymentMethod,\n    [{ id: 'paypalexpress' }],\n);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["MissingDataErrorType","NotInitializedErrorType","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","PaymentStatusTypes","__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","subtype","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","OrderFinalizationNotRequiredError","HORIZONTAL","VERTICAL","SMALL","MEDIUM","LARGE","RESPONSIVE","GOLD","BLUE","SIlVER","BLACK","CHECKOUT","PAY","BUYNOW","PAYPAL","CREDIT","PILL","RECT","ACKNOWLEDGE","FINALIZE","INITIALIZE","PaypalExpressPaymentStrategy","paymentIntegrationService","scriptLoader","useRedirectFlow","window","initialize","options","state","getState","paymentMethod","getPaymentMethodOrThrow","methodId","paypalexpress","merchantId","config","isInContextEnabled","paypalSdk","loadPaypalSDK","checkout","setup","button","environment","testMode","deinitialize","closeFlow","Promise","resolve","execute","payload","redirectUrl","paypal","isAcknowledgedOrFinalized","submitOrder","getPaymentRedirectUrl","top","location","href","noop","initXO","error","reject","startFlow","finalize","getOrder","finalizeOrder","getPaymentStatus","PaymentMethodClientUnavailableError","PaypalScriptLoader","async","attributes","loadScript","getScriptLoader","id","InvalidArgumentError","SDK_VERSION_HEADERS","PaypalButtonStrategy","paypalExpressScriptLoader","formPoster","paypalSDK","renderButton","containerId","allowCredit","clientId","onPaymentError","shouldProcessPayment","style","env","clientToken","fundingCreditOption","FUNDING","allowedSources","disallowedSources","Button","render","client","commit","funding","allowed","disallowed","getStyle","payment","_","actions","setupPayment","onAuthorize","data","tokenizePayment","color","fundingicons","label","layout","shape","size","tagline","onError","loadDefaultCheckout","cartId","getCartOrThrow","host","getHost","request","post","headers","paymentID","payerID","getPaymentData","postForm","payment_type","provider","action","paymentId","payerId","payerInfo","JSON","stringify","payer","payer_info","createFormPoster","checkoutService","isEmbedded","rest","initializePaypalExpressPayment","useCallback","initializePayment","integrations","HostedPaymentComponent","deinitializePayment","props","description","isInitializing","method","onUnhandledError","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","checkoutState","isUsingMultiShipping","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","customer","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","gateway","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","checkoutSettings","isCardVaultingEnabled","isVaultingEnabled","isGuest"],"sourceRoot":""}