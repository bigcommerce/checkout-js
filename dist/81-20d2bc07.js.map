{"version":3,"file":"81-20d2bc07.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/mapFromInstrumentCardType.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageAccountInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageCardInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsAlert.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsModal.tsx","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isAccountInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isCardInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isBankAccountInstrument.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconPaypal.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStorageField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStoreAsDefaultField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/StoreInstrumentFieldset.tsx"],"sourcesContent":["import { CheckoutSettings, Customer, PaymentMethod, PaymentMethodConfig, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    paymentMethod: PaymentMethod;\n    shouldSavingCardsBeEnabled?: boolean;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    paymentMethod,\n    shouldSavingCardsBeEnabled = true,\n}: IsInstrumentFeatureAvailableState): boolean {\n    const { checkoutSettings } = config;\n\n    if (\n        isVaultingNotEnabled(checkoutSettings, paymentMethod.config) ||\n        customer.isGuest ||\n        !shouldSavingCardsBeEnabled\n    ) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction isVaultingNotEnabled(checkoutSettings: CheckoutSettings, paymentMethodConfig: PaymentMethodConfig): boolean {\n    return !checkoutSettings.isCardVaultingEnabled || !paymentMethodConfig.isVaultingEnabled;\n}\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { AccountInstrument, BankInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: Array<AccountInstrument | BankInstrument>;\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                {isBankAccountInstrument(instrument) ? (\n                    <span className=\"instrumentModal-instrumentAccountNumber\">\n                        <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        <span>{` ${instrument.accountNumber}`}</span>\n                    </span>\n                ) : (\n                    <>\n                        <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n                        <span className=\"instrumentModal-instrumentAccountExternalId\">\n                            {instrument.externalId}\n                        </span>\n                    </>\n                )}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired =\n        !expirationDate({\n            month: instrument.expiryMonth,\n            year: instrument.expiryYear,\n        }).isValid;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={cardType} />\n\n                {cardInfo && (\n                    <span className=\"instrumentModal-instrumentCardType\">{cardInfo.niceType}</span>\n                )}\n            </td>\n            <td data-test=\"manage-instrument-last4\">{instrument.last4}</td>\n            <td\n                className={classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired })}\n                data-test=\"manage-instrument-expiry\"\n            >\n                {`${instrument.expiryMonth}/${instrument.expiryYear}`}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Alert, AlertType } from '../../ui/alert';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({ error }) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={AlertType.Error}>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { CheckoutSelectors, PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../../ui/button';\nimport { Modal, ModalHeader } from '../../ui/modal';\n\nimport isAccountInstrument from './isAccountInstrument';\nimport isBankAccountInstrument from './isBankAccountInstrument';\nimport isCardInstrument from './isCardInstrument';\nimport ManageAccountInstrumentsTable from './ManageAccountInstrumentsTable';\nimport ManageCardInstrumentsTable from './ManageCardInstrumentsTable';\nimport ManageInstrumentsAlert from './ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrument?(instrumentId: string): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\ninterface WithCheckoutProps {\n    deleteInstrumentError?: Error;\n    isDeletingInstrument: boolean;\n    isLoadingInstruments: boolean;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    deleteInstrument(id: string): Promise<CheckoutSelectors>;\n}\n\nclass ManageInstrumentsModal extends Component<\n    ManageInstrumentsModalProps & WithCheckoutProps,\n    ManageInstrumentsModalState\n> {\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        const { deleteInstrumentError, isOpen, onRequestClose } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                footer={this.renderFooter()}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={isOpen}\n                onAfterOpen={this.handleAfterOpen}\n                onRequestClose={onRequestClose}\n            >\n                {deleteInstrumentError && <ManageInstrumentsAlert error={deleteInstrumentError} />}\n\n                {this.renderContent()}\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { instruments, isDeletingInstrument } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p>\n                    <TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" />\n                </p>\n            );\n        }\n\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const bankInstruments = instruments.filter(isBankAccountInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n\n        const bankAndAccountInstruments = [...bankInstruments, ...accountInstruments];\n\n        if (bankAndAccountInstruments.length) {\n            return (\n                <ManageAccountInstrumentsTable\n                    instruments={bankAndAccountInstruments}\n                    isDeletingInstrument={isDeletingInstrument}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        return (\n            <ManageCardInstrumentsTable\n                instruments={cardInstruments}\n                isDeletingInstrument={isDeletingInstrument}\n                onDeleteInstrument={this.handleDeleteInstrument}\n            />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        const { isDeletingInstrument, isLoadingInstruments, onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <>\n                    <Button\n                        data-test=\"manage-instrument-cancel-button\"\n                        onClick={this.handleCancel}\n                        size={ButtonSize.Small}\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        data-test=\"manage-instrument-confirm-button\"\n                        disabled={isDeletingInstrument || isLoadingInstruments}\n                        onClick={this.handleConfirmDelete}\n                        size={ButtonSize.Small}\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </>\n            );\n        }\n\n        return (\n            <Button\n                data-test=\"manage-instrument-close-button\"\n                onClick={onRequestClose}\n                size={ButtonSize.Small}\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState(\n            {\n                isConfirmingDelete: false,\n            },\n            onAfterOpen,\n        );\n    };\n\n    private handleCancel: () => void = () => {\n        const { clearError, deleteInstrumentError } = this.props;\n\n        if (deleteInstrumentError) {\n            clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        const {\n            deleteInstrument,\n            onDeleteInstrument = noop,\n            onDeleteInstrumentError = noop,\n            onRequestClose = noop,\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onDeleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport function mapFromCheckoutProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutProps | null {\n    const {\n        errors: { getDeleteInstrumentError },\n        statuses: { isDeletingInstrument, isLoadingInstruments },\n    } = checkoutState;\n\n    return {\n        clearError: checkoutService.clearError,\n        deleteInstrument: checkoutService.deleteInstrument,\n        deleteInstrumentError: getDeleteInstrumentError(),\n        isDeletingInstrument: isDeletingInstrument(),\n        isLoadingInstruments: isLoadingInstruments(),\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(ManageInstrumentsModal);\n","import { Placement } from '@popperjs/core';\nimport React, { MouseEventHandler, ReactElement, ReactNode, useCallback, useEffect, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nconst DropdownTrigger = ({\n    placement = 'bottom-start',\n    dropdown,\n    children\n}: DropdownTriggerProps): ReactElement => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const getRootElement = useCallback(() => {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }, []);\n\n    const handleClose = useCallback(() => {\n        if (!shouldShow) {\n            return;\n        }\n\n        setShouldShow(false);\n    }, [shouldShow]);\n\n    const handleOpen = useCallback(() => {\n        if (shouldShow) {\n            return;\n        }\n\n        setShouldShow(true);\n    }, [shouldShow]);\n\n    const handleClick: MouseEventHandler<HTMLElement> = useCallback(() => {\n        if (shouldShow) {\n            handleClose();\n        } else {\n            handleOpen();\n        }\n    }, [shouldShow, handleClose, handleOpen]);\n\n    useEffect(() => {\n        const rootElement = getRootElement();\n\n        if (shouldShow) {\n            rootElement?.addEventListener('click', handleClose);\n        } else {\n            rootElement?.removeEventListener('click', handleClose);\n        }\n\n        return () => {\n            rootElement?.removeEventListener('click', handleClose);\n        };\n    }, [shouldShow, handleClose, getRootElement]);\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <div className=\"dropdownTrigger\" onClick={handleClick} ref={ref}>\n                        {children}\n                    </div>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ref}\n                            style={{\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            }}\n                        >\n                            {dropdown}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default DropdownTrigger;\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isCardInstrument(\n    instrument: PaymentInstrument,\n): instrument is CardInstrument {\n    return instrument.type === 'card';\n}\n","import { AchInstrument, BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isBankAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is BankInstrument | AchInstrument {\n    return instrument.type === 'bank';\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg height=\"300\" viewBox=\"0 0 255 300\" width=\"255\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\"\n            fill=\"#253B80\"\n        />\n        <path\n            d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\"\n            fill=\"#179BD7\"\n        />\n        <path\n            d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\"\n            fill=\"#222D65\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStorageFieldProps {\n    isAccountInstrument: boolean;\n}\n\nconst InstrumentStorageField: FunctionComponent<InstrumentStorageFieldProps> = ({\n    isAccountInstrument,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_payment_method_label'\n        : 'payment.instrument_save_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--saveInstrument\"\n            labelContent={labelContent}\n            name=\"shouldSaveInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStorageField);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStoreAsDefaultFieldProps {\n    isAccountInstrument: boolean;\n    disabled?: boolean;\n}\n\nconst InstrumentStoreAsDefaultField: FunctionComponent<InstrumentStoreAsDefaultFieldProps> = ({\n    isAccountInstrument,\n    disabled = false,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_as_default_payment_method_label'\n        : 'payment.instrument_save_as_default_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--setAsDefaultInstrument\"\n            disabled={disabled}\n            labelContent={labelContent}\n            name=\"shouldSetAsDefaultInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStoreAsDefaultField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport InstrumentStorageField from './InstrumentStorageField';\nimport InstrumentStoreAsDefaultField from './InstrumentStoreAsDefaultField';\n\ninterface StoreInstrumentFieldsetProps {\n    isAccountInstrument?: boolean;\n    instrumentId?: string;\n}\n\ninterface WithStorageSettings {\n    showSave: boolean;\n    showSetAsDefault: boolean;\n    setAsDefaultEnabled: boolean;\n}\n\ntype WithFormValues = ConnectFormikProps<{ shouldSaveInstrument: boolean }>;\n\nconst StoreInstrumentFieldset: FunctionComponent<\n    StoreInstrumentFieldsetProps & WithStorageSettings\n> = ({ showSave, showSetAsDefault, isAccountInstrument = false, setAsDefaultEnabled }) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.instrument_storage_options_text\" />\n            </Legend>\n        }\n    >\n        {showSave && <InstrumentStorageField isAccountInstrument={isAccountInstrument} />}\n\n        {showSetAsDefault && (\n            <InstrumentStoreAsDefaultField\n                disabled={!setAsDefaultEnabled}\n                isAccountInstrument={isAccountInstrument}\n            />\n        )}\n    </Fieldset>\n);\n\nconst mapToProps = (\n    context: CheckoutContextProps,\n    props: StoreInstrumentFieldsetProps & WithFormValues,\n): WithStorageSettings | null => {\n    const {\n        checkoutState: {\n            data: { getInstruments },\n        },\n    } = context;\n\n    const allInstruments = getInstruments();\n\n    const {\n        formik: {\n            values: { shouldSaveInstrument: saveIsChecked },\n        },\n        instrumentId,\n    } = props;\n\n    const addingNewInstrument = !instrumentId;\n    const hasAnyOtherInstruments = !!allInstruments && allInstruments.length > 0;\n    const instrument =\n        allInstruments && allInstruments.find(({ bigpayToken }) => bigpayToken === instrumentId);\n\n    return {\n        ...props,\n        showSave: addingNewInstrument,\n        showSetAsDefault:\n            (addingNewInstrument && hasAnyOtherInstruments) ||\n            Boolean(instrument && !instrument.defaultInstrument),\n        setAsDefaultEnabled: !addingNewInstrument || saveIsChecked,\n    };\n};\n\nexport default connectFormik(withCheckout(mapToProps)(StoreInstrumentFieldset));\n"],"names":["isInstrumentFeatureAvailable","config","customer","paymentMethod","shouldSavingCardsBeEnabled","checkoutSettings","paymentMethodConfig","isCardVaultingEnabled","isVaultingEnabled","isVaultingNotEnabled","isGuest","mapFromInstrumentCardType","type","ManageInstrumentsRow","instrument","onDeleteInstrument","handleDelete","useCallback","bigpayToken","isBankAccountInstrument","className","TranslatedString","id","accountNumber","IconPaypal","additionalClassName","size","Medium","externalId","onClick","memo","instruments","isDeletingInstrument","length","LoadingOverlay","isLoading","map","key","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","niceType","last4","error","status","Alert","A","Error","ManageInstrumentsModal","Component","state","isConfirmingDelete","handleAfterOpen","onAfterOpen","this","props","setState","handleCancel","clearError","deleteInstrumentError","handleConfirmDelete","deleteInstrument","noop","onDeleteInstrumentError","onRequestClose","selectedInstrumentId","handleDeleteInstrument","render","isOpen","Modal","closeButtonLabel","footer","renderFooter","header","ModalHeader","renderContent","cardInstruments","filter","isCardInstrument","bankAndAccountInstruments","isAccountInstrument","ManageAccountInstrumentsTable","isLoadingInstruments","Button","Small","disabled","variant","Primary","withCheckout","checkoutService","checkoutState","errors","getDeleteInstrumentError","statuses","placement","dropdown","children","shouldShow","setShouldShow","useState","getRootElement","document","getElementById","handleClose","handleOpen","handleClick","useEffect","rootElement","addEventListener","removeEventListener","ref","modifiers","name","enabled","style","width","zIndex","height","viewBox","xmlns","d","fill","translationId","labelContent","useMemo","CheckboxFormField","connectFormik","context","data","getInstruments","allInstruments","formik","values","shouldSaveInstrument","saveIsChecked","instrumentId","addingNewInstrument","hasAnyOtherInstruments","find","showSave","showSetAsDefault","Boolean","defaultInstrument","setAsDefaultEnabled","Fieldset","legend","Legend","hidden"],"sourceRoot":""}