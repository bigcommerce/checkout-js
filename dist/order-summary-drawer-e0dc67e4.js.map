{"version":3,"file":"order-summary-drawer-e0dc67e4.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/order/getLineItemsCount.ts","webpack://checkout/./packages/core/src/app/order/OrderSummaryModal.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryDrawer.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronUp.tsx","webpack://checkout/./packages/core/src/app/order/mapFromCustom.tsx","webpack://checkout/./packages/core/src/app/order/getOrderSummaryItemImage.tsx","webpack://checkout/./packages/core/src/app/order/mapFromDigital.tsx","webpack://checkout/./packages/core/src/app/order/mapFromGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/order/mapFromPhysical.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryItem.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryItems.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryPrice.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummarySection.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryDiscount.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummarySubtotals.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryTotal.tsx","webpack://checkout/./packages/core/src/app/order/getItemsCount.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx"],"sourcesContent":["import { LineItemMap } from '@bigcommerce/checkout-sdk';\n\nexport default function getLineItemsCount({\n    physicalItems,\n    digitalItems,\n    giftCertificates,\n    customItems,\n}: LineItemMap): number {\n    return (\n        physicalItems.length +\n        digitalItems.length +\n        giftCertificates.length +\n        (customItems || []).length\n    );\n}\n","import {\n    LineItemMap,\n    ShopperCurrency as ShopperCurrencyType,\n    StoreCurrency,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { IconClose } from '../ui/icon';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\n\nexport interface OrderSummaryDrawerProps {\n    additionalLineItems?: ReactNode;\n    lineItems: LineItemMap;\n    total: number;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    isOpen: boolean;\n    headerLink?: ReactNode;\n    onRequestClose?(): void;\n    onAfterOpen?(): void;\n}\n\nconst OrderSummaryModal: FunctionComponent<\n    OrderSummaryDrawerProps & OrderSummarySubtotalsProps\n> = ({\n    additionalLineItems,\n    children,\n    onRequestClose,\n    onAfterOpen,\n    storeCurrency,\n    shopperCurrency,\n    isOpen,\n    headerLink,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => (\n    <Modal\n        additionalBodyClassName=\"cart-modal-body optimizedCheckout-orderSummary\"\n        additionalHeaderClassName=\"cart-modal-header optimizedCheckout-orderSummary\"\n        header={renderHeader({ headerLink, onRequestClose })}\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n    >\n        <OrderSummarySection>\n            <OrderSummaryItems items={lineItems} />\n        </OrderSummarySection>\n        <OrderSummarySection>\n            <OrderSummarySubtotals {...orderSummarySubtotalsProps} />\n            {additionalLineItems}\n        </OrderSummarySection>\n        <OrderSummarySection>\n            <OrderSummaryTotal\n                orderAmount={total}\n                shopperCurrencyCode={shopperCurrency.code}\n                storeCurrencyCode={storeCurrency.code}\n            />\n        </OrderSummarySection>\n    </Modal>\n);\n\nconst renderHeader: FunctionComponent<{\n    headerLink: ReactNode;\n    onRequestClose?(): void;\n}> = ({ onRequestClose, headerLink }) => (\n    <>\n        <a className=\"cart-modal-close\" href=\"#\" onClick={preventDefault(onRequestClose)}>\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"common.close_action\" />\n            </span>\n            <IconClose />\n        </a>\n        <ModalHeader additionalClassName=\"cart-modal-title\">\n            <TranslatedString id=\"cart.cart_heading\" />\n        </ModalHeader>\n\n        {headerLink}\n    </>\n);\n\nexport default OrderSummaryModal;\n","import {\n    LineItemMap,\n    ShopperCurrency as ShopperCurrencyType,\n    StoreCurrency,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { ShopperCurrency } from '../currency';\nimport { TranslatedString } from '../locale';\nimport { IconGiftCertificate } from '../ui/icon';\nimport { ModalTrigger } from '../ui/modal';\n\nimport getItemsCount from './getItemsCount';\nimport getLineItemsCount from './getLineItemsCount';\nimport OrderSummaryModal from './OrderSummaryModal';\nimport { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\n\nexport interface OrderSummaryDrawerProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    additionalLineItems?: ReactNode;\n}\n\nconst OrderSummaryDrawer: FunctionComponent<\n    OrderSummaryDrawerProps & OrderSummarySubtotalsProps\n> = ({\n    additionalLineItems,\n    coupons,\n    discountAmount,\n    giftCertificates,\n    handlingAmount,\n    headerLink,\n    lineItems,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n    shippingAmount,\n    shopperCurrency,\n    storeCreditAmount,\n    giftWrappingAmount,\n    storeCurrency,\n    subtotalAmount,\n    taxes,\n    total,\n}) => {\n    const renderModal = useCallback(\n        (props) => (\n            <OrderSummaryModal\n                {...props}\n                additionalLineItems={additionalLineItems}\n                coupons={coupons}\n                discountAmount={discountAmount}\n                giftCertificates={giftCertificates}\n                giftWrappingAmount={giftWrappingAmount}\n                handlingAmount={handlingAmount}\n                headerLink={headerLink}\n                lineItems={lineItems}\n                onRemovedCoupon={onRemovedCoupon}\n                onRemovedGiftCertificate={onRemovedGiftCertificate}\n                shippingAmount={shippingAmount}\n                shopperCurrency={shopperCurrency}\n                storeCreditAmount={storeCreditAmount}\n                storeCurrency={storeCurrency}\n                subtotalAmount={subtotalAmount}\n                taxes={taxes}\n                total={total}\n            />\n        ),\n        [\n            additionalLineItems,\n            coupons,\n            discountAmount,\n            giftCertificates,\n            handlingAmount,\n            headerLink,\n            lineItems,\n            onRemovedCoupon,\n            onRemovedGiftCertificate,\n            giftWrappingAmount,\n            shippingAmount,\n            shopperCurrency,\n            storeCreditAmount,\n            storeCurrency,\n            subtotalAmount,\n            taxes,\n            total,\n        ],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            {({ onClick, onKeyPress }) => (\n                <div\n                    className=\"cartDrawer optimizedCheckout-orderSummary\"\n                    onClick={onClick}\n                    onKeyPress={onKeyPress}\n                    tabIndex={0}\n                >\n                    <figure\n                        className={classNames('cartDrawer-figure', {\n                            'cartDrawer-figure--stack': getLineItemsCount(lineItems) > 1,\n                        })}\n                    >\n                        <div className=\"cartDrawer-imageWrapper\">{getImage(lineItems)}</div>\n                    </figure>\n                    <div className=\"cartDrawer-body\">\n                        <h3 className=\"cartDrawer-items optimizedCheckout-headingPrimary\">\n                            <TranslatedString\n                                data={{ count: getItemsCount(lineItems) }}\n                                id=\"cart.item_count_text\"\n                            />\n                        </h3>\n                        <a>\n                            <TranslatedString id=\"cart.show_details_action\" />\n                        </a>\n                    </div>\n                    <div className=\"cartDrawer-actions\">\n                        <h3 className=\"cartDrawer-total optimizedCheckout-headingPrimary\">\n                            <ShopperCurrency amount={total} />\n                        </h3>\n                    </div>\n                </div>\n            )}\n        </ModalTrigger>\n    );\n};\n\nfunction getImage(lineItems: LineItemMap): ReactNode {\n    const productWithImage = lineItems.physicalItems[0] || lineItems.digitalItems[0];\n\n    if (productWithImage && productWithImage.imageUrl) {\n        return (\n            <img\n                alt={productWithImage.name}\n                data-test=\"cart-item-image\"\n                src={productWithImage.imageUrl}\n            />\n        );\n    }\n\n    if (lineItems.giftCertificates.length) {\n        return <IconGiftCertificate />;\n    }\n}\n\nexport default memo(OrderSummaryDrawer);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronUp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronUp);\n","import { CustomItem } from '@bigcommerce/checkout-sdk';\n\nimport { OrderSummaryItemProps } from './OrderSummaryItem';\n\nfunction mapFromCustom(item: CustomItem): OrderSummaryItemProps {\n    return {\n        id: item.id,\n        quantity: item.quantity,\n        amount: item.extendedListPrice,\n        name: item.name,\n    };\n}\n\nexport default mapFromCustom;\n","import { DigitalItem, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport React, { ReactNode } from 'react';\n\nexport default function getOrderSummaryItemImage(item: DigitalItem | PhysicalItem): ReactNode {\n    if (!item.imageUrl) {\n        return;\n    }\n\n    return <img alt={item.name} data-test=\"cart-item-image\" src={item.imageUrl} />;\n}\n","import { DigitalItem } from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { TranslatedString } from '../locale';\n\nimport getOrderSummaryItemImage from './getOrderSummaryItemImage';\nimport { OrderSummaryItemOption, OrderSummaryItemProps } from './OrderSummaryItem';\n\nfunction mapFromDigital(item: DigitalItem): OrderSummaryItemProps {\n    return {\n        id: item.id,\n        quantity: item.quantity,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        name: item.name,\n        image: getOrderSummaryItemImage(item),\n        productOptions: [\n            ...(item.options || []).map((option) => ({\n                testId: 'cart-item-product-option',\n                content: `${option.name} ${option.value}`,\n            })),\n            getDigitalItemDescription(item),\n        ],\n    };\n}\n\nfunction getDigitalItemDescription(item: DigitalItem): OrderSummaryItemOption {\n    if (!item.downloadPageUrl) {\n        return {\n            testId: 'cart-item-digital-product',\n            content: <TranslatedString id=\"cart.digital_item_text\" />,\n        };\n    }\n\n    return {\n        testId: 'cart-item-digital-product-download',\n        content: (\n            <a href={item.downloadPageUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n                <TranslatedString id=\"cart.downloads_action\" />\n            </a>\n        ),\n    };\n}\n\nexport default mapFromDigital;\n","import { GiftCertificateItem } from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { IconGiftCertificate } from '../ui/icon';\n\nimport { OrderSummaryItemProps } from './OrderSummaryItem';\n\nfunction mapFromGiftCertificate(item: GiftCertificateItem): OrderSummaryItemProps {\n    return {\n        id: item.id,\n        quantity: 1,\n        amount: item.amount,\n        name: item.name,\n        image: (\n            <span className=\"productImage-giftCertificate\" data-test=\"cart-item-gift-certificate\">\n                <IconGiftCertificate />\n            </span>\n        ),\n    };\n}\n\nexport default mapFromGiftCertificate;\n","import { PhysicalItem } from '@bigcommerce/checkout-sdk';\n\nimport getOrderSummaryItemImage from './getOrderSummaryItemImage';\nimport { OrderSummaryItemProps } from './OrderSummaryItem';\n\nfunction mapFromPhysical(item: PhysicalItem): OrderSummaryItemProps {\n    return {\n        id: item.id,\n        quantity: item.quantity,\n        amount: item.extendedComparisonPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        name: item.name,\n        image: getOrderSummaryItemImage(item),\n        description: item.giftWrapping ? item.giftWrapping.name : undefined,\n        productOptions: (item.options || []).map((option) => ({\n            testId: 'cart-item-product-option',\n            content: `${option.name} ${option.value}`,\n        })),\n    };\n}\n\nexport default mapFromPhysical;\n","import classNames from 'classnames';\nimport { isNumber } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { ShopperCurrency } from '../currency';\n\nexport interface OrderSummaryItemProps {\n    id: string | number;\n    amount: number;\n    quantity: number;\n    name: string;\n    amountAfterDiscount?: number;\n    image?: ReactNode;\n    description?: ReactNode;\n    productOptions?: OrderSummaryItemOption[];\n}\n\nexport interface OrderSummaryItemOption {\n    testId: string;\n    content: ReactNode;\n}\n\nconst OrderSummaryItem: FunctionComponent<OrderSummaryItemProps> = ({\n    amount,\n    amountAfterDiscount,\n    image,\n    name,\n    productOptions,\n    quantity,\n    description,\n}) => (\n    <div className=\"product\" data-test=\"cart-item\">\n        <figure className=\"product-column product-figure\">{image}</figure>\n\n        <div className=\"product-column product-body\">\n            <h4\n                className=\"product-title optimizedCheckout-contentPrimary\"\n                data-test=\"cart-item-product-title\"\n            >\n                {`${quantity} x ${name}`}\n            </h4>\n            {productOptions && productOptions.length > 0 && (\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"cart-item-product-options\"\n                >\n                    {productOptions.map((option, index) => (\n                        <li className=\"product-option\" data-test={option.testId} key={index}>\n                            {option.content}\n                        </li>\n                    ))}\n                </ul>\n            )}\n            {description && (\n                <div\n                    className=\"product-description optimizedCheckout-contentSecondary\"\n                    data-test=\"cart-item-product-description\"\n                >\n                    {description}\n                </div>\n            )}\n        </div>\n\n        <div className=\"product-column product-actions\">\n            <div\n                className={classNames('product-price', 'optimizedCheckout-contentPrimary', {\n                    'product-price--beforeDiscount':\n                        isNumber(amountAfterDiscount) && amountAfterDiscount !== amount,\n                })}\n                data-test=\"cart-item-product-price\"\n            >\n                <ShopperCurrency amount={amount} />\n            </div>\n\n            {isNumber(amountAfterDiscount) && amountAfterDiscount !== amount && (\n                <div className=\"product-price\" data-test=\"cart-item-product-price--afterDiscount\">\n                    <ShopperCurrency amount={amountAfterDiscount} />\n                </div>\n            )}\n        </div>\n    </div>\n);\n\nexport default memo(OrderSummaryItem);\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\nimport React, { ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { IconChevronDown, IconChevronUp } from '../ui/icon';\n\nimport getItemsCount from './getItemsCount';\nimport mapFromCustom from './mapFromCustom';\nimport mapFromDigital from './mapFromDigital';\nimport mapFromGiftCertificate from './mapFromGiftCertificate';\nimport mapFromPhysical from './mapFromPhysical';\nimport OrderSummaryItem from './OrderSummaryItem';\n\nconst COLLAPSED_ITEMS_LIMIT = 4;\n\nexport interface OrderSummaryItemsProps {\n    items: LineItemMap;\n}\n\ninterface OrderSummaryItemsState {\n    isExpanded: boolean;\n}\n\nclass OrderSummaryItems extends React.Component<OrderSummaryItemsProps, OrderSummaryItemsState> {\n    constructor(props: OrderSummaryItemsProps) {\n        super(props);\n\n        this.state = {\n            isExpanded: false,\n        };\n    }\n\n    render(): ReactNode {\n        const { items } = this.props;\n        const { isExpanded } = this.state;\n\n        return (\n            <>\n                <h3\n                    className=\"cart-section-heading optimizedCheckout-contentPrimary\"\n                    data-test=\"cart-count-total\"\n                >\n                    <TranslatedString\n                        data={{ count: getItemsCount(items) }}\n                        id=\"cart.item_count_text\"\n                    />\n                </h3>\n\n                <ul aria-live=\"polite\" className=\"productList\">\n                    {[\n                        ...items.physicalItems\n                            .slice()\n                            .sort((item) => item.variantId)\n                            .map(mapFromPhysical),\n                        ...items.giftCertificates.slice().map(mapFromGiftCertificate),\n                        ...items.digitalItems\n                            .slice()\n                            .sort((item) => item.variantId)\n                            .map(mapFromDigital),\n                        ...(items.customItems || []).map(mapFromCustom),\n                    ]\n                        .slice(0, isExpanded ? undefined : COLLAPSED_ITEMS_LIMIT)\n                        .map((summaryItemProps) => (\n                            <li className=\"productList-item is-visible\" key={summaryItemProps.id}>\n                                <OrderSummaryItem {...summaryItemProps} />\n                            </li>\n                        ))}\n                </ul>\n\n                {this.renderActions()}\n            </>\n        );\n    }\n\n    private renderActions(): ReactNode {\n        const { isExpanded } = this.state;\n\n        if (this.getLineItemCount() < 5) {\n            return;\n        }\n\n        return (\n            <div className=\"cart-actions\">\n                <button\n                    className=\"button button--tertiary button--tiny optimizedCheckout-buttonSecondary\"\n                    onClick={this.handleToggle}\n                    type=\"button\"\n                >\n                    {isExpanded ? (\n                        <>\n                            <TranslatedString id=\"cart.see_less_action\" />\n                            <IconChevronUp />\n                        </>\n                    ) : (\n                        <>\n                            <TranslatedString id=\"cart.see_all_action\" />\n                            <IconChevronDown />\n                        </>\n                    )}\n                </button>\n            </div>\n        );\n    }\n\n    private getLineItemCount(): number {\n        const { items } = this.props;\n\n        return (\n            (items.customItems || []).length +\n            items.physicalItems.length +\n            items.digitalItems.length +\n            items.giftCertificates.length\n        );\n    }\n\n    private handleToggle: () => void = () => {\n        const { isExpanded } = this.state;\n\n        this.setState({ isExpanded: !isExpanded });\n    };\n}\n\nexport default OrderSummaryItems;\n","import classNames from 'classnames';\nimport React, { Component, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { preventDefault } from '../common/dom';\nimport { ShopperCurrency } from '../currency';\n\nexport interface OrderSummaryPriceProps {\n    label: ReactNode;\n    amount?: number | null;\n    zeroLabel?: ReactNode;\n    className?: string;\n    testId?: string;\n    currencyCode?: string;\n    superscript?: string;\n    actionLabel?: ReactNode;\n    onActionTriggered?(): void;\n}\n\nexport interface OrderSummaryPriceState {\n    highlight: boolean;\n    previousAmount?: number;\n}\n\nfunction getDisplayValue(amount?: number | null, zeroLabel?: ReactNode): ReactNode | number {\n    const notYetSetSymbol = '--';\n\n    if (typeof amount === 'undefined' || amount === null) {\n        return notYetSetSymbol;\n    }\n\n    if (zeroLabel && amount === 0) {\n        return zeroLabel;\n    }\n\n    return amount;\n}\n\nfunction isNumberValue(displayValue: number | ReactNode): displayValue is number {\n    return typeof displayValue === 'number';\n}\n\nclass OrderSummaryPrice extends Component<OrderSummaryPriceProps, OrderSummaryPriceState> {\n    static getDerivedStateFromProps(props: OrderSummaryPriceProps, state: OrderSummaryPriceState) {\n        return {\n            highlight: props.amount !== state.previousAmount,\n            previousAmount: props.amount,\n        };\n    }\n\n    state = {\n        highlight: false,\n        previousAmount: 0,\n    };\n\n    render(): ReactNode {\n        const {\n            amount,\n            actionLabel,\n            onActionTriggered,\n            children,\n            className,\n            currencyCode,\n            label,\n            superscript,\n            testId,\n            zeroLabel,\n        } = this.props;\n\n        const { highlight } = this.state;\n        const displayValue = getDisplayValue(amount, zeroLabel);\n\n        return (\n            <div data-test={testId}>\n                <CSSTransition\n                    addEndListener={this.handleTransitionEnd}\n                    classNames=\"changeHighlight\"\n                    in={highlight}\n                    timeout={{}}\n                >\n                    <div\n                        aria-live=\"polite\"\n                        className={classNames(\n                            'cart-priceItem',\n                            'optimizedCheckout-contentPrimary',\n                            className,\n                        )}\n                    >\n                        <span className=\"cart-priceItem-label\">\n                            <span data-test=\"cart-price-label\">\n                                {label}\n                                {'  '}\n                            </span>\n                            {currencyCode && (\n                                <span className=\"cart-priceItem-currencyCode\">\n                                    {`(${currencyCode}) `}\n                                </span>\n                            )}\n                            {onActionTriggered && actionLabel && (\n                                <span className=\"cart-priceItem-link\">\n                                    <a\n                                        data-test=\"cart-price-callback\"\n                                        href=\"#\"\n                                        onClick={preventDefault(onActionTriggered)}\n                                    >\n                                        {actionLabel}\n                                    </a>\n                                </span>\n                            )}\n                        </span>\n\n                        <span className=\"cart-priceItem-value\">\n                            <span data-test=\"cart-price-value\">\n                                {isNumberValue(displayValue) ? (\n                                    <ShopperCurrency amount={displayValue} />\n                                ) : (\n                                    displayValue\n                                )}\n                            </span>\n\n                            {superscript && (\n                                <sup data-test=\"cart-price-value-superscript\">{superscript}</sup>\n                            )}\n                        </span>\n\n                        {children}\n                    </div>\n                </CSSTransition>\n            </div>\n        );\n    }\n\n    private handleTransitionEnd: (node: HTMLElement, done: () => void) => void = (node, done) => {\n        const { previousAmount } = this.state;\n\n        node.addEventListener('animationend', ({ target }) => {\n            if (target === node) {\n                this.setState({\n                    highlight: false,\n                    previousAmount,\n                });\n                done();\n            }\n        });\n    };\n}\n\nexport default OrderSummaryPrice;\n","import React, { FunctionComponent } from 'react';\n\nconst OrderSummarySection: FunctionComponent = ({ children }) => (\n    <section className=\"cart-section optimizedCheckout-orderSummary-cartSection\">\n        {children}\n    </section>\n);\n\nexport default OrderSummarySection;\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { ShopperCurrency } from '../currency';\nimport { TranslatedString } from '../locale';\n\nimport OrderSummaryPrice, { OrderSummaryPriceProps } from './OrderSummaryPrice';\n\nexport interface OrderSummaryDiscountProps extends OrderSummaryPriceProps {\n    remaining?: number;\n    code?: string;\n    onRemoved?(code: string): void;\n}\n\nconst OrderSummaryDiscount: FunctionComponent<OrderSummaryDiscountProps> = ({\n    code,\n    remaining,\n    amount,\n    onRemoved,\n    ...rest\n}) => (\n    <OrderSummaryPrice\n        {...rest}\n        {...(onRemoved && {\n            onActionTriggered: () => code && onRemoved(code),\n            actionLabel: <TranslatedString id=\"cart.remove_action\" />,\n        })}\n        amount={-1 * (amount || 0)}\n    >\n        {!!remaining && remaining > 0 && (\n            <span\n                className=\"cart-priceItem-postFix optimizedCheckout-contentSecondary\"\n                data-test=\"cart-price-remaining\"\n            >\n                <TranslatedString id=\"cart.remaining_text\" />\n                {': '}\n                <ShopperCurrency amount={remaining} />\n            </span>\n        )}\n\n        {code && (\n            <span\n                className=\"cart-priceItem-postFix optimizedCheckout-contentSecondary\"\n                data-test=\"cart-price-code\"\n            >\n                {code}\n            </span>\n        )}\n    </OrderSummaryPrice>\n);\n\nexport default memo(OrderSummaryDiscount);\n","import { Coupon, GiftCertificate, Tax } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nimport OrderSummaryDiscount from './OrderSummaryDiscount';\nimport OrderSummaryPrice from './OrderSummaryPrice';\n\nexport interface OrderSummarySubtotalsProps {\n    coupons: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    discountAmount?: number;\n    taxes?: Tax[];\n    giftWrappingAmount?: number;\n    shippingAmount?: number;\n    handlingAmount?: number;\n    storeCreditAmount?: number;\n    subtotalAmount: number;\n    onRemovedGiftCertificate?(code: string): void;\n    onRemovedCoupon?(code: string): void;\n}\n\nconst OrderSummarySubtotals: FunctionComponent<OrderSummarySubtotalsProps> = ({\n    discountAmount,\n    giftCertificates,\n    taxes,\n    giftWrappingAmount,\n    shippingAmount,\n    subtotalAmount,\n    handlingAmount,\n    storeCreditAmount,\n    coupons,\n    onRemovedGiftCertificate,\n    onRemovedCoupon,\n}) => {\n    return (\n        <>\n            <OrderSummaryPrice\n                amount={subtotalAmount}\n                className=\"cart-priceItem--subtotal\"\n                label={<TranslatedString id=\"cart.subtotal_text\" />}\n                testId=\"cart-subtotal\"\n            />\n\n            {(coupons || []).map((coupon, index) => (\n                <OrderSummaryDiscount\n                    amount={coupon.discountedAmount}\n                    code={coupon.code}\n                    key={index}\n                    label={coupon.displayName}\n                    onRemoved={onRemovedCoupon}\n                    testId=\"cart-coupon\"\n                />\n            ))}\n\n            {!!discountAmount && (\n                <OrderSummaryDiscount\n                    amount={discountAmount}\n                    label={<TranslatedString id=\"cart.discount_text\" />}\n                    testId=\"cart-discount\"\n                />\n            )}\n\n            {(giftCertificates || []).map((giftCertificate, index) => (\n                <OrderSummaryDiscount\n                    amount={giftCertificate.used}\n                    code={giftCertificate.code}\n                    key={index}\n                    label={<TranslatedString id=\"cart.gift_certificate_text\" />}\n                    onRemoved={onRemovedGiftCertificate}\n                    remaining={giftCertificate.remaining}\n                    testId=\"cart-gift-certificate\"\n                />\n            ))}\n\n            {!!giftWrappingAmount && (\n                <OrderSummaryPrice\n                    amount={giftWrappingAmount}\n                    label={<TranslatedString id=\"cart.gift_wrapping_text\" />}\n                    testId=\"cart-gift-wrapping\"\n                />\n            )}\n\n            <OrderSummaryPrice\n                amount={shippingAmount}\n                label={<TranslatedString id=\"cart.shipping_text\" />}\n                testId=\"cart-shipping\"\n                zeroLabel={<TranslatedString id=\"cart.free_text\" />}\n            />\n\n            {!!handlingAmount && (\n                <OrderSummaryPrice\n                    amount={handlingAmount}\n                    label={<TranslatedString id=\"cart.handling_text\" />}\n                    testId=\"cart-handling\"\n                />\n            )}\n\n            {(taxes || []).map((tax, index) => (\n                <OrderSummaryPrice\n                    amount={tax.amount}\n                    key={index}\n                    label={tax.name}\n                    testId=\"cart-taxes\"\n                />\n            ))}\n\n            {!!storeCreditAmount && (\n                <OrderSummaryDiscount\n                    amount={storeCreditAmount}\n                    label={<TranslatedString id=\"cart.store_credit_text\" />}\n                    testId=\"cart-store-credit\"\n                />\n            )}\n        </>\n    );\n};\n\nexport default memo(OrderSummarySubtotals);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString, withCurrency, WithCurrencyProps } from '../locale';\n\nimport OrderSummaryPrice from './OrderSummaryPrice';\n\nexport interface OrderSummaryTotalProps {\n    orderAmount: number;\n    shopperCurrencyCode: string;\n    storeCurrencyCode: string;\n}\n\nconst OrderSummaryTotal: FunctionComponent<OrderSummaryTotalProps & WithCurrencyProps> = ({\n    shopperCurrencyCode,\n    storeCurrencyCode,\n    orderAmount,\n    currency,\n}) => {\n    const hasDifferentCurrency = shopperCurrencyCode !== storeCurrencyCode;\n    const label = (\n        <>\n            {hasDifferentCurrency ? (\n                <TranslatedString id=\"cart.estimated_total_text\" />\n            ) : (\n                <TranslatedString id=\"cart.total_text\" />\n            )}\n            {` (${shopperCurrencyCode})`}\n        </>\n    );\n\n    return (\n        <>\n            <OrderSummaryPrice\n                amount={orderAmount}\n                className=\"cart-priceItem--total\"\n                label={label}\n                superscript={hasDifferentCurrency ? '*' : undefined}\n                testId=\"cart-total\"\n            />\n            {hasDifferentCurrency && currency && (\n                <p className=\"cart-priceItem--totalNote\" data-test=\"cart-price-item-total-note\">\n                    <TranslatedString\n                        data={{\n                            total: currency.toStoreCurrency(orderAmount),\n                            code: storeCurrencyCode,\n                        }}\n                        id=\"cart.billed_amount_text\"\n                    />\n                </p>\n            )}\n        </>\n    );\n};\n\nexport default withCurrency(OrderSummaryTotal);\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\n\nexport default function getItemsCount({\n    physicalItems,\n    digitalItems,\n    giftCertificates,\n    customItems,\n}: LineItemMap): number {\n    const totalItemsCount = [...physicalItems, ...digitalItems, ...(customItems || [])].reduce(\n        (total, item) => (total += item.quantity),\n        0,\n    );\n\n    return totalItemsCount + giftCertificates.length;\n}\n","import React, { FunctionComponent } from 'react';\n\nconst IconGiftCertificate: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M20 6h-2.18c.11-.31.18-.65.18-1a2.996 2.996 0 0 0-5.5-1.65l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z\" />\n    </svg>\n);\n\nexport default IconGiftCertificate;\n","import React, {\n    Component,\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactNode,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <>\n                {children({\n                    onClick: this.handleOpen,\n                    onKeyPress: this.handleKeyOpen,\n                })}\n\n                {modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                })}\n            </>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n\n    private handleKeyOpen: (keyboardEvent: KeyboardEvent<HTMLElement>) => void = (\n        keyboardEvent,\n    ) => {\n        if (keyboardEvent.key === 'Enter') {\n            this.handleOpen();\n        }\n    };\n}\n"],"names":["getLineItemsCount","physicalItems","digitalItems","giftCertificates","customItems","length","renderHeader","onRequestClose","headerLink","className","href","onClick","preventDefault","TranslatedString","id","IconClose","ModalHeader","additionalClassName","additionalLineItems","onAfterOpen","storeCurrency","shopperCurrency","isOpen","lineItems","total","orderSummarySubtotalsProps","Modal","additionalBodyClassName","additionalHeaderClassName","header","OrderSummarySection","OrderSummaryItems","items","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","code","storeCurrencyCode","memo","coupons","discountAmount","handlingAmount","onRemovedCoupon","onRemovedGiftCertificate","shippingAmount","storeCreditAmount","giftWrappingAmount","subtotalAmount","taxes","renderModal","useCallback","props","ModalTrigger","modal","onKeyPress","tabIndex","productWithImage","imageUrl","alt","name","src","IconGiftCertificate","getImage","data","count","getItemsCount","ShopperCurrency","amount","height","viewBox","width","xmlns","d","item","quantity","extendedListPrice","getOrderSummaryItemImage","getDigitalItemDescription","downloadPageUrl","testId","content","rel","target","amountAfterDiscount","extendedSalePrice","image","productOptions","options","map","option","value","extendedComparisonPrice","description","giftWrapping","undefined","index","key","isNumber","handleToggle","isExpanded","state","setState","render","this","slice","sort","variantId","summaryItemProps","renderActions","getLineItemCount","type","IconChevronDown","highlight","previousAmount","handleTransitionEnd","node","done","addEventListener","getDerivedStateFromProps","actionLabel","onActionTriggered","children","currencyCode","label","superscript","zeroLabel","displayValue","getDisplayValue","CSSTransition","addEndListener","classNames","in","timeout","isNumberValue","Component","remaining","onRemoved","rest","OrderSummaryPrice","coupon","discountedAmount","displayName","giftCertificate","used","tax","currency","hasDifferentCurrency","toStoreCurrency","reduce","canHandleEvent","handleOpen","handleClose","handleKeyOpen","keyboardEvent","componentDidMount","componentWillUnmount"],"sourceRoot":""}